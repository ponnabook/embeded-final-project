
Final-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005da8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  08005f48  08005f48  00015f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061a0  080061a0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080061a0  080061a0  000161a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061a8  080061a8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061a8  080061a8  000161a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061ac  080061ac  000161ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080061b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000568  20000070  08006220  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200005d8  08006220  000205d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f1cc  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000209d  00000000  00000000  0002f26c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  00031310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cf8  00000000  00000000  000320d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001707a  00000000  00000000  00032dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fa90  00000000  00000000  00049e42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097fdf  00000000  00000000  000598d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f18b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fac  00000000  00000000  000f1904  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005f30 	.word	0x08005f30

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08005f30 	.word	0x08005f30

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_uldivmod>:
 8000b8c:	b953      	cbnz	r3, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b8e:	b94a      	cbnz	r2, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b90:	2900      	cmp	r1, #0
 8000b92:	bf08      	it	eq
 8000b94:	2800      	cmpeq	r0, #0
 8000b96:	bf1c      	itt	ne
 8000b98:	f04f 31ff 	movne.w	r1, #4294967295
 8000b9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba0:	f000 b974 	b.w	8000e8c <__aeabi_idiv0>
 8000ba4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bac:	f000 f806 	bl	8000bbc <__udivmoddi4>
 8000bb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb8:	b004      	add	sp, #16
 8000bba:	4770      	bx	lr

08000bbc <__udivmoddi4>:
 8000bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc0:	9d08      	ldr	r5, [sp, #32]
 8000bc2:	4604      	mov	r4, r0
 8000bc4:	468e      	mov	lr, r1
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d14d      	bne.n	8000c66 <__udivmoddi4+0xaa>
 8000bca:	428a      	cmp	r2, r1
 8000bcc:	4694      	mov	ip, r2
 8000bce:	d969      	bls.n	8000ca4 <__udivmoddi4+0xe8>
 8000bd0:	fab2 f282 	clz	r2, r2
 8000bd4:	b152      	cbz	r2, 8000bec <__udivmoddi4+0x30>
 8000bd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bda:	f1c2 0120 	rsb	r1, r2, #32
 8000bde:	fa20 f101 	lsr.w	r1, r0, r1
 8000be2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000be6:	ea41 0e03 	orr.w	lr, r1, r3
 8000bea:	4094      	lsls	r4, r2
 8000bec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf0:	0c21      	lsrs	r1, r4, #16
 8000bf2:	fbbe f6f8 	udiv	r6, lr, r8
 8000bf6:	fa1f f78c 	uxth.w	r7, ip
 8000bfa:	fb08 e316 	mls	r3, r8, r6, lr
 8000bfe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c02:	fb06 f107 	mul.w	r1, r6, r7
 8000c06:	4299      	cmp	r1, r3
 8000c08:	d90a      	bls.n	8000c20 <__udivmoddi4+0x64>
 8000c0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c12:	f080 811f 	bcs.w	8000e54 <__udivmoddi4+0x298>
 8000c16:	4299      	cmp	r1, r3
 8000c18:	f240 811c 	bls.w	8000e54 <__udivmoddi4+0x298>
 8000c1c:	3e02      	subs	r6, #2
 8000c1e:	4463      	add	r3, ip
 8000c20:	1a5b      	subs	r3, r3, r1
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c28:	fb08 3310 	mls	r3, r8, r0, r3
 8000c2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c30:	fb00 f707 	mul.w	r7, r0, r7
 8000c34:	42a7      	cmp	r7, r4
 8000c36:	d90a      	bls.n	8000c4e <__udivmoddi4+0x92>
 8000c38:	eb1c 0404 	adds.w	r4, ip, r4
 8000c3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c40:	f080 810a 	bcs.w	8000e58 <__udivmoddi4+0x29c>
 8000c44:	42a7      	cmp	r7, r4
 8000c46:	f240 8107 	bls.w	8000e58 <__udivmoddi4+0x29c>
 8000c4a:	4464      	add	r4, ip
 8000c4c:	3802      	subs	r0, #2
 8000c4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c52:	1be4      	subs	r4, r4, r7
 8000c54:	2600      	movs	r6, #0
 8000c56:	b11d      	cbz	r5, 8000c60 <__udivmoddi4+0xa4>
 8000c58:	40d4      	lsrs	r4, r2
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c60:	4631      	mov	r1, r6
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	428b      	cmp	r3, r1
 8000c68:	d909      	bls.n	8000c7e <__udivmoddi4+0xc2>
 8000c6a:	2d00      	cmp	r5, #0
 8000c6c:	f000 80ef 	beq.w	8000e4e <__udivmoddi4+0x292>
 8000c70:	2600      	movs	r6, #0
 8000c72:	e9c5 0100 	strd	r0, r1, [r5]
 8000c76:	4630      	mov	r0, r6
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	fab3 f683 	clz	r6, r3
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	d14a      	bne.n	8000d1c <__udivmoddi4+0x160>
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d302      	bcc.n	8000c90 <__udivmoddi4+0xd4>
 8000c8a:	4282      	cmp	r2, r0
 8000c8c:	f200 80f9 	bhi.w	8000e82 <__udivmoddi4+0x2c6>
 8000c90:	1a84      	subs	r4, r0, r2
 8000c92:	eb61 0303 	sbc.w	r3, r1, r3
 8000c96:	2001      	movs	r0, #1
 8000c98:	469e      	mov	lr, r3
 8000c9a:	2d00      	cmp	r5, #0
 8000c9c:	d0e0      	beq.n	8000c60 <__udivmoddi4+0xa4>
 8000c9e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ca2:	e7dd      	b.n	8000c60 <__udivmoddi4+0xa4>
 8000ca4:	b902      	cbnz	r2, 8000ca8 <__udivmoddi4+0xec>
 8000ca6:	deff      	udf	#255	; 0xff
 8000ca8:	fab2 f282 	clz	r2, r2
 8000cac:	2a00      	cmp	r2, #0
 8000cae:	f040 8092 	bne.w	8000dd6 <__udivmoddi4+0x21a>
 8000cb2:	eba1 010c 	sub.w	r1, r1, ip
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f fe8c 	uxth.w	lr, ip
 8000cbe:	2601      	movs	r6, #1
 8000cc0:	0c20      	lsrs	r0, r4, #16
 8000cc2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cc6:	fb07 1113 	mls	r1, r7, r3, r1
 8000cca:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cce:	fb0e f003 	mul.w	r0, lr, r3
 8000cd2:	4288      	cmp	r0, r1
 8000cd4:	d908      	bls.n	8000ce8 <__udivmoddi4+0x12c>
 8000cd6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cda:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cde:	d202      	bcs.n	8000ce6 <__udivmoddi4+0x12a>
 8000ce0:	4288      	cmp	r0, r1
 8000ce2:	f200 80cb 	bhi.w	8000e7c <__udivmoddi4+0x2c0>
 8000ce6:	4643      	mov	r3, r8
 8000ce8:	1a09      	subs	r1, r1, r0
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf0:	fb07 1110 	mls	r1, r7, r0, r1
 8000cf4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cf8:	fb0e fe00 	mul.w	lr, lr, r0
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d908      	bls.n	8000d12 <__udivmoddi4+0x156>
 8000d00:	eb1c 0404 	adds.w	r4, ip, r4
 8000d04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d08:	d202      	bcs.n	8000d10 <__udivmoddi4+0x154>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f200 80bb 	bhi.w	8000e86 <__udivmoddi4+0x2ca>
 8000d10:	4608      	mov	r0, r1
 8000d12:	eba4 040e 	sub.w	r4, r4, lr
 8000d16:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d1a:	e79c      	b.n	8000c56 <__udivmoddi4+0x9a>
 8000d1c:	f1c6 0720 	rsb	r7, r6, #32
 8000d20:	40b3      	lsls	r3, r6
 8000d22:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d26:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d2a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d2e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d32:	431c      	orrs	r4, r3
 8000d34:	40f9      	lsrs	r1, r7
 8000d36:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d3a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d3e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d42:	0c20      	lsrs	r0, r4, #16
 8000d44:	fa1f fe8c 	uxth.w	lr, ip
 8000d48:	fb09 1118 	mls	r1, r9, r8, r1
 8000d4c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d50:	fb08 f00e 	mul.w	r0, r8, lr
 8000d54:	4288      	cmp	r0, r1
 8000d56:	fa02 f206 	lsl.w	r2, r2, r6
 8000d5a:	d90b      	bls.n	8000d74 <__udivmoddi4+0x1b8>
 8000d5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d60:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d64:	f080 8088 	bcs.w	8000e78 <__udivmoddi4+0x2bc>
 8000d68:	4288      	cmp	r0, r1
 8000d6a:	f240 8085 	bls.w	8000e78 <__udivmoddi4+0x2bc>
 8000d6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d72:	4461      	add	r1, ip
 8000d74:	1a09      	subs	r1, r1, r0
 8000d76:	b2a4      	uxth	r4, r4
 8000d78:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d7c:	fb09 1110 	mls	r1, r9, r0, r1
 8000d80:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d84:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d88:	458e      	cmp	lr, r1
 8000d8a:	d908      	bls.n	8000d9e <__udivmoddi4+0x1e2>
 8000d8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d90:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d94:	d26c      	bcs.n	8000e70 <__udivmoddi4+0x2b4>
 8000d96:	458e      	cmp	lr, r1
 8000d98:	d96a      	bls.n	8000e70 <__udivmoddi4+0x2b4>
 8000d9a:	3802      	subs	r0, #2
 8000d9c:	4461      	add	r1, ip
 8000d9e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000da2:	fba0 9402 	umull	r9, r4, r0, r2
 8000da6:	eba1 010e 	sub.w	r1, r1, lr
 8000daa:	42a1      	cmp	r1, r4
 8000dac:	46c8      	mov	r8, r9
 8000dae:	46a6      	mov	lr, r4
 8000db0:	d356      	bcc.n	8000e60 <__udivmoddi4+0x2a4>
 8000db2:	d053      	beq.n	8000e5c <__udivmoddi4+0x2a0>
 8000db4:	b15d      	cbz	r5, 8000dce <__udivmoddi4+0x212>
 8000db6:	ebb3 0208 	subs.w	r2, r3, r8
 8000dba:	eb61 010e 	sbc.w	r1, r1, lr
 8000dbe:	fa01 f707 	lsl.w	r7, r1, r7
 8000dc2:	fa22 f306 	lsr.w	r3, r2, r6
 8000dc6:	40f1      	lsrs	r1, r6
 8000dc8:	431f      	orrs	r7, r3
 8000dca:	e9c5 7100 	strd	r7, r1, [r5]
 8000dce:	2600      	movs	r6, #0
 8000dd0:	4631      	mov	r1, r6
 8000dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd6:	f1c2 0320 	rsb	r3, r2, #32
 8000dda:	40d8      	lsrs	r0, r3
 8000ddc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de0:	fa21 f303 	lsr.w	r3, r1, r3
 8000de4:	4091      	lsls	r1, r2
 8000de6:	4301      	orrs	r1, r0
 8000de8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dec:	fa1f fe8c 	uxth.w	lr, ip
 8000df0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000df4:	fb07 3610 	mls	r6, r7, r0, r3
 8000df8:	0c0b      	lsrs	r3, r1, #16
 8000dfa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dfe:	fb00 f60e 	mul.w	r6, r0, lr
 8000e02:	429e      	cmp	r6, r3
 8000e04:	fa04 f402 	lsl.w	r4, r4, r2
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x260>
 8000e0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e0e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e12:	d22f      	bcs.n	8000e74 <__udivmoddi4+0x2b8>
 8000e14:	429e      	cmp	r6, r3
 8000e16:	d92d      	bls.n	8000e74 <__udivmoddi4+0x2b8>
 8000e18:	3802      	subs	r0, #2
 8000e1a:	4463      	add	r3, ip
 8000e1c:	1b9b      	subs	r3, r3, r6
 8000e1e:	b289      	uxth	r1, r1
 8000e20:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e24:	fb07 3316 	mls	r3, r7, r6, r3
 8000e28:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e2c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e30:	428b      	cmp	r3, r1
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x28a>
 8000e34:	eb1c 0101 	adds.w	r1, ip, r1
 8000e38:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e3c:	d216      	bcs.n	8000e6c <__udivmoddi4+0x2b0>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d914      	bls.n	8000e6c <__udivmoddi4+0x2b0>
 8000e42:	3e02      	subs	r6, #2
 8000e44:	4461      	add	r1, ip
 8000e46:	1ac9      	subs	r1, r1, r3
 8000e48:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e4c:	e738      	b.n	8000cc0 <__udivmoddi4+0x104>
 8000e4e:	462e      	mov	r6, r5
 8000e50:	4628      	mov	r0, r5
 8000e52:	e705      	b.n	8000c60 <__udivmoddi4+0xa4>
 8000e54:	4606      	mov	r6, r0
 8000e56:	e6e3      	b.n	8000c20 <__udivmoddi4+0x64>
 8000e58:	4618      	mov	r0, r3
 8000e5a:	e6f8      	b.n	8000c4e <__udivmoddi4+0x92>
 8000e5c:	454b      	cmp	r3, r9
 8000e5e:	d2a9      	bcs.n	8000db4 <__udivmoddi4+0x1f8>
 8000e60:	ebb9 0802 	subs.w	r8, r9, r2
 8000e64:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e68:	3801      	subs	r0, #1
 8000e6a:	e7a3      	b.n	8000db4 <__udivmoddi4+0x1f8>
 8000e6c:	4646      	mov	r6, r8
 8000e6e:	e7ea      	b.n	8000e46 <__udivmoddi4+0x28a>
 8000e70:	4620      	mov	r0, r4
 8000e72:	e794      	b.n	8000d9e <__udivmoddi4+0x1e2>
 8000e74:	4640      	mov	r0, r8
 8000e76:	e7d1      	b.n	8000e1c <__udivmoddi4+0x260>
 8000e78:	46d0      	mov	r8, sl
 8000e7a:	e77b      	b.n	8000d74 <__udivmoddi4+0x1b8>
 8000e7c:	3b02      	subs	r3, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	e732      	b.n	8000ce8 <__udivmoddi4+0x12c>
 8000e82:	4630      	mov	r0, r6
 8000e84:	e709      	b.n	8000c9a <__udivmoddi4+0xde>
 8000e86:	4464      	add	r4, ip
 8000e88:	3802      	subs	r0, #2
 8000e8a:	e742      	b.n	8000d12 <__udivmoddi4+0x156>

08000e8c <__aeabi_idiv0>:
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <DWT_Delay_Init>:
uint16_t SUM; uint8_t Presence = 0;

#include "DHT.h"

uint32_t DWT_Delay_Init(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000e94:	4b14      	ldr	r3, [pc, #80]	; (8000ee8 <DWT_Delay_Init+0x58>)
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	4a13      	ldr	r2, [pc, #76]	; (8000ee8 <DWT_Delay_Init+0x58>)
 8000e9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000e9e:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000ea0:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <DWT_Delay_Init+0x58>)
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	4a10      	ldr	r2, [pc, #64]	; (8000ee8 <DWT_Delay_Init+0x58>)
 8000ea6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000eaa:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000eac:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <DWT_Delay_Init+0x5c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a0e      	ldr	r2, [pc, #56]	; (8000eec <DWT_Delay_Init+0x5c>)
 8000eb2:	f023 0301 	bic.w	r3, r3, #1
 8000eb6:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <DWT_Delay_Init+0x5c>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a0b      	ldr	r2, [pc, #44]	; (8000eec <DWT_Delay_Init+0x5c>)
 8000ebe:	f043 0301 	orr.w	r3, r3, #1
 8000ec2:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000ec4:	4b09      	ldr	r3, [pc, #36]	; (8000eec <DWT_Delay_Init+0x5c>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000eca:	bf00      	nop
     __ASM volatile ("NOP");
 8000ecc:	bf00      	nop
  __ASM volatile ("NOP");
 8000ece:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <DWT_Delay_Init+0x5c>)
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000ed8:	2300      	movs	r3, #0
 8000eda:	e000      	b.n	8000ede <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000edc:	2301      	movs	r3, #1
  }
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000edf0 	.word	0xe000edf0
 8000eec:	e0001000 	.word	0xe0001000

08000ef0 <delay>:

__STATIC_INLINE void delay(volatile uint32_t microseconds)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000ef8:	4b0d      	ldr	r3, [pc, #52]	; (8000f30 <delay+0x40>)
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000efe:	f002 fd85 	bl	8003a0c <HAL_RCC_GetHCLKFreq>
 8000f02:	4603      	mov	r3, r0
 8000f04:	4a0b      	ldr	r2, [pc, #44]	; (8000f34 <delay+0x44>)
 8000f06:	fba2 2303 	umull	r2, r3, r2, r3
 8000f0a:	0c9b      	lsrs	r3, r3, #18
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	fb02 f303 	mul.w	r3, r2, r3
 8000f12:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000f14:	bf00      	nop
 8000f16:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <delay+0x40>)
 8000f18:	685a      	ldr	r2, [r3, #4]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	1ad2      	subs	r2, r2, r3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d3f8      	bcc.n	8000f16 <delay+0x26>
}
 8000f24:	bf00      	nop
 8000f26:	bf00      	nop
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	e0001000 	.word	0xe0001000
 8000f34:	431bde83 	.word	0x431bde83

08000f38 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b088      	sub	sp, #32
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	460b      	mov	r3, r1
 8000f42:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	f107 030c 	add.w	r3, r7, #12
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000f54:	887b      	ldrh	r3, [r7, #2]
 8000f56:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000f60:	f107 030c 	add.w	r3, r7, #12
 8000f64:	4619      	mov	r1, r3
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f001 ff36 	bl	8002dd8 <HAL_GPIO_Init>
}
 8000f6c:	bf00      	nop
 8000f6e:	3720      	adds	r7, #32
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b088      	sub	sp, #32
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 030c 	add.w	r3, r7, #12
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000f90:	887b      	ldrh	r3, [r7, #2]
 8000f92:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f94:	2300      	movs	r3, #0
 8000f96:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000f9c:	f107 030c 	add.w	r3, r7, #12
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f001 ff18 	bl	8002dd8 <HAL_GPIO_Init>
}
 8000fa8:	bf00      	nop
 8000faa:	3720      	adds	r7, #32
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <DHT_Start>:


void DHT_Start (void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8000fb4:	f7ff ff6c 	bl	8000e90 <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8000fb8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fbc:	480e      	ldr	r0, [pc, #56]	; (8000ff8 <DHT_Start+0x48>)
 8000fbe:	f7ff ffbb 	bl	8000f38 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fc8:	480b      	ldr	r0, [pc, #44]	; (8000ff8 <DHT_Start+0x48>)
 8000fca:	f002 f8a1 	bl	8003110 <HAL_GPIO_WritePin>

#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
 8000fce:	f244 6050 	movw	r0, #18000	; 0x4650
 8000fd2:	f7ff ff8d 	bl	8000ef0 <delay>

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fdc:	4806      	ldr	r0, [pc, #24]	; (8000ff8 <DHT_Start+0x48>)
 8000fde:	f002 f897 	bl	8003110 <HAL_GPIO_WritePin>
    delay (20);   // wait for 30us
 8000fe2:	2014      	movs	r0, #20
 8000fe4:	f7ff ff84 	bl	8000ef0 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 8000fe8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fec:	4802      	ldr	r0, [pc, #8]	; (8000ff8 <DHT_Start+0x48>)
 8000fee:	f7ff ffc1 	bl	8000f74 <Set_Pin_Input>
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40020000 	.word	0x40020000

08000ffc <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	71fb      	strb	r3, [r7, #7]
	delay (40);
 8001006:	2028      	movs	r0, #40	; 0x28
 8001008:	f7ff ff72 	bl	8000ef0 <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 800100c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001010:	4811      	ldr	r0, [pc, #68]	; (8001058 <DHT_Check_Response+0x5c>)
 8001012:	f002 f865 	bl	80030e0 <HAL_GPIO_ReadPin>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d10f      	bne.n	800103c <DHT_Check_Response+0x40>
	{
		delay (80);
 800101c:	2050      	movs	r0, #80	; 0x50
 800101e:	f7ff ff67 	bl	8000ef0 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 8001022:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001026:	480c      	ldr	r0, [pc, #48]	; (8001058 <DHT_Check_Response+0x5c>)
 8001028:	f002 f85a 	bl	80030e0 <HAL_GPIO_ReadPin>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d002      	beq.n	8001038 <DHT_Check_Response+0x3c>
 8001032:	2301      	movs	r3, #1
 8001034:	71fb      	strb	r3, [r7, #7]
 8001036:	e001      	b.n	800103c <DHT_Check_Response+0x40>
		else Response = -1;
 8001038:	23ff      	movs	r3, #255	; 0xff
 800103a:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 800103c:	bf00      	nop
 800103e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001042:	4805      	ldr	r0, [pc, #20]	; (8001058 <DHT_Check_Response+0x5c>)
 8001044:	f002 f84c 	bl	80030e0 <HAL_GPIO_ReadPin>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d1f7      	bne.n	800103e <DHT_Check_Response+0x42>

	return Response;
 800104e:	79fb      	ldrb	r3, [r7, #7]
}
 8001050:	4618      	mov	r0, r3
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40020000 	.word	0x40020000

0800105c <DHT_Read>:

uint8_t DHT_Read (void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8001062:	2300      	movs	r3, #0
 8001064:	71bb      	strb	r3, [r7, #6]
 8001066:	e03a      	b.n	80010de <DHT_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 8001068:	bf00      	nop
 800106a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800106e:	4820      	ldr	r0, [pc, #128]	; (80010f0 <DHT_Read+0x94>)
 8001070:	f002 f836 	bl	80030e0 <HAL_GPIO_ReadPin>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d0f7      	beq.n	800106a <DHT_Read+0xe>
		delay (40);   // wait for 40 us
 800107a:	2028      	movs	r0, #40	; 0x28
 800107c:	f7ff ff38 	bl	8000ef0 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 8001080:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001084:	481a      	ldr	r0, [pc, #104]	; (80010f0 <DHT_Read+0x94>)
 8001086:	f002 f82b 	bl	80030e0 <HAL_GPIO_ReadPin>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d10e      	bne.n	80010ae <DHT_Read+0x52>
		{
			i&= ~(1<<(7-j));   // write 0
 8001090:	79bb      	ldrb	r3, [r7, #6]
 8001092:	f1c3 0307 	rsb	r3, r3, #7
 8001096:	2201      	movs	r2, #1
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	b25b      	sxtb	r3, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	b25a      	sxtb	r2, r3
 80010a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a6:	4013      	ands	r3, r2
 80010a8:	b25b      	sxtb	r3, r3
 80010aa:	71fb      	strb	r3, [r7, #7]
 80010ac:	e00b      	b.n	80010c6 <DHT_Read+0x6a>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 80010ae:	79bb      	ldrb	r3, [r7, #6]
 80010b0:	f1c3 0307 	rsb	r3, r3, #7
 80010b4:	2201      	movs	r2, #1
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	b25a      	sxtb	r2, r3
 80010bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	b25b      	sxtb	r3, r3
 80010c4:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 80010c6:	bf00      	nop
 80010c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010cc:	4808      	ldr	r0, [pc, #32]	; (80010f0 <DHT_Read+0x94>)
 80010ce:	f002 f807 	bl	80030e0 <HAL_GPIO_ReadPin>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d1f7      	bne.n	80010c8 <DHT_Read+0x6c>
	for (j=0;j<8;j++)
 80010d8:	79bb      	ldrb	r3, [r7, #6]
 80010da:	3301      	adds	r3, #1
 80010dc:	71bb      	strb	r3, [r7, #6]
 80010de:	79bb      	ldrb	r3, [r7, #6]
 80010e0:	2b07      	cmp	r3, #7
 80010e2:	d9c1      	bls.n	8001068 <DHT_Read+0xc>
	}
	return i;
 80010e4:	79fb      	ldrb	r3, [r7, #7]
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40020000 	.word	0x40020000

080010f4 <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 80010fc:	f7ff ff58 	bl	8000fb0 <DHT_Start>
	Presence = DHT_Check_Response ();
 8001100:	f7ff ff7c 	bl	8000ffc <DHT_Check_Response>
 8001104:	4603      	mov	r3, r0
 8001106:	461a      	mov	r2, r3
 8001108:	4b23      	ldr	r3, [pc, #140]	; (8001198 <DHT_GetData+0xa4>)
 800110a:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 800110c:	f7ff ffa6 	bl	800105c <DHT_Read>
 8001110:	4603      	mov	r3, r0
 8001112:	461a      	mov	r2, r3
 8001114:	4b21      	ldr	r3, [pc, #132]	; (800119c <DHT_GetData+0xa8>)
 8001116:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 8001118:	f7ff ffa0 	bl	800105c <DHT_Read>
 800111c:	4603      	mov	r3, r0
 800111e:	461a      	mov	r2, r3
 8001120:	4b1f      	ldr	r3, [pc, #124]	; (80011a0 <DHT_GetData+0xac>)
 8001122:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 8001124:	f7ff ff9a 	bl	800105c <DHT_Read>
 8001128:	4603      	mov	r3, r0
 800112a:	461a      	mov	r2, r3
 800112c:	4b1d      	ldr	r3, [pc, #116]	; (80011a4 <DHT_GetData+0xb0>)
 800112e:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 8001130:	f7ff ff94 	bl	800105c <DHT_Read>
 8001134:	4603      	mov	r3, r0
 8001136:	461a      	mov	r2, r3
 8001138:	4b1b      	ldr	r3, [pc, #108]	; (80011a8 <DHT_GetData+0xb4>)
 800113a:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 800113c:	f7ff ff8e 	bl	800105c <DHT_Read>
 8001140:	4603      	mov	r3, r0
 8001142:	b29a      	uxth	r2, r3
 8001144:	4b19      	ldr	r3, [pc, #100]	; (80011ac <DHT_GetData+0xb8>)
 8001146:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 8001148:	4b18      	ldr	r3, [pc, #96]	; (80011ac <DHT_GetData+0xb8>)
 800114a:	881b      	ldrh	r3, [r3, #0]
 800114c:	4619      	mov	r1, r3
 800114e:	4b13      	ldr	r3, [pc, #76]	; (800119c <DHT_GetData+0xa8>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	461a      	mov	r2, r3
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <DHT_GetData+0xac>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	4413      	add	r3, r2
 800115a:	4a12      	ldr	r2, [pc, #72]	; (80011a4 <DHT_GetData+0xb0>)
 800115c:	7812      	ldrb	r2, [r2, #0]
 800115e:	4413      	add	r3, r2
 8001160:	4a11      	ldr	r2, [pc, #68]	; (80011a8 <DHT_GetData+0xb4>)
 8001162:	7812      	ldrb	r2, [r2, #0]
 8001164:	4413      	add	r3, r2
 8001166:	4299      	cmp	r1, r3
 8001168:	d111      	bne.n	800118e <DHT_GetData+0x9a>
	{
		#if defined(TYPE_DHT11)
			DHT_Data->Temperature = Temp_byte1;
 800116a:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <DHT_GetData+0xb0>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	ee07 3a90 	vmov	s15, r3
 8001172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	edc3 7a00 	vstr	s15, [r3]
			DHT_Data->Humidity = Rh_byte1;
 800117c:	4b07      	ldr	r3, [pc, #28]	; (800119c <DHT_GetData+0xa8>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	edc3 7a01 	vstr	s15, [r3, #4]
		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
		#endif
	}
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000092 	.word	0x20000092
 800119c:	2000008c 	.word	0x2000008c
 80011a0:	2000008d 	.word	0x2000008d
 80011a4:	2000008e 	.word	0x2000008e
 80011a8:	2000008f 	.word	0x2000008f
 80011ac:	20000090 	.word	0x20000090

080011b0 <ADC_ReadChannel>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint32_t ADC_ReadChannel(uint32_t channel)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b088      	sub	sp, #32
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]

  ADC_ChannelConfTypeDef sConfig = {0};
 80011b8:	f107 030c 	add.w	r3, r7, #12
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]

  // Configure ADC channel
  sConfig.Channel = channel;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	60fb      	str	r3, [r7, #12]
  sConfig.Rank = 1;
 80011ca:	2301      	movs	r3, #1
 80011cc:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011ce:	2300      	movs	r3, #0
 80011d0:	617b      	str	r3, [r7, #20]

  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80011d2:	f107 030c 	add.w	r3, r7, #12
 80011d6:	4619      	mov	r1, r3
 80011d8:	480d      	ldr	r0, [pc, #52]	; (8001210 <ADC_ReadChannel+0x60>)
 80011da:	f001 fa2b 	bl	8002634 <HAL_ADC_ConfigChannel>

  // Start ADC conversion
  HAL_ADC_Start(&hadc1);
 80011de:	480c      	ldr	r0, [pc, #48]	; (8001210 <ADC_ReadChannel+0x60>)
 80011e0:	f001 f8a8 	bl	8002334 <HAL_ADC_Start>

  // Wait for conversion to complete
  uint32_t adcValue = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61fb      	str	r3, [r7, #28]

  if( HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK )
 80011e8:	f04f 31ff 	mov.w	r1, #4294967295
 80011ec:	4808      	ldr	r0, [pc, #32]	; (8001210 <ADC_ReadChannel+0x60>)
 80011ee:	f001 f988 	bl	8002502 <HAL_ADC_PollForConversion>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d103      	bne.n	8001200 <ADC_ReadChannel+0x50>
	  adcValue = HAL_ADC_GetValue(&hadc1);
 80011f8:	4805      	ldr	r0, [pc, #20]	; (8001210 <ADC_ReadChannel+0x60>)
 80011fa:	f001 fa0d 	bl	8002618 <HAL_ADC_GetValue>
 80011fe:	61f8      	str	r0, [r7, #28]

  // Stop ADC conversion
  HAL_ADC_Stop(&hadc1);
 8001200:	4803      	ldr	r0, [pc, #12]	; (8001210 <ADC_ReadChannel+0x60>)
 8001202:	f001 f94b 	bl	800249c <HAL_ADC_Stop>

  return adcValue;
 8001206:	69fb      	ldr	r3, [r7, #28]
}
 8001208:	4618      	mov	r0, r3
 800120a:	3720      	adds	r7, #32
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000094 	.word	0x20000094
 8001214:	00000000 	.word	0x00000000

08001218 <LDRconversion>:

//LDR --------------------------------------
int LDRconversion(int raw_val){
 8001218:	b580      	push	{r7, lr}
 800121a:	b088      	sub	sp, #32
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  // Conversion rule
  double Vout = (double)raw_val * Vin / ( 4096.0 - 1.0 );// Conversion analog to voltage
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff f987 	bl	8000534 <__aeabi_i2d>
 8001226:	a326      	add	r3, pc, #152	; (adr r3, 80012c0 <LDRconversion+0xa8>)
 8001228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122c:	f7ff f9ec 	bl	8000608 <__aeabi_dmul>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	4610      	mov	r0, r2
 8001236:	4619      	mov	r1, r3
 8001238:	a323      	add	r3, pc, #140	; (adr r3, 80012c8 <LDRconversion+0xb0>)
 800123a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123e:	f7ff fb0d 	bl	800085c <__aeabi_ddiv>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	e9c7 2306 	strd	r2, r3, [r7, #24]
  double RLDR = (R * (Vin - Vout))/Vout; // Conversion voltage to resistance
 800124a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800124e:	a11c      	add	r1, pc, #112	; (adr r1, 80012c0 <LDRconversion+0xa8>)
 8001250:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001254:	f7ff f820 	bl	8000298 <__aeabi_dsub>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	4610      	mov	r0, r2
 800125e:	4619      	mov	r1, r3
 8001260:	a31b      	add	r3, pc, #108	; (adr r3, 80012d0 <LDRconversion+0xb8>)
 8001262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001266:	f7ff f9cf 	bl	8000608 <__aeabi_dmul>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4610      	mov	r0, r2
 8001270:	4619      	mov	r1, r3
 8001272:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001276:	f7ff faf1 	bl	800085c <__aeabi_ddiv>
 800127a:	4602      	mov	r2, r0
 800127c:	460b      	mov	r3, r1
 800127e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  int lux = 500/(RLDR/1000); // Conversion resitance to lumen
 8001282:	f04f 0200 	mov.w	r2, #0
 8001286:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <LDRconversion+0xa0>)
 8001288:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800128c:	f7ff fae6 	bl	800085c <__aeabi_ddiv>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	f04f 0000 	mov.w	r0, #0
 8001298:	4908      	ldr	r1, [pc, #32]	; (80012bc <LDRconversion+0xa4>)
 800129a:	f7ff fadf 	bl	800085c <__aeabi_ddiv>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	4610      	mov	r0, r2
 80012a4:	4619      	mov	r1, r3
 80012a6:	f7ff fc49 	bl	8000b3c <__aeabi_d2iz>
 80012aa:	4603      	mov	r3, r0
 80012ac:	60fb      	str	r3, [r7, #12]
  return lux;
 80012ae:	68fb      	ldr	r3, [r7, #12]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3720      	adds	r7, #32
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	408f4000 	.word	0x408f4000
 80012bc:	407f4000 	.word	0x407f4000
 80012c0:	66666666 	.word	0x66666666
 80012c4:	400a6666 	.word	0x400a6666
 80012c8:	00000000 	.word	0x00000000
 80012cc:	40affe00 	.word	0x40affe00
 80012d0:	00000000 	.word	0x00000000
 80012d4:	40c38800 	.word	0x40c38800

080012d8 <Light_intensity_readData>:

void Light_intensity_readData(){
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
	int LDRval = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	607b      	str	r3, [r7, #4]

	LDRval = ADC_ReadChannel(ADC_CHANNEL_0);
 80012e2:	2000      	movs	r0, #0
 80012e4:	f7ff ff64 	bl	80011b0 <ADC_ReadChannel>
 80012e8:	4603      	mov	r3, r0
 80012ea:	607b      	str	r3, [r7, #4]

	//HAL_UART_Transmit(&huart2, (uint8_t*)str, sprintf(str, "LDR00-%d\r\n", LDRval )  , 10 );

	light = LDRconversion(LDRval);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff ff93 	bl	8001218 <LDRconversion>
 80012f2:	4603      	mov	r3, r0
 80012f4:	4a02      	ldr	r2, [pc, #8]	; (8001300 <Light_intensity_readData+0x28>)
 80012f6:	6013      	str	r3, [r2, #0]
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	200001ac 	.word	0x200001ac

08001304 <SoilMoisturePercentage>:

//Soil Moisture ----------------------------
double SoilMoisturePercentage(int raw_val){
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	//double percentage = 100 - ( (double)raw_val / ( 4096.0 - 1.0 ) ) * 100;

	//For probe - Noted: data is collected when Using Vin = 5 V, R = 330 ohm
	//ADC output when soil is dry = 0
	//ADC output when soil is in the water = 800 (test by dip it in the water)
	double percentage = ( (double)raw_val / 800.0 ) * 100.0; // Conversion ADC value to percentage
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff f911 	bl	8000534 <__aeabi_i2d>
 8001312:	f04f 0200 	mov.w	r2, #0
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <SoilMoisturePercentage+0x68>)
 8001318:	f7ff faa0 	bl	800085c <__aeabi_ddiv>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	4610      	mov	r0, r2
 8001322:	4619      	mov	r1, r3
 8001324:	f04f 0200 	mov.w	r2, #0
 8001328:	4b11      	ldr	r3, [pc, #68]	; (8001370 <SoilMoisturePercentage+0x6c>)
 800132a:	f7ff f96d 	bl	8000608 <__aeabi_dmul>
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	e9c7 2302 	strd	r2, r3, [r7, #8]

	//Noted2: may have error due to the experiment (eg. a little bit higher than max we have known)
	if( percentage > 100.0 ) percentage = 100;
 8001336:	f04f 0200 	mov.w	r2, #0
 800133a:	4b0d      	ldr	r3, [pc, #52]	; (8001370 <SoilMoisturePercentage+0x6c>)
 800133c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001340:	f7ff fbf2 	bl	8000b28 <__aeabi_dcmpgt>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d004      	beq.n	8001354 <SoilMoisturePercentage+0x50>
 800134a:	f04f 0200 	mov.w	r2, #0
 800134e:	4b08      	ldr	r3, [pc, #32]	; (8001370 <SoilMoisturePercentage+0x6c>)
 8001350:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return percentage;
 8001354:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001358:	ec43 2b17 	vmov	d7, r2, r3
}
 800135c:	eeb0 0a47 	vmov.f32	s0, s14
 8001360:	eef0 0a67 	vmov.f32	s1, s15
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40890000 	.word	0x40890000
 8001370:	40590000 	.word	0x40590000

08001374 <Soil_moisture_readData>:

void Soil_moisture_readData(){
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
	int SoilMoistval = 0;
 800137a:	2300      	movs	r3, #0
 800137c:	607b      	str	r3, [r7, #4]

	SoilMoistval = ADC_ReadChannel(ADC_CHANNEL_1);
 800137e:	2001      	movs	r0, #1
 8001380:	f7ff ff16 	bl	80011b0 <ADC_ReadChannel>
 8001384:	4603      	mov	r3, r0
 8001386:	607b      	str	r3, [r7, #4]

	//HAL_UART_Transmit(&huart2, (uint8_t*)str, sprintf(str, "Soil01-%d\r\n", SoilMoistval )  , 10 );

	soilMoist = SoilMoisturePercentage(SoilMoistval);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff ffbb 	bl	8001304 <SoilMoisturePercentage>
 800138e:	eeb0 7a40 	vmov.f32	s14, s0
 8001392:	eef0 7a60 	vmov.f32	s15, s1
 8001396:	4b03      	ldr	r3, [pc, #12]	; (80013a4 <Soil_moisture_readData+0x30>)
 8001398:	ed83 7b00 	vstr	d7, [r3]

}
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	200001b0 	.word	0x200001b0

080013a8 <Temp_Humid_readData>:

//Temperature and Humidity -----------------
void Temp_Humid_readData(){
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0

	DHT_GetData(&DHT11_Data);
 80013ac:	480c      	ldr	r0, [pc, #48]	; (80013e0 <Temp_Humid_readData+0x38>)
 80013ae:	f7ff fea1 	bl	80010f4 <DHT_GetData>
	tmpHumid.tCelsius = DHT11_Data.Temperature;
 80013b2:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <Temp_Humid_readData+0x38>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff f8ce 	bl	8000558 <__aeabi_f2d>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	4908      	ldr	r1, [pc, #32]	; (80013e4 <Temp_Humid_readData+0x3c>)
 80013c2:	e9c1 2300 	strd	r2, r3, [r1]
	tmpHumid.humidity = DHT11_Data.Humidity;
 80013c6:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <Temp_Humid_readData+0x38>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff f8c4 	bl	8000558 <__aeabi_f2d>
 80013d0:	4602      	mov	r2, r0
 80013d2:	460b      	mov	r3, r1
 80013d4:	4903      	ldr	r1, [pc, #12]	; (80013e4 <Temp_Humid_readData+0x3c>)
 80013d6:	e9c1 2302 	strd	r2, r3, [r1, #8]

}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	200005b8 	.word	0x200005b8
 80013e4:	200001b8 	.word	0x200001b8

080013e8 <HAL_UART_RxCpltCallback>:

//For Interact with NodeMCU
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b090      	sub	sp, #64	; 0x40
 80013ec:	af06      	add	r7, sp, #24
 80013ee:	6078      	str	r0, [r7, #4]

	if( huart == &huart1 ){
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4a4b      	ldr	r2, [pc, #300]	; (8001520 <HAL_UART_RxCpltCallback+0x138>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	f040 808e 	bne.w	8001516 <HAL_UART_RxCpltCallback+0x12e>
		int tInt = tmpHumid.tCelsius, tFloat = (int)( tmpHumid.tCelsius * 10 ) % 10;
 80013fa:	4b4a      	ldr	r3, [pc, #296]	; (8001524 <HAL_UART_RxCpltCallback+0x13c>)
 80013fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001400:	4610      	mov	r0, r2
 8001402:	4619      	mov	r1, r3
 8001404:	f7ff fb9a 	bl	8000b3c <__aeabi_d2iz>
 8001408:	4603      	mov	r3, r0
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
 800140c:	4b45      	ldr	r3, [pc, #276]	; (8001524 <HAL_UART_RxCpltCallback+0x13c>)
 800140e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001412:	f04f 0200 	mov.w	r2, #0
 8001416:	4b44      	ldr	r3, [pc, #272]	; (8001528 <HAL_UART_RxCpltCallback+0x140>)
 8001418:	f7ff f8f6 	bl	8000608 <__aeabi_dmul>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	4610      	mov	r0, r2
 8001422:	4619      	mov	r1, r3
 8001424:	f7ff fb8a 	bl	8000b3c <__aeabi_d2iz>
 8001428:	4602      	mov	r2, r0
 800142a:	4b40      	ldr	r3, [pc, #256]	; (800152c <HAL_UART_RxCpltCallback+0x144>)
 800142c:	fb83 1302 	smull	r1, r3, r3, r2
 8001430:	1099      	asrs	r1, r3, #2
 8001432:	17d3      	asrs	r3, r2, #31
 8001434:	1ac9      	subs	r1, r1, r3
 8001436:	460b      	mov	r3, r1
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	440b      	add	r3, r1
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	623b      	str	r3, [r7, #32]
		int aInt = tmpHumid.humidity, aFloat = (int)( tmpHumid.humidity * 10 ) % 10;
 8001442:	4b38      	ldr	r3, [pc, #224]	; (8001524 <HAL_UART_RxCpltCallback+0x13c>)
 8001444:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001448:	4610      	mov	r0, r2
 800144a:	4619      	mov	r1, r3
 800144c:	f7ff fb76 	bl	8000b3c <__aeabi_d2iz>
 8001450:	4603      	mov	r3, r0
 8001452:	61fb      	str	r3, [r7, #28]
 8001454:	4b33      	ldr	r3, [pc, #204]	; (8001524 <HAL_UART_RxCpltCallback+0x13c>)
 8001456:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800145a:	f04f 0200 	mov.w	r2, #0
 800145e:	4b32      	ldr	r3, [pc, #200]	; (8001528 <HAL_UART_RxCpltCallback+0x140>)
 8001460:	f7ff f8d2 	bl	8000608 <__aeabi_dmul>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	4610      	mov	r0, r2
 800146a:	4619      	mov	r1, r3
 800146c:	f7ff fb66 	bl	8000b3c <__aeabi_d2iz>
 8001470:	4602      	mov	r2, r0
 8001472:	4b2e      	ldr	r3, [pc, #184]	; (800152c <HAL_UART_RxCpltCallback+0x144>)
 8001474:	fb83 1302 	smull	r1, r3, r3, r2
 8001478:	1099      	asrs	r1, r3, #2
 800147a:	17d3      	asrs	r3, r2, #31
 800147c:	1ac9      	subs	r1, r1, r3
 800147e:	460b      	mov	r3, r1
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	440b      	add	r3, r1
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	61bb      	str	r3, [r7, #24]
		int l = light;
 800148a:	4b29      	ldr	r3, [pc, #164]	; (8001530 <HAL_UART_RxCpltCallback+0x148>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	617b      	str	r3, [r7, #20]
		int sInt = soilMoist, sFloat = (int)( soilMoist * 10 ) % 10;
 8001490:	4b28      	ldr	r3, [pc, #160]	; (8001534 <HAL_UART_RxCpltCallback+0x14c>)
 8001492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001496:	4610      	mov	r0, r2
 8001498:	4619      	mov	r1, r3
 800149a:	f7ff fb4f 	bl	8000b3c <__aeabi_d2iz>
 800149e:	4603      	mov	r3, r0
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	4b24      	ldr	r3, [pc, #144]	; (8001534 <HAL_UART_RxCpltCallback+0x14c>)
 80014a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014a8:	f04f 0200 	mov.w	r2, #0
 80014ac:	4b1e      	ldr	r3, [pc, #120]	; (8001528 <HAL_UART_RxCpltCallback+0x140>)
 80014ae:	f7ff f8ab 	bl	8000608 <__aeabi_dmul>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	4610      	mov	r0, r2
 80014b8:	4619      	mov	r1, r3
 80014ba:	f7ff fb3f 	bl	8000b3c <__aeabi_d2iz>
 80014be:	4602      	mov	r2, r0
 80014c0:	4b1a      	ldr	r3, [pc, #104]	; (800152c <HAL_UART_RxCpltCallback+0x144>)
 80014c2:	fb83 1302 	smull	r1, r3, r3, r2
 80014c6:	1099      	asrs	r1, r3, #2
 80014c8:	17d3      	asrs	r3, r2, #31
 80014ca:	1ac9      	subs	r1, r1, r3
 80014cc:	460b      	mov	r3, r1
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	440b      	add	r3, r1
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	60fb      	str	r3, [r7, #12]

		sprintf(text, "{\"data\": {\"temperature\": %d.%d, \"airHumidity\": %d.%d, \"lightIntensity\": %d, \"soilHumidity\": %d.%d}}", tInt, tFloat, aInt, aFloat, l, sInt, sFloat);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	9304      	str	r3, [sp, #16]
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	9303      	str	r3, [sp, #12]
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	9302      	str	r3, [sp, #8]
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	9301      	str	r3, [sp, #4]
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	9300      	str	r3, [sp, #0]
 80014ec:	6a3b      	ldr	r3, [r7, #32]
 80014ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014f0:	4911      	ldr	r1, [pc, #68]	; (8001538 <HAL_UART_RxCpltCallback+0x150>)
 80014f2:	4812      	ldr	r0, [pc, #72]	; (800153c <HAL_UART_RxCpltCallback+0x154>)
 80014f4:	f004 f8ae 	bl	8005654 <siprintf>

		HAL_UART_Transmit(&huart1, text, strlen(text), 100);
 80014f8:	4810      	ldr	r0, [pc, #64]	; (800153c <HAL_UART_RxCpltCallback+0x154>)
 80014fa:	f7fe fe71 	bl	80001e0 <strlen>
 80014fe:	4603      	mov	r3, r0
 8001500:	b29a      	uxth	r2, r3
 8001502:	2364      	movs	r3, #100	; 0x64
 8001504:	490d      	ldr	r1, [pc, #52]	; (800153c <HAL_UART_RxCpltCallback+0x154>)
 8001506:	4806      	ldr	r0, [pc, #24]	; (8001520 <HAL_UART_RxCpltCallback+0x138>)
 8001508:	f003 f847 	bl	800459a <HAL_UART_Transmit>
	    //HAL_UART_Transmit(&huart2, text, strlen(text), 100); // internal uart
		HAL_UART_Receive_IT(&huart1, rx_data, 1);
 800150c:	2201      	movs	r2, #1
 800150e:	490c      	ldr	r1, [pc, #48]	; (8001540 <HAL_UART_RxCpltCallback+0x158>)
 8001510:	4803      	ldr	r0, [pc, #12]	; (8001520 <HAL_UART_RxCpltCallback+0x138>)
 8001512:	f003 f8d4 	bl	80046be <HAL_UART_Receive_IT>
	}

}
 8001516:	bf00      	nop
 8001518:	3728      	adds	r7, #40	; 0x28
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000124 	.word	0x20000124
 8001524:	200001b8 	.word	0x200001b8
 8001528:	40240000 	.word	0x40240000
 800152c:	66666667 	.word	0x66666667
 8001530:	200001ac 	.word	0x200001ac
 8001534:	200001b0 	.word	0x200001b0
 8001538:	08005f48 	.word	0x08005f48
 800153c:	200001c8 	.word	0x200001c8
 8001540:	200005b0 	.word	0x200005b0

08001544 <Print_console>:

}

//Print kitten
//Notice: It is a very cute reporter.
void Print_console(){
 8001544:	b580      	push	{r7, lr}
 8001546:	b0a4      	sub	sp, #144	; 0x90
 8001548:	af00      	add	r7, sp, #0

	char escape_sequence2[16];
	sprintf(escape_sequence2, "\033[%d;%dH", 0, 0);
 800154a:	f107 0064 	add.w	r0, r7, #100	; 0x64
 800154e:	2300      	movs	r3, #0
 8001550:	2200      	movs	r2, #0
 8001552:	49a3      	ldr	r1, [pc, #652]	; (80017e0 <Print_console+0x29c>)
 8001554:	f004 f87e 	bl	8005654 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)escape_sequence2, strlen(escape_sequence2), HAL_MAX_DELAY);
 8001558:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800155c:	4618      	mov	r0, r3
 800155e:	f7fe fe3f 	bl	80001e0 <strlen>
 8001562:	4603      	mov	r3, r0
 8001564:	b29a      	uxth	r2, r3
 8001566:	f107 0164 	add.w	r1, r7, #100	; 0x64
 800156a:	f04f 33ff 	mov.w	r3, #4294967295
 800156e:	489d      	ldr	r0, [pc, #628]	; (80017e4 <Print_console+0x2a0>)
 8001570:	f003 f813 	bl	800459a <HAL_UART_Transmit>


	char pData[100];

	int tInt = tmpHumid.tCelsius, tFloat = (int)( tmpHumid.tCelsius * 10 ) % 10;
 8001574:	4b9c      	ldr	r3, [pc, #624]	; (80017e8 <Print_console+0x2a4>)
 8001576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157a:	4610      	mov	r0, r2
 800157c:	4619      	mov	r1, r3
 800157e:	f7ff fadd 	bl	8000b3c <__aeabi_d2iz>
 8001582:	4603      	mov	r3, r0
 8001584:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001588:	4b97      	ldr	r3, [pc, #604]	; (80017e8 <Print_console+0x2a4>)
 800158a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800158e:	f04f 0200 	mov.w	r2, #0
 8001592:	4b96      	ldr	r3, [pc, #600]	; (80017ec <Print_console+0x2a8>)
 8001594:	f7ff f838 	bl	8000608 <__aeabi_dmul>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	4610      	mov	r0, r2
 800159e:	4619      	mov	r1, r3
 80015a0:	f7ff facc 	bl	8000b3c <__aeabi_d2iz>
 80015a4:	4602      	mov	r2, r0
 80015a6:	4b92      	ldr	r3, [pc, #584]	; (80017f0 <Print_console+0x2ac>)
 80015a8:	fb83 1302 	smull	r1, r3, r3, r2
 80015ac:	1099      	asrs	r1, r3, #2
 80015ae:	17d3      	asrs	r3, r2, #31
 80015b0:	1ac9      	subs	r1, r1, r3
 80015b2:	460b      	mov	r3, r1
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	440b      	add	r3, r1
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	int aInt = tmpHumid.humidity, aFloat = (int)( tmpHumid.humidity * 10 ) % 10;
 80015c0:	4b89      	ldr	r3, [pc, #548]	; (80017e8 <Print_console+0x2a4>)
 80015c2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80015c6:	4610      	mov	r0, r2
 80015c8:	4619      	mov	r1, r3
 80015ca:	f7ff fab7 	bl	8000b3c <__aeabi_d2iz>
 80015ce:	4603      	mov	r3, r0
 80015d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80015d4:	4b84      	ldr	r3, [pc, #528]	; (80017e8 <Print_console+0x2a4>)
 80015d6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80015da:	f04f 0200 	mov.w	r2, #0
 80015de:	4b83      	ldr	r3, [pc, #524]	; (80017ec <Print_console+0x2a8>)
 80015e0:	f7ff f812 	bl	8000608 <__aeabi_dmul>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4610      	mov	r0, r2
 80015ea:	4619      	mov	r1, r3
 80015ec:	f7ff faa6 	bl	8000b3c <__aeabi_d2iz>
 80015f0:	4602      	mov	r2, r0
 80015f2:	4b7f      	ldr	r3, [pc, #508]	; (80017f0 <Print_console+0x2ac>)
 80015f4:	fb83 1302 	smull	r1, r3, r3, r2
 80015f8:	1099      	asrs	r1, r3, #2
 80015fa:	17d3      	asrs	r3, r2, #31
 80015fc:	1ac9      	subs	r1, r1, r3
 80015fe:	460b      	mov	r3, r1
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	440b      	add	r3, r1
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	int l = light;
 800160c:	4b79      	ldr	r3, [pc, #484]	; (80017f4 <Print_console+0x2b0>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	67fb      	str	r3, [r7, #124]	; 0x7c
	int sInt = soilMoist, sFloat = (int)( soilMoist * 10 ) % 10;
 8001612:	4b79      	ldr	r3, [pc, #484]	; (80017f8 <Print_console+0x2b4>)
 8001614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001618:	4610      	mov	r0, r2
 800161a:	4619      	mov	r1, r3
 800161c:	f7ff fa8e 	bl	8000b3c <__aeabi_d2iz>
 8001620:	4603      	mov	r3, r0
 8001622:	67bb      	str	r3, [r7, #120]	; 0x78
 8001624:	4b74      	ldr	r3, [pc, #464]	; (80017f8 <Print_console+0x2b4>)
 8001626:	e9d3 0100 	ldrd	r0, r1, [r3]
 800162a:	f04f 0200 	mov.w	r2, #0
 800162e:	4b6f      	ldr	r3, [pc, #444]	; (80017ec <Print_console+0x2a8>)
 8001630:	f7fe ffea 	bl	8000608 <__aeabi_dmul>
 8001634:	4602      	mov	r2, r0
 8001636:	460b      	mov	r3, r1
 8001638:	4610      	mov	r0, r2
 800163a:	4619      	mov	r1, r3
 800163c:	f7ff fa7e 	bl	8000b3c <__aeabi_d2iz>
 8001640:	4602      	mov	r2, r0
 8001642:	4b6b      	ldr	r3, [pc, #428]	; (80017f0 <Print_console+0x2ac>)
 8001644:	fb83 1302 	smull	r1, r3, r3, r2
 8001648:	1099      	asrs	r1, r3, #2
 800164a:	17d3      	asrs	r3, r2, #31
 800164c:	1ac9      	subs	r1, r1, r3
 800164e:	460b      	mov	r3, r1
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	440b      	add	r3, r1
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	677b      	str	r3, [r7, #116]	; 0x74

	HAL_UART_Transmit(&huart2, (uint8_t*)pData, sprintf(pData, " __________________________\r\n" )  , 10 );
 800165a:	463b      	mov	r3, r7
 800165c:	4967      	ldr	r1, [pc, #412]	; (80017fc <Print_console+0x2b8>)
 800165e:	4618      	mov	r0, r3
 8001660:	f003 fff8 	bl	8005654 <siprintf>
 8001664:	4603      	mov	r3, r0
 8001666:	b29a      	uxth	r2, r3
 8001668:	4639      	mov	r1, r7
 800166a:	230a      	movs	r3, #10
 800166c:	485d      	ldr	r0, [pc, #372]	; (80017e4 <Print_console+0x2a0>)
 800166e:	f002 ff94 	bl	800459a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)pData, sprintf(pData, "|                          |\r\n" )  , 10 );
 8001672:	463b      	mov	r3, r7
 8001674:	4962      	ldr	r1, [pc, #392]	; (8001800 <Print_console+0x2bc>)
 8001676:	4618      	mov	r0, r3
 8001678:	f003 ffec 	bl	8005654 <siprintf>
 800167c:	4603      	mov	r3, r0
 800167e:	b29a      	uxth	r2, r3
 8001680:	4639      	mov	r1, r7
 8001682:	230a      	movs	r3, #10
 8001684:	4857      	ldr	r0, [pc, #348]	; (80017e4 <Print_console+0x2a0>)
 8001686:	f002 ff88 	bl	800459a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)pData, sprintf(pData, "|  let's plant <3          |\r\n" )  , 10 );
 800168a:	463b      	mov	r3, r7
 800168c:	495d      	ldr	r1, [pc, #372]	; (8001804 <Print_console+0x2c0>)
 800168e:	4618      	mov	r0, r3
 8001690:	f003 ffe0 	bl	8005654 <siprintf>
 8001694:	4603      	mov	r3, r0
 8001696:	b29a      	uxth	r2, r3
 8001698:	4639      	mov	r1, r7
 800169a:	230a      	movs	r3, #10
 800169c:	4851      	ldr	r0, [pc, #324]	; (80017e4 <Print_console+0x2a0>)
 800169e:	f002 ff7c 	bl	800459a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)pData, sprintf(pData, "|  Light Intensity:   %4d |\r\n", light )  , 10 );
 80016a2:	4b54      	ldr	r3, [pc, #336]	; (80017f4 <Print_console+0x2b0>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	463b      	mov	r3, r7
 80016a8:	4957      	ldr	r1, [pc, #348]	; (8001808 <Print_console+0x2c4>)
 80016aa:	4618      	mov	r0, r3
 80016ac:	f003 ffd2 	bl	8005654 <siprintf>
 80016b0:	4603      	mov	r3, r0
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	4639      	mov	r1, r7
 80016b6:	230a      	movs	r3, #10
 80016b8:	484a      	ldr	r0, [pc, #296]	; (80017e4 <Print_console+0x2a0>)
 80016ba:	f002 ff6e 	bl	800459a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)pData, sprintf(pData, "|  Soil Moisture:    %3d.%d |\r\n", sInt, sFloat )  , 10 );
 80016be:	4638      	mov	r0, r7
 80016c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80016c2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80016c4:	4951      	ldr	r1, [pc, #324]	; (800180c <Print_console+0x2c8>)
 80016c6:	f003 ffc5 	bl	8005654 <siprintf>
 80016ca:	4603      	mov	r3, r0
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	4639      	mov	r1, r7
 80016d0:	230a      	movs	r3, #10
 80016d2:	4844      	ldr	r0, [pc, #272]	; (80017e4 <Print_console+0x2a0>)
 80016d4:	f002 ff61 	bl	800459a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)pData, sprintf(pData, "|  Temperature:    %3d.%d C |\r\n", tInt, tFloat )  , 10 );
 80016d8:	4638      	mov	r0, r7
 80016da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80016de:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80016e2:	494b      	ldr	r1, [pc, #300]	; (8001810 <Print_console+0x2cc>)
 80016e4:	f003 ffb6 	bl	8005654 <siprintf>
 80016e8:	4603      	mov	r3, r0
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	4639      	mov	r1, r7
 80016ee:	230a      	movs	r3, #10
 80016f0:	483c      	ldr	r0, [pc, #240]	; (80017e4 <Print_console+0x2a0>)
 80016f2:	f002 ff52 	bl	800459a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)pData, sprintf(pData, "|  Humidity:         %3d.%d |\r\n", aInt, aFloat )  , 10 );
 80016f6:	4638      	mov	r0, r7
 80016f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80016fc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001700:	4944      	ldr	r1, [pc, #272]	; (8001814 <Print_console+0x2d0>)
 8001702:	f003 ffa7 	bl	8005654 <siprintf>
 8001706:	4603      	mov	r3, r0
 8001708:	b29a      	uxth	r2, r3
 800170a:	4639      	mov	r1, r7
 800170c:	230a      	movs	r3, #10
 800170e:	4835      	ldr	r0, [pc, #212]	; (80017e4 <Print_console+0x2a0>)
 8001710:	f002 ff43 	bl	800459a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)pData, sprintf(pData, "|_______   ________________|\r\n" )  , 10 );
 8001714:	463b      	mov	r3, r7
 8001716:	4940      	ldr	r1, [pc, #256]	; (8001818 <Print_console+0x2d4>)
 8001718:	4618      	mov	r0, r3
 800171a:	f003 ff9b 	bl	8005654 <siprintf>
 800171e:	4603      	mov	r3, r0
 8001720:	b29a      	uxth	r2, r3
 8001722:	4639      	mov	r1, r7
 8001724:	230a      	movs	r3, #10
 8001726:	482f      	ldr	r0, [pc, #188]	; (80017e4 <Print_console+0x2a0>)
 8001728:	f002 ff37 	bl	800459a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)pData, sprintf(pData, "         V\r\n" )  , 10 );
 800172c:	463b      	mov	r3, r7
 800172e:	493b      	ldr	r1, [pc, #236]	; (800181c <Print_console+0x2d8>)
 8001730:	4618      	mov	r0, r3
 8001732:	f003 ff8f 	bl	8005654 <siprintf>
 8001736:	4603      	mov	r3, r0
 8001738:	b29a      	uxth	r2, r3
 800173a:	4639      	mov	r1, r7
 800173c:	230a      	movs	r3, #10
 800173e:	4829      	ldr	r0, [pc, #164]	; (80017e4 <Print_console+0x2a0>)
 8001740:	f002 ff2b 	bl	800459a <HAL_UART_Transmit>


	if( animation == 0 ){
 8001744:	4b36      	ldr	r3, [pc, #216]	; (8001820 <Print_console+0x2dc>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d177      	bne.n	800183c <Print_console+0x2f8>
		HAL_UART_Transmit(&huart2, (uint8_t*)pData, sprintf(pData, "      /\\_/\\   \r\n" )  , 10 );
 800174c:	463b      	mov	r3, r7
 800174e:	4935      	ldr	r1, [pc, #212]	; (8001824 <Print_console+0x2e0>)
 8001750:	4618      	mov	r0, r3
 8001752:	f003 ff7f 	bl	8005654 <siprintf>
 8001756:	4603      	mov	r3, r0
 8001758:	b29a      	uxth	r2, r3
 800175a:	4639      	mov	r1, r7
 800175c:	230a      	movs	r3, #10
 800175e:	4821      	ldr	r0, [pc, #132]	; (80017e4 <Print_console+0x2a0>)
 8001760:	f002 ff1b 	bl	800459a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)pData, sprintf(pData, "     ( o.o )  \r\n" )  , 10 );
 8001764:	463b      	mov	r3, r7
 8001766:	4930      	ldr	r1, [pc, #192]	; (8001828 <Print_console+0x2e4>)
 8001768:	4618      	mov	r0, r3
 800176a:	f003 ff73 	bl	8005654 <siprintf>
 800176e:	4603      	mov	r3, r0
 8001770:	b29a      	uxth	r2, r3
 8001772:	4639      	mov	r1, r7
 8001774:	230a      	movs	r3, #10
 8001776:	481b      	ldr	r0, [pc, #108]	; (80017e4 <Print_console+0x2a0>)
 8001778:	f002 ff0f 	bl	800459a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)pData, sprintf(pData, "      > ^ <   \r\n" )  , 10 );
 800177c:	463b      	mov	r3, r7
 800177e:	492b      	ldr	r1, [pc, #172]	; (800182c <Print_console+0x2e8>)
 8001780:	4618      	mov	r0, r3
 8001782:	f003 ff67 	bl	8005654 <siprintf>
 8001786:	4603      	mov	r3, r0
 8001788:	b29a      	uxth	r2, r3
 800178a:	4639      	mov	r1, r7
 800178c:	230a      	movs	r3, #10
 800178e:	4815      	ldr	r0, [pc, #84]	; (80017e4 <Print_console+0x2a0>)
 8001790:	f002 ff03 	bl	800459a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)pData, sprintf(pData, "    /  \\_/  \\ \r\n" )  , 10 );
 8001794:	463b      	mov	r3, r7
 8001796:	4926      	ldr	r1, [pc, #152]	; (8001830 <Print_console+0x2ec>)
 8001798:	4618      	mov	r0, r3
 800179a:	f003 ff5b 	bl	8005654 <siprintf>
 800179e:	4603      	mov	r3, r0
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	4639      	mov	r1, r7
 80017a4:	230a      	movs	r3, #10
 80017a6:	480f      	ldr	r0, [pc, #60]	; (80017e4 <Print_console+0x2a0>)
 80017a8:	f002 fef7 	bl	800459a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)pData, sprintf(pData, "   /  ^   ^  \\ \r\n" )  , 10 );
 80017ac:	463b      	mov	r3, r7
 80017ae:	4921      	ldr	r1, [pc, #132]	; (8001834 <Print_console+0x2f0>)
 80017b0:	4618      	mov	r0, r3
 80017b2:	f003 ff4f 	bl	8005654 <siprintf>
 80017b6:	4603      	mov	r3, r0
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	4639      	mov	r1, r7
 80017bc:	230a      	movs	r3, #10
 80017be:	4809      	ldr	r0, [pc, #36]	; (80017e4 <Print_console+0x2a0>)
 80017c0:	f002 feeb 	bl	800459a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)pData, sprintf(pData, "  /__^__|__^__\\ \r\n" )  , 10 );
 80017c4:	463b      	mov	r3, r7
 80017c6:	491c      	ldr	r1, [pc, #112]	; (8001838 <Print_console+0x2f4>)
 80017c8:	4618      	mov	r0, r3
 80017ca:	f003 ff43 	bl	8005654 <siprintf>
 80017ce:	4603      	mov	r3, r0
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	4639      	mov	r1, r7
 80017d4:	230a      	movs	r3, #10
 80017d6:	4803      	ldr	r0, [pc, #12]	; (80017e4 <Print_console+0x2a0>)
 80017d8:	f002 fedf 	bl	800459a <HAL_UART_Transmit>
 80017dc:	e076      	b.n	80018cc <Print_console+0x388>
 80017de:	bf00      	nop
 80017e0:	08005fac 	.word	0x08005fac
 80017e4:	20000168 	.word	0x20000168
 80017e8:	200001b8 	.word	0x200001b8
 80017ec:	40240000 	.word	0x40240000
 80017f0:	66666667 	.word	0x66666667
 80017f4:	200001ac 	.word	0x200001ac
 80017f8:	200001b0 	.word	0x200001b0
 80017fc:	08005fb8 	.word	0x08005fb8
 8001800:	08005fd8 	.word	0x08005fd8
 8001804:	08005ff8 	.word	0x08005ff8
 8001808:	08006018 	.word	0x08006018
 800180c:	08006038 	.word	0x08006038
 8001810:	08006058 	.word	0x08006058
 8001814:	08006078 	.word	0x08006078
 8001818:	08006098 	.word	0x08006098
 800181c:	080060b8 	.word	0x080060b8
 8001820:	200005b4 	.word	0x200005b4
 8001824:	080060c8 	.word	0x080060c8
 8001828:	080060dc 	.word	0x080060dc
 800182c:	080060f0 	.word	0x080060f0
 8001830:	08006104 	.word	0x08006104
 8001834:	08006118 	.word	0x08006118
 8001838:	0800612c 	.word	0x0800612c
	}else{
		HAL_UART_Transmit(&huart2, (uint8_t*)pData, sprintf(pData, "      /\\_/\\   \r\n" )  , 10 );
 800183c:	463b      	mov	r3, r7
 800183e:	492a      	ldr	r1, [pc, #168]	; (80018e8 <Print_console+0x3a4>)
 8001840:	4618      	mov	r0, r3
 8001842:	f003 ff07 	bl	8005654 <siprintf>
 8001846:	4603      	mov	r3, r0
 8001848:	b29a      	uxth	r2, r3
 800184a:	4639      	mov	r1, r7
 800184c:	230a      	movs	r3, #10
 800184e:	4827      	ldr	r0, [pc, #156]	; (80018ec <Print_console+0x3a8>)
 8001850:	f002 fea3 	bl	800459a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)pData, sprintf(pData, "     ( -.- )  \r\n" )  , 10 );
 8001854:	463b      	mov	r3, r7
 8001856:	4926      	ldr	r1, [pc, #152]	; (80018f0 <Print_console+0x3ac>)
 8001858:	4618      	mov	r0, r3
 800185a:	f003 fefb 	bl	8005654 <siprintf>
 800185e:	4603      	mov	r3, r0
 8001860:	b29a      	uxth	r2, r3
 8001862:	4639      	mov	r1, r7
 8001864:	230a      	movs	r3, #10
 8001866:	4821      	ldr	r0, [pc, #132]	; (80018ec <Print_console+0x3a8>)
 8001868:	f002 fe97 	bl	800459a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)pData, sprintf(pData, "      > ^ <   \r\n" )  , 10 );
 800186c:	463b      	mov	r3, r7
 800186e:	4921      	ldr	r1, [pc, #132]	; (80018f4 <Print_console+0x3b0>)
 8001870:	4618      	mov	r0, r3
 8001872:	f003 feef 	bl	8005654 <siprintf>
 8001876:	4603      	mov	r3, r0
 8001878:	b29a      	uxth	r2, r3
 800187a:	4639      	mov	r1, r7
 800187c:	230a      	movs	r3, #10
 800187e:	481b      	ldr	r0, [pc, #108]	; (80018ec <Print_console+0x3a8>)
 8001880:	f002 fe8b 	bl	800459a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)pData, sprintf(pData, "    /  \\_/  \\ \r\n" )  , 10 );
 8001884:	463b      	mov	r3, r7
 8001886:	491c      	ldr	r1, [pc, #112]	; (80018f8 <Print_console+0x3b4>)
 8001888:	4618      	mov	r0, r3
 800188a:	f003 fee3 	bl	8005654 <siprintf>
 800188e:	4603      	mov	r3, r0
 8001890:	b29a      	uxth	r2, r3
 8001892:	4639      	mov	r1, r7
 8001894:	230a      	movs	r3, #10
 8001896:	4815      	ldr	r0, [pc, #84]	; (80018ec <Print_console+0x3a8>)
 8001898:	f002 fe7f 	bl	800459a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)pData, sprintf(pData, "   /  ^   ^  \\ \r\n" )  , 10 );
 800189c:	463b      	mov	r3, r7
 800189e:	4917      	ldr	r1, [pc, #92]	; (80018fc <Print_console+0x3b8>)
 80018a0:	4618      	mov	r0, r3
 80018a2:	f003 fed7 	bl	8005654 <siprintf>
 80018a6:	4603      	mov	r3, r0
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	4639      	mov	r1, r7
 80018ac:	230a      	movs	r3, #10
 80018ae:	480f      	ldr	r0, [pc, #60]	; (80018ec <Print_console+0x3a8>)
 80018b0:	f002 fe73 	bl	800459a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)pData, sprintf(pData, "  /__^__|__^__\\ \r\n" )  , 10 );
 80018b4:	463b      	mov	r3, r7
 80018b6:	4912      	ldr	r1, [pc, #72]	; (8001900 <Print_console+0x3bc>)
 80018b8:	4618      	mov	r0, r3
 80018ba:	f003 fecb 	bl	8005654 <siprintf>
 80018be:	4603      	mov	r3, r0
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	4639      	mov	r1, r7
 80018c4:	230a      	movs	r3, #10
 80018c6:	4809      	ldr	r0, [pc, #36]	; (80018ec <Print_console+0x3a8>)
 80018c8:	f002 fe67 	bl	800459a <HAL_UART_Transmit>
	}

	animation = ( animation + 1 ) % 2;
 80018cc:	4b0d      	ldr	r3, [pc, #52]	; (8001904 <Print_console+0x3c0>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	3301      	adds	r3, #1
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	bfb8      	it	lt
 80018da:	425b      	neglt	r3, r3
 80018dc:	4a09      	ldr	r2, [pc, #36]	; (8001904 <Print_console+0x3c0>)
 80018de:	6013      	str	r3, [r2, #0]

}
 80018e0:	bf00      	nop
 80018e2:	3790      	adds	r7, #144	; 0x90
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	080060c8 	.word	0x080060c8
 80018ec:	20000168 	.word	0x20000168
 80018f0:	08006140 	.word	0x08006140
 80018f4:	080060f0 	.word	0x080060f0
 80018f8:	08006104 	.word	0x08006104
 80018fc:	08006118 	.word	0x08006118
 8001900:	0800612c 	.word	0x0800612c
 8001904:	200005b4 	.word	0x200005b4

08001908 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800190c:	f000 fc38 	bl	8002180 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001910:	f000 f820 	bl	8001954 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001914:	f000 f9a4 	bl	8001c60 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001918:	f000 f978 	bl	8001c0c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800191c:	f000 f884 	bl	8001a28 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001920:	f000 f8d4 	bl	8001acc <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001924:	f000 f948 	bl	8001bb8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart1, (uint8_t*) rx_data, 1);
 8001928:	2201      	movs	r2, #1
 800192a:	4908      	ldr	r1, [pc, #32]	; (800194c <main+0x44>)
 800192c:	4808      	ldr	r0, [pc, #32]	; (8001950 <main+0x48>)
 800192e:	f002 fec6 	bl	80046be <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 Light_intensity_readData();
 8001932:	f7ff fcd1 	bl	80012d8 <Light_intensity_readData>

	 Soil_moisture_readData();
 8001936:	f7ff fd1d 	bl	8001374 <Soil_moisture_readData>

	 Temp_Humid_readData();
 800193a:	f7ff fd35 	bl	80013a8 <Temp_Humid_readData>

	 Print_console( );
 800193e:	f7ff fe01 	bl	8001544 <Print_console>

	 HAL_Delay(1000);
 8001942:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001946:	f000 fc8d 	bl	8002264 <HAL_Delay>
	 Light_intensity_readData();
 800194a:	e7f2      	b.n	8001932 <main+0x2a>
 800194c:	200005b0 	.word	0x200005b0
 8001950:	20000124 	.word	0x20000124

08001954 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b094      	sub	sp, #80	; 0x50
 8001958:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800195a:	f107 0320 	add.w	r3, r7, #32
 800195e:	2230      	movs	r2, #48	; 0x30
 8001960:	2100      	movs	r1, #0
 8001962:	4618      	mov	r0, r3
 8001964:	f003 fe6e 	bl	8005644 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001968:	f107 030c 	add.w	r3, r7, #12
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]
 8001976:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001978:	2300      	movs	r3, #0
 800197a:	60bb      	str	r3, [r7, #8]
 800197c:	4b28      	ldr	r3, [pc, #160]	; (8001a20 <SystemClock_Config+0xcc>)
 800197e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001980:	4a27      	ldr	r2, [pc, #156]	; (8001a20 <SystemClock_Config+0xcc>)
 8001982:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001986:	6413      	str	r3, [r2, #64]	; 0x40
 8001988:	4b25      	ldr	r3, [pc, #148]	; (8001a20 <SystemClock_Config+0xcc>)
 800198a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001990:	60bb      	str	r3, [r7, #8]
 8001992:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001994:	2300      	movs	r3, #0
 8001996:	607b      	str	r3, [r7, #4]
 8001998:	4b22      	ldr	r3, [pc, #136]	; (8001a24 <SystemClock_Config+0xd0>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a21      	ldr	r2, [pc, #132]	; (8001a24 <SystemClock_Config+0xd0>)
 800199e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019a2:	6013      	str	r3, [r2, #0]
 80019a4:	4b1f      	ldr	r3, [pc, #124]	; (8001a24 <SystemClock_Config+0xd0>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019ac:	607b      	str	r3, [r7, #4]
 80019ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019b0:	2302      	movs	r3, #2
 80019b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019b4:	2301      	movs	r3, #1
 80019b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019b8:	2310      	movs	r3, #16
 80019ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019bc:	2302      	movs	r3, #2
 80019be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019c0:	2300      	movs	r3, #0
 80019c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80019c4:	2310      	movs	r3, #16
 80019c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80019c8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80019cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80019ce:	2304      	movs	r3, #4
 80019d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80019d2:	2304      	movs	r3, #4
 80019d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019d6:	f107 0320 	add.w	r3, r7, #32
 80019da:	4618      	mov	r0, r3
 80019dc:	f001 fbb2 	bl	8003144 <HAL_RCC_OscConfig>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <SystemClock_Config+0x96>
  {
    Error_Handler();
 80019e6:	f000 f9d3 	bl	8001d90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019ea:	230f      	movs	r3, #15
 80019ec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019ee:	2302      	movs	r3, #2
 80019f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019f2:	2300      	movs	r3, #0
 80019f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019fc:	2300      	movs	r3, #0
 80019fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a00:	f107 030c 	add.w	r3, r7, #12
 8001a04:	2102      	movs	r1, #2
 8001a06:	4618      	mov	r0, r3
 8001a08:	f001 fe14 	bl	8003634 <HAL_RCC_ClockConfig>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001a12:	f000 f9bd 	bl	8001d90 <Error_Handler>
  }
}
 8001a16:	bf00      	nop
 8001a18:	3750      	adds	r7, #80	; 0x50
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40023800 	.word	0x40023800
 8001a24:	40007000 	.word	0x40007000

08001a28 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a2e:	463b      	mov	r3, r7
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a3a:	4b21      	ldr	r3, [pc, #132]	; (8001ac0 <MX_ADC1_Init+0x98>)
 8001a3c:	4a21      	ldr	r2, [pc, #132]	; (8001ac4 <MX_ADC1_Init+0x9c>)
 8001a3e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001a40:	4b1f      	ldr	r3, [pc, #124]	; (8001ac0 <MX_ADC1_Init+0x98>)
 8001a42:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a46:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a48:	4b1d      	ldr	r3, [pc, #116]	; (8001ac0 <MX_ADC1_Init+0x98>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001a4e:	4b1c      	ldr	r3, [pc, #112]	; (8001ac0 <MX_ADC1_Init+0x98>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a54:	4b1a      	ldr	r3, [pc, #104]	; (8001ac0 <MX_ADC1_Init+0x98>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a5a:	4b19      	ldr	r3, [pc, #100]	; (8001ac0 <MX_ADC1_Init+0x98>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a62:	4b17      	ldr	r3, [pc, #92]	; (8001ac0 <MX_ADC1_Init+0x98>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a68:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <MX_ADC1_Init+0x98>)
 8001a6a:	4a17      	ldr	r2, [pc, #92]	; (8001ac8 <MX_ADC1_Init+0xa0>)
 8001a6c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a6e:	4b14      	ldr	r3, [pc, #80]	; (8001ac0 <MX_ADC1_Init+0x98>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001a74:	4b12      	ldr	r3, [pc, #72]	; (8001ac0 <MX_ADC1_Init+0x98>)
 8001a76:	2201      	movs	r2, #1
 8001a78:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a7a:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <MX_ADC1_Init+0x98>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a82:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <MX_ADC1_Init+0x98>)
 8001a84:	2201      	movs	r2, #1
 8001a86:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a88:	480d      	ldr	r0, [pc, #52]	; (8001ac0 <MX_ADC1_Init+0x98>)
 8001a8a:	f000 fc0f 	bl	80022ac <HAL_ADC_Init>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001a94:	f000 f97c 	bl	8001d90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001aa4:	463b      	mov	r3, r7
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4805      	ldr	r0, [pc, #20]	; (8001ac0 <MX_ADC1_Init+0x98>)
 8001aaa:	f000 fdc3 	bl	8002634 <HAL_ADC_ConfigChannel>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001ab4:	f000 f96c 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ab8:	bf00      	nop
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20000094 	.word	0x20000094
 8001ac4:	40012000 	.word	0x40012000
 8001ac8:	0f000001 	.word	0x0f000001

08001acc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08e      	sub	sp, #56	; 0x38
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ad2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	605a      	str	r2, [r3, #4]
 8001adc:	609a      	str	r2, [r3, #8]
 8001ade:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ae0:	f107 0320 	add.w	r3, r7, #32
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aea:	1d3b      	adds	r3, r7, #4
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	611a      	str	r2, [r3, #16]
 8001af8:	615a      	str	r2, [r3, #20]
 8001afa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001afc:	4b2c      	ldr	r3, [pc, #176]	; (8001bb0 <MX_TIM3_Init+0xe4>)
 8001afe:	4a2d      	ldr	r2, [pc, #180]	; (8001bb4 <MX_TIM3_Init+0xe8>)
 8001b00:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001b02:	4b2b      	ldr	r3, [pc, #172]	; (8001bb0 <MX_TIM3_Init+0xe4>)
 8001b04:	2253      	movs	r2, #83	; 0x53
 8001b06:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b08:	4b29      	ldr	r3, [pc, #164]	; (8001bb0 <MX_TIM3_Init+0xe4>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 8001b0e:	4b28      	ldr	r3, [pc, #160]	; (8001bb0 <MX_TIM3_Init+0xe4>)
 8001b10:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001b14:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b16:	4b26      	ldr	r3, [pc, #152]	; (8001bb0 <MX_TIM3_Init+0xe4>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b1c:	4b24      	ldr	r3, [pc, #144]	; (8001bb0 <MX_TIM3_Init+0xe4>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b22:	4823      	ldr	r0, [pc, #140]	; (8001bb0 <MX_TIM3_Init+0xe4>)
 8001b24:	f001 ffa6 	bl	8003a74 <HAL_TIM_Base_Init>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001b2e:	f000 f92f 	bl	8001d90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b36:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	481c      	ldr	r0, [pc, #112]	; (8001bb0 <MX_TIM3_Init+0xe4>)
 8001b40:	f002 f902 	bl	8003d48 <HAL_TIM_ConfigClockSource>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001b4a:	f000 f921 	bl	8001d90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b4e:	4818      	ldr	r0, [pc, #96]	; (8001bb0 <MX_TIM3_Init+0xe4>)
 8001b50:	f001 ffdf 	bl	8003b12 <HAL_TIM_PWM_Init>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001b5a:	f000 f919 	bl	8001d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b62:	2300      	movs	r3, #0
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b66:	f107 0320 	add.w	r3, r7, #32
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4810      	ldr	r0, [pc, #64]	; (8001bb0 <MX_TIM3_Init+0xe4>)
 8001b6e:	f002 fc59 	bl	8004424 <HAL_TIMEx_MasterConfigSynchronization>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001b78:	f000 f90a 	bl	8001d90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b7c:	2360      	movs	r3, #96	; 0x60
 8001b7e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b84:	2300      	movs	r3, #0
 8001b86:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b8c:	1d3b      	adds	r3, r7, #4
 8001b8e:	2208      	movs	r2, #8
 8001b90:	4619      	mov	r1, r3
 8001b92:	4807      	ldr	r0, [pc, #28]	; (8001bb0 <MX_TIM3_Init+0xe4>)
 8001b94:	f002 f816 	bl	8003bc4 <HAL_TIM_PWM_ConfigChannel>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001b9e:	f000 f8f7 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001ba2:	4803      	ldr	r0, [pc, #12]	; (8001bb0 <MX_TIM3_Init+0xe4>)
 8001ba4:	f000 f988 	bl	8001eb8 <HAL_TIM_MspPostInit>

}
 8001ba8:	bf00      	nop
 8001baa:	3738      	adds	r7, #56	; 0x38
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	200000dc 	.word	0x200000dc
 8001bb4:	40000400 	.word	0x40000400

08001bb8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bbc:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <MX_USART1_UART_Init+0x4c>)
 8001bbe:	4a12      	ldr	r2, [pc, #72]	; (8001c08 <MX_USART1_UART_Init+0x50>)
 8001bc0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001bc2:	4b10      	ldr	r3, [pc, #64]	; (8001c04 <MX_USART1_UART_Init+0x4c>)
 8001bc4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001bc8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bca:	4b0e      	ldr	r3, [pc, #56]	; (8001c04 <MX_USART1_UART_Init+0x4c>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <MX_USART1_UART_Init+0x4c>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bd6:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <MX_USART1_UART_Init+0x4c>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bdc:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <MX_USART1_UART_Init+0x4c>)
 8001bde:	220c      	movs	r2, #12
 8001be0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001be2:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <MX_USART1_UART_Init+0x4c>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001be8:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <MX_USART1_UART_Init+0x4c>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bee:	4805      	ldr	r0, [pc, #20]	; (8001c04 <MX_USART1_UART_Init+0x4c>)
 8001bf0:	f002 fc86 	bl	8004500 <HAL_UART_Init>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001bfa:	f000 f8c9 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000124 	.word	0x20000124
 8001c08:	40011000 	.word	0x40011000

08001c0c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c10:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <MX_USART2_UART_Init+0x4c>)
 8001c12:	4a12      	ldr	r2, [pc, #72]	; (8001c5c <MX_USART2_UART_Init+0x50>)
 8001c14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c16:	4b10      	ldr	r3, [pc, #64]	; (8001c58 <MX_USART2_UART_Init+0x4c>)
 8001c18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c1e:	4b0e      	ldr	r3, [pc, #56]	; (8001c58 <MX_USART2_UART_Init+0x4c>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c24:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <MX_USART2_UART_Init+0x4c>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c2a:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <MX_USART2_UART_Init+0x4c>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c30:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <MX_USART2_UART_Init+0x4c>)
 8001c32:	220c      	movs	r2, #12
 8001c34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c36:	4b08      	ldr	r3, [pc, #32]	; (8001c58 <MX_USART2_UART_Init+0x4c>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c3c:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <MX_USART2_UART_Init+0x4c>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c42:	4805      	ldr	r0, [pc, #20]	; (8001c58 <MX_USART2_UART_Init+0x4c>)
 8001c44:	f002 fc5c 	bl	8004500 <HAL_UART_Init>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c4e:	f000 f89f 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000168 	.word	0x20000168
 8001c5c:	40004400 	.word	0x40004400

08001c60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08a      	sub	sp, #40	; 0x28
 8001c64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c66:	f107 0314 	add.w	r3, r7, #20
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	605a      	str	r2, [r3, #4]
 8001c70:	609a      	str	r2, [r3, #8]
 8001c72:	60da      	str	r2, [r3, #12]
 8001c74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	613b      	str	r3, [r7, #16]
 8001c7a:	4b41      	ldr	r3, [pc, #260]	; (8001d80 <MX_GPIO_Init+0x120>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	4a40      	ldr	r2, [pc, #256]	; (8001d80 <MX_GPIO_Init+0x120>)
 8001c80:	f043 0304 	orr.w	r3, r3, #4
 8001c84:	6313      	str	r3, [r2, #48]	; 0x30
 8001c86:	4b3e      	ldr	r3, [pc, #248]	; (8001d80 <MX_GPIO_Init+0x120>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	f003 0304 	and.w	r3, r3, #4
 8001c8e:	613b      	str	r3, [r7, #16]
 8001c90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	4b3a      	ldr	r3, [pc, #232]	; (8001d80 <MX_GPIO_Init+0x120>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	4a39      	ldr	r2, [pc, #228]	; (8001d80 <MX_GPIO_Init+0x120>)
 8001c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca2:	4b37      	ldr	r3, [pc, #220]	; (8001d80 <MX_GPIO_Init+0x120>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60bb      	str	r3, [r7, #8]
 8001cb2:	4b33      	ldr	r3, [pc, #204]	; (8001d80 <MX_GPIO_Init+0x120>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	4a32      	ldr	r2, [pc, #200]	; (8001d80 <MX_GPIO_Init+0x120>)
 8001cb8:	f043 0301 	orr.w	r3, r3, #1
 8001cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cbe:	4b30      	ldr	r3, [pc, #192]	; (8001d80 <MX_GPIO_Init+0x120>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	60bb      	str	r3, [r7, #8]
 8001cc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	607b      	str	r3, [r7, #4]
 8001cce:	4b2c      	ldr	r3, [pc, #176]	; (8001d80 <MX_GPIO_Init+0x120>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	4a2b      	ldr	r2, [pc, #172]	; (8001d80 <MX_GPIO_Init+0x120>)
 8001cd4:	f043 0302 	orr.w	r3, r3, #2
 8001cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cda:	4b29      	ldr	r3, [pc, #164]	; (8001d80 <MX_GPIO_Init+0x120>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	607b      	str	r3, [r7, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f44f 7190 	mov.w	r1, #288	; 0x120
 8001cec:	4825      	ldr	r0, [pc, #148]	; (8001d84 <MX_GPIO_Init+0x124>)
 8001cee:	f001 fa0f 	bl	8003110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	2180      	movs	r1, #128	; 0x80
 8001cf6:	4824      	ldr	r0, [pc, #144]	; (8001d88 <MX_GPIO_Init+0x128>)
 8001cf8:	f001 fa0a 	bl	8003110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	2140      	movs	r1, #64	; 0x40
 8001d00:	4822      	ldr	r0, [pc, #136]	; (8001d8c <MX_GPIO_Init+0x12c>)
 8001d02:	f001 fa05 	bl	8003110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d0c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001d10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d16:	f107 0314 	add.w	r3, r7, #20
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	481a      	ldr	r0, [pc, #104]	; (8001d88 <MX_GPIO_Init+0x128>)
 8001d1e:	f001 f85b 	bl	8002dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 8001d22:	f44f 7390 	mov.w	r3, #288	; 0x120
 8001d26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d30:	2300      	movs	r3, #0
 8001d32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d34:	f107 0314 	add.w	r3, r7, #20
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4812      	ldr	r0, [pc, #72]	; (8001d84 <MX_GPIO_Init+0x124>)
 8001d3c:	f001 f84c 	bl	8002dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d40:	2380      	movs	r3, #128	; 0x80
 8001d42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d44:	2301      	movs	r3, #1
 8001d46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d50:	f107 0314 	add.w	r3, r7, #20
 8001d54:	4619      	mov	r1, r3
 8001d56:	480c      	ldr	r0, [pc, #48]	; (8001d88 <MX_GPIO_Init+0x128>)
 8001d58:	f001 f83e 	bl	8002dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d5c:	2340      	movs	r3, #64	; 0x40
 8001d5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d60:	2301      	movs	r3, #1
 8001d62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d64:	2300      	movs	r3, #0
 8001d66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d6c:	f107 0314 	add.w	r3, r7, #20
 8001d70:	4619      	mov	r1, r3
 8001d72:	4806      	ldr	r0, [pc, #24]	; (8001d8c <MX_GPIO_Init+0x12c>)
 8001d74:	f001 f830 	bl	8002dd8 <HAL_GPIO_Init>

}
 8001d78:	bf00      	nop
 8001d7a:	3728      	adds	r7, #40	; 0x28
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40020000 	.word	0x40020000
 8001d88:	40020800 	.word	0x40020800
 8001d8c:	40020400 	.word	0x40020400

08001d90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d94:	b672      	cpsid	i
}
 8001d96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d98:	e7fe      	b.n	8001d98 <Error_Handler+0x8>
	...

08001d9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	607b      	str	r3, [r7, #4]
 8001da6:	4b10      	ldr	r3, [pc, #64]	; (8001de8 <HAL_MspInit+0x4c>)
 8001da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001daa:	4a0f      	ldr	r2, [pc, #60]	; (8001de8 <HAL_MspInit+0x4c>)
 8001dac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001db0:	6453      	str	r3, [r2, #68]	; 0x44
 8001db2:	4b0d      	ldr	r3, [pc, #52]	; (8001de8 <HAL_MspInit+0x4c>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dba:	607b      	str	r3, [r7, #4]
 8001dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	603b      	str	r3, [r7, #0]
 8001dc2:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <HAL_MspInit+0x4c>)
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	4a08      	ldr	r2, [pc, #32]	; (8001de8 <HAL_MspInit+0x4c>)
 8001dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dce:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <HAL_MspInit+0x4c>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd6:	603b      	str	r3, [r7, #0]
 8001dd8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001dda:	2007      	movs	r0, #7
 8001ddc:	f000 ff28 	bl	8002c30 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001de0:	bf00      	nop
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40023800 	.word	0x40023800

08001dec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b08a      	sub	sp, #40	; 0x28
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df4:	f107 0314 	add.w	r3, r7, #20
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	605a      	str	r2, [r3, #4]
 8001dfe:	609a      	str	r2, [r3, #8]
 8001e00:	60da      	str	r2, [r3, #12]
 8001e02:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a17      	ldr	r2, [pc, #92]	; (8001e68 <HAL_ADC_MspInit+0x7c>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d127      	bne.n	8001e5e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	613b      	str	r3, [r7, #16]
 8001e12:	4b16      	ldr	r3, [pc, #88]	; (8001e6c <HAL_ADC_MspInit+0x80>)
 8001e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e16:	4a15      	ldr	r2, [pc, #84]	; (8001e6c <HAL_ADC_MspInit+0x80>)
 8001e18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e1e:	4b13      	ldr	r3, [pc, #76]	; (8001e6c <HAL_ADC_MspInit+0x80>)
 8001e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e26:	613b      	str	r3, [r7, #16]
 8001e28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60fb      	str	r3, [r7, #12]
 8001e2e:	4b0f      	ldr	r3, [pc, #60]	; (8001e6c <HAL_ADC_MspInit+0x80>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	4a0e      	ldr	r2, [pc, #56]	; (8001e6c <HAL_ADC_MspInit+0x80>)
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3a:	4b0c      	ldr	r3, [pc, #48]	; (8001e6c <HAL_ADC_MspInit+0x80>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e46:	2303      	movs	r3, #3
 8001e48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e52:	f107 0314 	add.w	r3, r7, #20
 8001e56:	4619      	mov	r1, r3
 8001e58:	4805      	ldr	r0, [pc, #20]	; (8001e70 <HAL_ADC_MspInit+0x84>)
 8001e5a:	f000 ffbd 	bl	8002dd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e5e:	bf00      	nop
 8001e60:	3728      	adds	r7, #40	; 0x28
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40012000 	.word	0x40012000
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	40020000 	.word	0x40020000

08001e74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a0b      	ldr	r2, [pc, #44]	; (8001eb0 <HAL_TIM_Base_MspInit+0x3c>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d10d      	bne.n	8001ea2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	4b0a      	ldr	r3, [pc, #40]	; (8001eb4 <HAL_TIM_Base_MspInit+0x40>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	4a09      	ldr	r2, [pc, #36]	; (8001eb4 <HAL_TIM_Base_MspInit+0x40>)
 8001e90:	f043 0302 	orr.w	r3, r3, #2
 8001e94:	6413      	str	r3, [r2, #64]	; 0x40
 8001e96:	4b07      	ldr	r3, [pc, #28]	; (8001eb4 <HAL_TIM_Base_MspInit+0x40>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ea2:	bf00      	nop
 8001ea4:	3714      	adds	r7, #20
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	40000400 	.word	0x40000400
 8001eb4:	40023800 	.word	0x40023800

08001eb8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b088      	sub	sp, #32
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec0:	f107 030c 	add.w	r3, r7, #12
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	609a      	str	r2, [r3, #8]
 8001ecc:	60da      	str	r2, [r3, #12]
 8001ece:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a12      	ldr	r2, [pc, #72]	; (8001f20 <HAL_TIM_MspPostInit+0x68>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d11d      	bne.n	8001f16 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	60bb      	str	r3, [r7, #8]
 8001ede:	4b11      	ldr	r3, [pc, #68]	; (8001f24 <HAL_TIM_MspPostInit+0x6c>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	4a10      	ldr	r2, [pc, #64]	; (8001f24 <HAL_TIM_MspPostInit+0x6c>)
 8001ee4:	f043 0302 	orr.w	r3, r3, #2
 8001ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eea:	4b0e      	ldr	r3, [pc, #56]	; (8001f24 <HAL_TIM_MspPostInit+0x6c>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	60bb      	str	r3, [r7, #8]
 8001ef4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efa:	2302      	movs	r3, #2
 8001efc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efe:	2300      	movs	r3, #0
 8001f00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f02:	2300      	movs	r3, #0
 8001f04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f06:	2302      	movs	r3, #2
 8001f08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f0a:	f107 030c 	add.w	r3, r7, #12
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4805      	ldr	r0, [pc, #20]	; (8001f28 <HAL_TIM_MspPostInit+0x70>)
 8001f12:	f000 ff61 	bl	8002dd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001f16:	bf00      	nop
 8001f18:	3720      	adds	r7, #32
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40000400 	.word	0x40000400
 8001f24:	40023800 	.word	0x40023800
 8001f28:	40020400 	.word	0x40020400

08001f2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08c      	sub	sp, #48	; 0x30
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f34:	f107 031c 	add.w	r3, r7, #28
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	60da      	str	r2, [r3, #12]
 8001f42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a36      	ldr	r2, [pc, #216]	; (8002024 <HAL_UART_MspInit+0xf8>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d135      	bne.n	8001fba <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	61bb      	str	r3, [r7, #24]
 8001f52:	4b35      	ldr	r3, [pc, #212]	; (8002028 <HAL_UART_MspInit+0xfc>)
 8001f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f56:	4a34      	ldr	r2, [pc, #208]	; (8002028 <HAL_UART_MspInit+0xfc>)
 8001f58:	f043 0310 	orr.w	r3, r3, #16
 8001f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f5e:	4b32      	ldr	r3, [pc, #200]	; (8002028 <HAL_UART_MspInit+0xfc>)
 8001f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f62:	f003 0310 	and.w	r3, r3, #16
 8001f66:	61bb      	str	r3, [r7, #24]
 8001f68:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
 8001f6e:	4b2e      	ldr	r3, [pc, #184]	; (8002028 <HAL_UART_MspInit+0xfc>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	4a2d      	ldr	r2, [pc, #180]	; (8002028 <HAL_UART_MspInit+0xfc>)
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7a:	4b2b      	ldr	r3, [pc, #172]	; (8002028 <HAL_UART_MspInit+0xfc>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	617b      	str	r3, [r7, #20]
 8001f84:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f86:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f90:	2300      	movs	r3, #0
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f94:	2303      	movs	r3, #3
 8001f96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f98:	2307      	movs	r3, #7
 8001f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9c:	f107 031c 	add.w	r3, r7, #28
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4822      	ldr	r0, [pc, #136]	; (800202c <HAL_UART_MspInit+0x100>)
 8001fa4:	f000 ff18 	bl	8002dd8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001fa8:	2200      	movs	r2, #0
 8001faa:	2100      	movs	r1, #0
 8001fac:	2025      	movs	r0, #37	; 0x25
 8001fae:	f000 fe4a 	bl	8002c46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001fb2:	2025      	movs	r0, #37	; 0x25
 8001fb4:	f000 fe63 	bl	8002c7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001fb8:	e030      	b.n	800201c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a1c      	ldr	r2, [pc, #112]	; (8002030 <HAL_UART_MspInit+0x104>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d12b      	bne.n	800201c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	613b      	str	r3, [r7, #16]
 8001fc8:	4b17      	ldr	r3, [pc, #92]	; (8002028 <HAL_UART_MspInit+0xfc>)
 8001fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fcc:	4a16      	ldr	r2, [pc, #88]	; (8002028 <HAL_UART_MspInit+0xfc>)
 8001fce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fd2:	6413      	str	r3, [r2, #64]	; 0x40
 8001fd4:	4b14      	ldr	r3, [pc, #80]	; (8002028 <HAL_UART_MspInit+0xfc>)
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fdc:	613b      	str	r3, [r7, #16]
 8001fde:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	4b10      	ldr	r3, [pc, #64]	; (8002028 <HAL_UART_MspInit+0xfc>)
 8001fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe8:	4a0f      	ldr	r2, [pc, #60]	; (8002028 <HAL_UART_MspInit+0xfc>)
 8001fea:	f043 0301 	orr.w	r3, r3, #1
 8001fee:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff0:	4b0d      	ldr	r3, [pc, #52]	; (8002028 <HAL_UART_MspInit+0xfc>)
 8001ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ffc:	230c      	movs	r3, #12
 8001ffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002000:	2302      	movs	r3, #2
 8002002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002004:	2300      	movs	r3, #0
 8002006:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002008:	2303      	movs	r3, #3
 800200a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800200c:	2307      	movs	r3, #7
 800200e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002010:	f107 031c 	add.w	r3, r7, #28
 8002014:	4619      	mov	r1, r3
 8002016:	4805      	ldr	r0, [pc, #20]	; (800202c <HAL_UART_MspInit+0x100>)
 8002018:	f000 fede 	bl	8002dd8 <HAL_GPIO_Init>
}
 800201c:	bf00      	nop
 800201e:	3730      	adds	r7, #48	; 0x30
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40011000 	.word	0x40011000
 8002028:	40023800 	.word	0x40023800
 800202c:	40020000 	.word	0x40020000
 8002030:	40004400 	.word	0x40004400

08002034 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002038:	e7fe      	b.n	8002038 <NMI_Handler+0x4>

0800203a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800203a:	b480      	push	{r7}
 800203c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800203e:	e7fe      	b.n	800203e <HardFault_Handler+0x4>

08002040 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002044:	e7fe      	b.n	8002044 <MemManage_Handler+0x4>

08002046 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002046:	b480      	push	{r7}
 8002048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800204a:	e7fe      	b.n	800204a <BusFault_Handler+0x4>

0800204c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002050:	e7fe      	b.n	8002050 <UsageFault_Handler+0x4>

08002052 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002052:	b480      	push	{r7}
 8002054:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002056:	bf00      	nop
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800206e:	b480      	push	{r7}
 8002070:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002080:	f000 f8d0 	bl	8002224 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002084:	bf00      	nop
 8002086:	bd80      	pop	{r7, pc}

08002088 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800208c:	4802      	ldr	r0, [pc, #8]	; (8002098 <USART1_IRQHandler+0x10>)
 800208e:	f002 fb47 	bl	8004720 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002092:	bf00      	nop
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20000124 	.word	0x20000124

0800209c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020a4:	4a14      	ldr	r2, [pc, #80]	; (80020f8 <_sbrk+0x5c>)
 80020a6:	4b15      	ldr	r3, [pc, #84]	; (80020fc <_sbrk+0x60>)
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020b0:	4b13      	ldr	r3, [pc, #76]	; (8002100 <_sbrk+0x64>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d102      	bne.n	80020be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020b8:	4b11      	ldr	r3, [pc, #68]	; (8002100 <_sbrk+0x64>)
 80020ba:	4a12      	ldr	r2, [pc, #72]	; (8002104 <_sbrk+0x68>)
 80020bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020be:	4b10      	ldr	r3, [pc, #64]	; (8002100 <_sbrk+0x64>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4413      	add	r3, r2
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d207      	bcs.n	80020dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020cc:	f003 fa90 	bl	80055f0 <__errno>
 80020d0:	4603      	mov	r3, r0
 80020d2:	220c      	movs	r2, #12
 80020d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020d6:	f04f 33ff 	mov.w	r3, #4294967295
 80020da:	e009      	b.n	80020f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020dc:	4b08      	ldr	r3, [pc, #32]	; (8002100 <_sbrk+0x64>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020e2:	4b07      	ldr	r3, [pc, #28]	; (8002100 <_sbrk+0x64>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4413      	add	r3, r2
 80020ea:	4a05      	ldr	r2, [pc, #20]	; (8002100 <_sbrk+0x64>)
 80020ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ee:	68fb      	ldr	r3, [r7, #12]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	20020000 	.word	0x20020000
 80020fc:	00000400 	.word	0x00000400
 8002100:	200005c0 	.word	0x200005c0
 8002104:	200005d8 	.word	0x200005d8

08002108 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800210c:	4b06      	ldr	r3, [pc, #24]	; (8002128 <SystemInit+0x20>)
 800210e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002112:	4a05      	ldr	r2, [pc, #20]	; (8002128 <SystemInit+0x20>)
 8002114:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002118:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800211c:	bf00      	nop
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	e000ed00 	.word	0xe000ed00

0800212c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800212c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002164 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002130:	480d      	ldr	r0, [pc, #52]	; (8002168 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002132:	490e      	ldr	r1, [pc, #56]	; (800216c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002134:	4a0e      	ldr	r2, [pc, #56]	; (8002170 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002136:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002138:	e002      	b.n	8002140 <LoopCopyDataInit>

0800213a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800213a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800213c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800213e:	3304      	adds	r3, #4

08002140 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002140:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002142:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002144:	d3f9      	bcc.n	800213a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002146:	4a0b      	ldr	r2, [pc, #44]	; (8002174 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002148:	4c0b      	ldr	r4, [pc, #44]	; (8002178 <LoopFillZerobss+0x26>)
  movs r3, #0
 800214a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800214c:	e001      	b.n	8002152 <LoopFillZerobss>

0800214e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800214e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002150:	3204      	adds	r2, #4

08002152 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002152:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002154:	d3fb      	bcc.n	800214e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002156:	f7ff ffd7 	bl	8002108 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800215a:	f003 fa4f 	bl	80055fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800215e:	f7ff fbd3 	bl	8001908 <main>
  bx  lr    
 8002162:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002164:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002168:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800216c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002170:	080061b0 	.word	0x080061b0
  ldr r2, =_sbss
 8002174:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002178:	200005d8 	.word	0x200005d8

0800217c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800217c:	e7fe      	b.n	800217c <ADC_IRQHandler>
	...

08002180 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002184:	4b0e      	ldr	r3, [pc, #56]	; (80021c0 <HAL_Init+0x40>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a0d      	ldr	r2, [pc, #52]	; (80021c0 <HAL_Init+0x40>)
 800218a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800218e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002190:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <HAL_Init+0x40>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a0a      	ldr	r2, [pc, #40]	; (80021c0 <HAL_Init+0x40>)
 8002196:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800219a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800219c:	4b08      	ldr	r3, [pc, #32]	; (80021c0 <HAL_Init+0x40>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a07      	ldr	r2, [pc, #28]	; (80021c0 <HAL_Init+0x40>)
 80021a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021a8:	2003      	movs	r0, #3
 80021aa:	f000 fd41 	bl	8002c30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021ae:	2000      	movs	r0, #0
 80021b0:	f000 f808 	bl	80021c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021b4:	f7ff fdf2 	bl	8001d9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40023c00 	.word	0x40023c00

080021c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021cc:	4b12      	ldr	r3, [pc, #72]	; (8002218 <HAL_InitTick+0x54>)
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	4b12      	ldr	r3, [pc, #72]	; (800221c <HAL_InitTick+0x58>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	4619      	mov	r1, r3
 80021d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021da:	fbb3 f3f1 	udiv	r3, r3, r1
 80021de:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e2:	4618      	mov	r0, r3
 80021e4:	f000 fd59 	bl	8002c9a <HAL_SYSTICK_Config>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e00e      	b.n	8002210 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2b0f      	cmp	r3, #15
 80021f6:	d80a      	bhi.n	800220e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021f8:	2200      	movs	r2, #0
 80021fa:	6879      	ldr	r1, [r7, #4]
 80021fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002200:	f000 fd21 	bl	8002c46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002204:	4a06      	ldr	r2, [pc, #24]	; (8002220 <HAL_InitTick+0x5c>)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800220a:	2300      	movs	r3, #0
 800220c:	e000      	b.n	8002210 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
}
 8002210:	4618      	mov	r0, r3
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	20000000 	.word	0x20000000
 800221c:	20000008 	.word	0x20000008
 8002220:	20000004 	.word	0x20000004

08002224 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002228:	4b06      	ldr	r3, [pc, #24]	; (8002244 <HAL_IncTick+0x20>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	461a      	mov	r2, r3
 800222e:	4b06      	ldr	r3, [pc, #24]	; (8002248 <HAL_IncTick+0x24>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4413      	add	r3, r2
 8002234:	4a04      	ldr	r2, [pc, #16]	; (8002248 <HAL_IncTick+0x24>)
 8002236:	6013      	str	r3, [r2, #0]
}
 8002238:	bf00      	nop
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	20000008 	.word	0x20000008
 8002248:	200005c4 	.word	0x200005c4

0800224c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  return uwTick;
 8002250:	4b03      	ldr	r3, [pc, #12]	; (8002260 <HAL_GetTick+0x14>)
 8002252:	681b      	ldr	r3, [r3, #0]
}
 8002254:	4618      	mov	r0, r3
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	200005c4 	.word	0x200005c4

08002264 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800226c:	f7ff ffee 	bl	800224c <HAL_GetTick>
 8002270:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800227c:	d005      	beq.n	800228a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800227e:	4b0a      	ldr	r3, [pc, #40]	; (80022a8 <HAL_Delay+0x44>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	461a      	mov	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	4413      	add	r3, r2
 8002288:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800228a:	bf00      	nop
 800228c:	f7ff ffde 	bl	800224c <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	429a      	cmp	r2, r3
 800229a:	d8f7      	bhi.n	800228c <HAL_Delay+0x28>
  {
  }
}
 800229c:	bf00      	nop
 800229e:	bf00      	nop
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	20000008 	.word	0x20000008

080022ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022b4:	2300      	movs	r3, #0
 80022b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e033      	b.n	800232a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d109      	bne.n	80022de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f7ff fd8e 	bl	8001dec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	f003 0310 	and.w	r3, r3, #16
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d118      	bne.n	800231c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022f2:	f023 0302 	bic.w	r3, r3, #2
 80022f6:	f043 0202 	orr.w	r2, r3, #2
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 faca 	bl	8002898 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	f023 0303 	bic.w	r3, r3, #3
 8002312:	f043 0201 	orr.w	r2, r3, #1
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	641a      	str	r2, [r3, #64]	; 0x40
 800231a:	e001      	b.n	8002320 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002328:	7bfb      	ldrb	r3, [r7, #15]
}
 800232a:	4618      	mov	r0, r3
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
	...

08002334 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800233c:	2300      	movs	r3, #0
 800233e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002346:	2b01      	cmp	r3, #1
 8002348:	d101      	bne.n	800234e <HAL_ADC_Start+0x1a>
 800234a:	2302      	movs	r3, #2
 800234c:	e097      	b.n	800247e <HAL_ADC_Start+0x14a>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2201      	movs	r2, #1
 8002352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	2b01      	cmp	r3, #1
 8002362:	d018      	beq.n	8002396 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	689a      	ldr	r2, [r3, #8]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f042 0201 	orr.w	r2, r2, #1
 8002372:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002374:	4b45      	ldr	r3, [pc, #276]	; (800248c <HAL_ADC_Start+0x158>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a45      	ldr	r2, [pc, #276]	; (8002490 <HAL_ADC_Start+0x15c>)
 800237a:	fba2 2303 	umull	r2, r3, r2, r3
 800237e:	0c9a      	lsrs	r2, r3, #18
 8002380:	4613      	mov	r3, r2
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	4413      	add	r3, r2
 8002386:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002388:	e002      	b.n	8002390 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	3b01      	subs	r3, #1
 800238e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1f9      	bne.n	800238a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d15f      	bne.n	8002464 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80023ac:	f023 0301 	bic.w	r3, r3, #1
 80023b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d007      	beq.n	80023d6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023ce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023e2:	d106      	bne.n	80023f2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e8:	f023 0206 	bic.w	r2, r3, #6
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	645a      	str	r2, [r3, #68]	; 0x44
 80023f0:	e002      	b.n	80023f8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002400:	4b24      	ldr	r3, [pc, #144]	; (8002494 <HAL_ADC_Start+0x160>)
 8002402:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800240c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f003 031f 	and.w	r3, r3, #31
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10f      	bne.n	800243a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d129      	bne.n	800247c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	689a      	ldr	r2, [r3, #8]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002436:	609a      	str	r2, [r3, #8]
 8002438:	e020      	b.n	800247c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a16      	ldr	r2, [pc, #88]	; (8002498 <HAL_ADC_Start+0x164>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d11b      	bne.n	800247c <HAL_ADC_Start+0x148>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d114      	bne.n	800247c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002460:	609a      	str	r2, [r3, #8]
 8002462:	e00b      	b.n	800247c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002468:	f043 0210 	orr.w	r2, r3, #16
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002474:	f043 0201 	orr.w	r2, r3, #1
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3714      	adds	r7, #20
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	20000000 	.word	0x20000000
 8002490:	431bde83 	.word	0x431bde83
 8002494:	40012300 	.word	0x40012300
 8002498:	40012000 	.word	0x40012000

0800249c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d101      	bne.n	80024b2 <HAL_ADC_Stop+0x16>
 80024ae:	2302      	movs	r3, #2
 80024b0:	e021      	b.n	80024f6 <HAL_ADC_Stop+0x5a>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2201      	movs	r2, #1
 80024b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f022 0201 	bic.w	r2, r2, #1
 80024c8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d109      	bne.n	80024ec <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024dc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80024e0:	f023 0301 	bic.w	r3, r3, #1
 80024e4:	f043 0201 	orr.w	r2, r3, #1
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b084      	sub	sp, #16
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
 800250a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800250c:	2300      	movs	r3, #0
 800250e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800251a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800251e:	d113      	bne.n	8002548 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800252a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800252e:	d10b      	bne.n	8002548 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002534:	f043 0220 	orr.w	r2, r3, #32
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e063      	b.n	8002610 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002548:	f7ff fe80 	bl	800224c <HAL_GetTick>
 800254c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800254e:	e021      	b.n	8002594 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002556:	d01d      	beq.n	8002594 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d007      	beq.n	800256e <HAL_ADC_PollForConversion+0x6c>
 800255e:	f7ff fe75 	bl	800224c <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	429a      	cmp	r2, r3
 800256c:	d212      	bcs.n	8002594 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b02      	cmp	r3, #2
 800257a:	d00b      	beq.n	8002594 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002580:	f043 0204 	orr.w	r2, r3, #4
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e03d      	b.n	8002610 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d1d6      	bne.n	8002550 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f06f 0212 	mvn.w	r2, #18
 80025aa:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d123      	bne.n	800260e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d11f      	bne.n	800260e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d006      	beq.n	80025ea <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d111      	bne.n	800260e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d105      	bne.n	800260e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	f043 0201 	orr.w	r2, r3, #1
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002626:	4618      	mov	r0, r3
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
	...

08002634 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800263e:	2300      	movs	r3, #0
 8002640:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002648:	2b01      	cmp	r3, #1
 800264a:	d101      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x1c>
 800264c:	2302      	movs	r3, #2
 800264e:	e113      	b.n	8002878 <HAL_ADC_ConfigChannel+0x244>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2b09      	cmp	r3, #9
 800265e:	d925      	bls.n	80026ac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68d9      	ldr	r1, [r3, #12]
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	b29b      	uxth	r3, r3
 800266c:	461a      	mov	r2, r3
 800266e:	4613      	mov	r3, r2
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	4413      	add	r3, r2
 8002674:	3b1e      	subs	r3, #30
 8002676:	2207      	movs	r2, #7
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	43da      	mvns	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	400a      	ands	r2, r1
 8002684:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68d9      	ldr	r1, [r3, #12]
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	689a      	ldr	r2, [r3, #8]
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	b29b      	uxth	r3, r3
 8002696:	4618      	mov	r0, r3
 8002698:	4603      	mov	r3, r0
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	4403      	add	r3, r0
 800269e:	3b1e      	subs	r3, #30
 80026a0:	409a      	lsls	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	430a      	orrs	r2, r1
 80026a8:	60da      	str	r2, [r3, #12]
 80026aa:	e022      	b.n	80026f2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6919      	ldr	r1, [r3, #16]
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	461a      	mov	r2, r3
 80026ba:	4613      	mov	r3, r2
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	4413      	add	r3, r2
 80026c0:	2207      	movs	r2, #7
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	43da      	mvns	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	400a      	ands	r2, r1
 80026ce:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6919      	ldr	r1, [r3, #16]
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	689a      	ldr	r2, [r3, #8]
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	b29b      	uxth	r3, r3
 80026e0:	4618      	mov	r0, r3
 80026e2:	4603      	mov	r3, r0
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	4403      	add	r3, r0
 80026e8:	409a      	lsls	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	430a      	orrs	r2, r1
 80026f0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	2b06      	cmp	r3, #6
 80026f8:	d824      	bhi.n	8002744 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	4613      	mov	r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	4413      	add	r3, r2
 800270a:	3b05      	subs	r3, #5
 800270c:	221f      	movs	r2, #31
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43da      	mvns	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	400a      	ands	r2, r1
 800271a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	b29b      	uxth	r3, r3
 8002728:	4618      	mov	r0, r3
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685a      	ldr	r2, [r3, #4]
 800272e:	4613      	mov	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	4413      	add	r3, r2
 8002734:	3b05      	subs	r3, #5
 8002736:	fa00 f203 	lsl.w	r2, r0, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	430a      	orrs	r2, r1
 8002740:	635a      	str	r2, [r3, #52]	; 0x34
 8002742:	e04c      	b.n	80027de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	2b0c      	cmp	r3, #12
 800274a:	d824      	bhi.n	8002796 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685a      	ldr	r2, [r3, #4]
 8002756:	4613      	mov	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	4413      	add	r3, r2
 800275c:	3b23      	subs	r3, #35	; 0x23
 800275e:	221f      	movs	r2, #31
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	43da      	mvns	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	400a      	ands	r2, r1
 800276c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	b29b      	uxth	r3, r3
 800277a:	4618      	mov	r0, r3
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	4613      	mov	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	3b23      	subs	r3, #35	; 0x23
 8002788:	fa00 f203 	lsl.w	r2, r0, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	430a      	orrs	r2, r1
 8002792:	631a      	str	r2, [r3, #48]	; 0x30
 8002794:	e023      	b.n	80027de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	4613      	mov	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4413      	add	r3, r2
 80027a6:	3b41      	subs	r3, #65	; 0x41
 80027a8:	221f      	movs	r2, #31
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	43da      	mvns	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	400a      	ands	r2, r1
 80027b6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	4618      	mov	r0, r3
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685a      	ldr	r2, [r3, #4]
 80027ca:	4613      	mov	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	4413      	add	r3, r2
 80027d0:	3b41      	subs	r3, #65	; 0x41
 80027d2:	fa00 f203 	lsl.w	r2, r0, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	430a      	orrs	r2, r1
 80027dc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027de:	4b29      	ldr	r3, [pc, #164]	; (8002884 <HAL_ADC_ConfigChannel+0x250>)
 80027e0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a28      	ldr	r2, [pc, #160]	; (8002888 <HAL_ADC_ConfigChannel+0x254>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d10f      	bne.n	800280c <HAL_ADC_ConfigChannel+0x1d8>
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2b12      	cmp	r3, #18
 80027f2:	d10b      	bne.n	800280c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a1d      	ldr	r2, [pc, #116]	; (8002888 <HAL_ADC_ConfigChannel+0x254>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d12b      	bne.n	800286e <HAL_ADC_ConfigChannel+0x23a>
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a1c      	ldr	r2, [pc, #112]	; (800288c <HAL_ADC_ConfigChannel+0x258>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d003      	beq.n	8002828 <HAL_ADC_ConfigChannel+0x1f4>
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2b11      	cmp	r3, #17
 8002826:	d122      	bne.n	800286e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a11      	ldr	r2, [pc, #68]	; (800288c <HAL_ADC_ConfigChannel+0x258>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d111      	bne.n	800286e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800284a:	4b11      	ldr	r3, [pc, #68]	; (8002890 <HAL_ADC_ConfigChannel+0x25c>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a11      	ldr	r2, [pc, #68]	; (8002894 <HAL_ADC_ConfigChannel+0x260>)
 8002850:	fba2 2303 	umull	r2, r3, r2, r3
 8002854:	0c9a      	lsrs	r2, r3, #18
 8002856:	4613      	mov	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	4413      	add	r3, r2
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002860:	e002      	b.n	8002868 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	3b01      	subs	r3, #1
 8002866:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1f9      	bne.n	8002862 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	40012300 	.word	0x40012300
 8002888:	40012000 	.word	0x40012000
 800288c:	10000012 	.word	0x10000012
 8002890:	20000000 	.word	0x20000000
 8002894:	431bde83 	.word	0x431bde83

08002898 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028a0:	4b79      	ldr	r3, [pc, #484]	; (8002a88 <ADC_Init+0x1f0>)
 80028a2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	431a      	orrs	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	685a      	ldr	r2, [r3, #4]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6859      	ldr	r1, [r3, #4]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	021a      	lsls	r2, r3, #8
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	430a      	orrs	r2, r1
 80028e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80028f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6859      	ldr	r1, [r3, #4]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	430a      	orrs	r2, r1
 8002902:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689a      	ldr	r2, [r3, #8]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002912:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6899      	ldr	r1, [r3, #8]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68da      	ldr	r2, [r3, #12]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	430a      	orrs	r2, r1
 8002924:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292a:	4a58      	ldr	r2, [pc, #352]	; (8002a8c <ADC_Init+0x1f4>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d022      	beq.n	8002976 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	689a      	ldr	r2, [r3, #8]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800293e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	6899      	ldr	r1, [r3, #8]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	430a      	orrs	r2, r1
 8002950:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002960:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6899      	ldr	r1, [r3, #8]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	430a      	orrs	r2, r1
 8002972:	609a      	str	r2, [r3, #8]
 8002974:	e00f      	b.n	8002996 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002984:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002994:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 0202 	bic.w	r2, r2, #2
 80029a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6899      	ldr	r1, [r3, #8]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	7e1b      	ldrb	r3, [r3, #24]
 80029b0:	005a      	lsls	r2, r3, #1
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	430a      	orrs	r2, r1
 80029b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d01b      	beq.n	80029fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	685a      	ldr	r2, [r3, #4]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80029e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6859      	ldr	r1, [r3, #4]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ee:	3b01      	subs	r3, #1
 80029f0:	035a      	lsls	r2, r3, #13
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	605a      	str	r2, [r3, #4]
 80029fa:	e007      	b.n	8002a0c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	685a      	ldr	r2, [r3, #4]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a0a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	3b01      	subs	r3, #1
 8002a28:	051a      	lsls	r2, r3, #20
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6899      	ldr	r1, [r3, #8]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a4e:	025a      	lsls	r2, r3, #9
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	430a      	orrs	r2, r1
 8002a56:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	689a      	ldr	r2, [r3, #8]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6899      	ldr	r1, [r3, #8]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	029a      	lsls	r2, r3, #10
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	609a      	str	r2, [r3, #8]
}
 8002a7c:	bf00      	nop
 8002a7e:	3714      	adds	r7, #20
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	40012300 	.word	0x40012300
 8002a8c:	0f000001 	.word	0x0f000001

08002a90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f003 0307 	and.w	r3, r3, #7
 8002a9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002aa0:	4b0c      	ldr	r3, [pc, #48]	; (8002ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002aac:	4013      	ands	r3, r2
 8002aae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ab8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ac2:	4a04      	ldr	r2, [pc, #16]	; (8002ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	60d3      	str	r3, [r2, #12]
}
 8002ac8:	bf00      	nop
 8002aca:	3714      	adds	r7, #20
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr
 8002ad4:	e000ed00 	.word	0xe000ed00

08002ad8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002adc:	4b04      	ldr	r3, [pc, #16]	; (8002af0 <__NVIC_GetPriorityGrouping+0x18>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	0a1b      	lsrs	r3, r3, #8
 8002ae2:	f003 0307 	and.w	r3, r3, #7
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	e000ed00 	.word	0xe000ed00

08002af4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	4603      	mov	r3, r0
 8002afc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	db0b      	blt.n	8002b1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b06:	79fb      	ldrb	r3, [r7, #7]
 8002b08:	f003 021f 	and.w	r2, r3, #31
 8002b0c:	4907      	ldr	r1, [pc, #28]	; (8002b2c <__NVIC_EnableIRQ+0x38>)
 8002b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b12:	095b      	lsrs	r3, r3, #5
 8002b14:	2001      	movs	r0, #1
 8002b16:	fa00 f202 	lsl.w	r2, r0, r2
 8002b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b1e:	bf00      	nop
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	e000e100 	.word	0xe000e100

08002b30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	4603      	mov	r3, r0
 8002b38:	6039      	str	r1, [r7, #0]
 8002b3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	db0a      	blt.n	8002b5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	b2da      	uxtb	r2, r3
 8002b48:	490c      	ldr	r1, [pc, #48]	; (8002b7c <__NVIC_SetPriority+0x4c>)
 8002b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4e:	0112      	lsls	r2, r2, #4
 8002b50:	b2d2      	uxtb	r2, r2
 8002b52:	440b      	add	r3, r1
 8002b54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b58:	e00a      	b.n	8002b70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	4908      	ldr	r1, [pc, #32]	; (8002b80 <__NVIC_SetPriority+0x50>)
 8002b60:	79fb      	ldrb	r3, [r7, #7]
 8002b62:	f003 030f 	and.w	r3, r3, #15
 8002b66:	3b04      	subs	r3, #4
 8002b68:	0112      	lsls	r2, r2, #4
 8002b6a:	b2d2      	uxtb	r2, r2
 8002b6c:	440b      	add	r3, r1
 8002b6e:	761a      	strb	r2, [r3, #24]
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr
 8002b7c:	e000e100 	.word	0xe000e100
 8002b80:	e000ed00 	.word	0xe000ed00

08002b84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b089      	sub	sp, #36	; 0x24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f003 0307 	and.w	r3, r3, #7
 8002b96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	f1c3 0307 	rsb	r3, r3, #7
 8002b9e:	2b04      	cmp	r3, #4
 8002ba0:	bf28      	it	cs
 8002ba2:	2304      	movcs	r3, #4
 8002ba4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	3304      	adds	r3, #4
 8002baa:	2b06      	cmp	r3, #6
 8002bac:	d902      	bls.n	8002bb4 <NVIC_EncodePriority+0x30>
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	3b03      	subs	r3, #3
 8002bb2:	e000      	b.n	8002bb6 <NVIC_EncodePriority+0x32>
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	43da      	mvns	r2, r3
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	401a      	ands	r2, r3
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd6:	43d9      	mvns	r1, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bdc:	4313      	orrs	r3, r2
         );
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3724      	adds	r7, #36	; 0x24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
	...

08002bec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bfc:	d301      	bcc.n	8002c02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e00f      	b.n	8002c22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c02:	4a0a      	ldr	r2, [pc, #40]	; (8002c2c <SysTick_Config+0x40>)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	3b01      	subs	r3, #1
 8002c08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c0a:	210f      	movs	r1, #15
 8002c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c10:	f7ff ff8e 	bl	8002b30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c14:	4b05      	ldr	r3, [pc, #20]	; (8002c2c <SysTick_Config+0x40>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c1a:	4b04      	ldr	r3, [pc, #16]	; (8002c2c <SysTick_Config+0x40>)
 8002c1c:	2207      	movs	r2, #7
 8002c1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	e000e010 	.word	0xe000e010

08002c30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f7ff ff29 	bl	8002a90 <__NVIC_SetPriorityGrouping>
}
 8002c3e:	bf00      	nop
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b086      	sub	sp, #24
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	60b9      	str	r1, [r7, #8]
 8002c50:	607a      	str	r2, [r7, #4]
 8002c52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c54:	2300      	movs	r3, #0
 8002c56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c58:	f7ff ff3e 	bl	8002ad8 <__NVIC_GetPriorityGrouping>
 8002c5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	68b9      	ldr	r1, [r7, #8]
 8002c62:	6978      	ldr	r0, [r7, #20]
 8002c64:	f7ff ff8e 	bl	8002b84 <NVIC_EncodePriority>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c6e:	4611      	mov	r1, r2
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff ff5d 	bl	8002b30 <__NVIC_SetPriority>
}
 8002c76:	bf00      	nop
 8002c78:	3718      	adds	r7, #24
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b082      	sub	sp, #8
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	4603      	mov	r3, r0
 8002c86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff ff31 	bl	8002af4 <__NVIC_EnableIRQ>
}
 8002c92:	bf00      	nop
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b082      	sub	sp, #8
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7ff ffa2 	bl	8002bec <SysTick_Config>
 8002ca8:	4603      	mov	r3, r0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b084      	sub	sp, #16
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cbe:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002cc0:	f7ff fac4 	bl	800224c <HAL_GetTick>
 8002cc4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d008      	beq.n	8002ce4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2280      	movs	r2, #128	; 0x80
 8002cd6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e052      	b.n	8002d8a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0216 	bic.w	r2, r2, #22
 8002cf2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	695a      	ldr	r2, [r3, #20]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d02:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d103      	bne.n	8002d14 <HAL_DMA_Abort+0x62>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d007      	beq.n	8002d24 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 0208 	bic.w	r2, r2, #8
 8002d22:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0201 	bic.w	r2, r2, #1
 8002d32:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d34:	e013      	b.n	8002d5e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d36:	f7ff fa89 	bl	800224c <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b05      	cmp	r3, #5
 8002d42:	d90c      	bls.n	8002d5e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2220      	movs	r2, #32
 8002d48:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2203      	movs	r2, #3
 8002d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e015      	b.n	8002d8a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1e4      	bne.n	8002d36 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d70:	223f      	movs	r2, #63	; 0x3f
 8002d72:	409a      	lsls	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b083      	sub	sp, #12
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d004      	beq.n	8002db0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2280      	movs	r2, #128	; 0x80
 8002daa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e00c      	b.n	8002dca <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2205      	movs	r2, #5
 8002db4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0201 	bic.w	r2, r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
	...

08002dd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b089      	sub	sp, #36	; 0x24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002de2:	2300      	movs	r3, #0
 8002de4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002de6:	2300      	movs	r3, #0
 8002de8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002dea:	2300      	movs	r3, #0
 8002dec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dee:	2300      	movs	r3, #0
 8002df0:	61fb      	str	r3, [r7, #28]
 8002df2:	e159      	b.n	80030a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002df4:	2201      	movs	r2, #1
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	4013      	ands	r3, r2
 8002e06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e08:	693a      	ldr	r2, [r7, #16]
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	f040 8148 	bne.w	80030a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f003 0303 	and.w	r3, r3, #3
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d005      	beq.n	8002e2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d130      	bne.n	8002e8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	2203      	movs	r2, #3
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	43db      	mvns	r3, r3
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	68da      	ldr	r2, [r3, #12]
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e60:	2201      	movs	r2, #1
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	43db      	mvns	r3, r3
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	091b      	lsrs	r3, r3, #4
 8002e76:	f003 0201 	and.w	r2, r3, #1
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f003 0303 	and.w	r3, r3, #3
 8002e94:	2b03      	cmp	r3, #3
 8002e96:	d017      	beq.n	8002ec8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	2203      	movs	r2, #3
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	4013      	ands	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f003 0303 	and.w	r3, r3, #3
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d123      	bne.n	8002f1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	08da      	lsrs	r2, r3, #3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	3208      	adds	r2, #8
 8002edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	f003 0307 	and.w	r3, r3, #7
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	220f      	movs	r2, #15
 8002eec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef0:	43db      	mvns	r3, r3
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	691a      	ldr	r2, [r3, #16]
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	f003 0307 	and.w	r3, r3, #7
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	08da      	lsrs	r2, r3, #3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	3208      	adds	r2, #8
 8002f16:	69b9      	ldr	r1, [r7, #24]
 8002f18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	2203      	movs	r2, #3
 8002f28:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2c:	43db      	mvns	r3, r3
 8002f2e:	69ba      	ldr	r2, [r7, #24]
 8002f30:	4013      	ands	r3, r2
 8002f32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f003 0203 	and.w	r2, r3, #3
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	005b      	lsls	r3, r3, #1
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f000 80a2 	beq.w	80030a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60fb      	str	r3, [r7, #12]
 8002f62:	4b57      	ldr	r3, [pc, #348]	; (80030c0 <HAL_GPIO_Init+0x2e8>)
 8002f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f66:	4a56      	ldr	r2, [pc, #344]	; (80030c0 <HAL_GPIO_Init+0x2e8>)
 8002f68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f6e:	4b54      	ldr	r3, [pc, #336]	; (80030c0 <HAL_GPIO_Init+0x2e8>)
 8002f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f7a:	4a52      	ldr	r2, [pc, #328]	; (80030c4 <HAL_GPIO_Init+0x2ec>)
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	089b      	lsrs	r3, r3, #2
 8002f80:	3302      	adds	r3, #2
 8002f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	f003 0303 	and.w	r3, r3, #3
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	220f      	movs	r2, #15
 8002f92:	fa02 f303 	lsl.w	r3, r2, r3
 8002f96:	43db      	mvns	r3, r3
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a49      	ldr	r2, [pc, #292]	; (80030c8 <HAL_GPIO_Init+0x2f0>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d019      	beq.n	8002fda <HAL_GPIO_Init+0x202>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a48      	ldr	r2, [pc, #288]	; (80030cc <HAL_GPIO_Init+0x2f4>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d013      	beq.n	8002fd6 <HAL_GPIO_Init+0x1fe>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a47      	ldr	r2, [pc, #284]	; (80030d0 <HAL_GPIO_Init+0x2f8>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d00d      	beq.n	8002fd2 <HAL_GPIO_Init+0x1fa>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a46      	ldr	r2, [pc, #280]	; (80030d4 <HAL_GPIO_Init+0x2fc>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d007      	beq.n	8002fce <HAL_GPIO_Init+0x1f6>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a45      	ldr	r2, [pc, #276]	; (80030d8 <HAL_GPIO_Init+0x300>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d101      	bne.n	8002fca <HAL_GPIO_Init+0x1f2>
 8002fc6:	2304      	movs	r3, #4
 8002fc8:	e008      	b.n	8002fdc <HAL_GPIO_Init+0x204>
 8002fca:	2307      	movs	r3, #7
 8002fcc:	e006      	b.n	8002fdc <HAL_GPIO_Init+0x204>
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e004      	b.n	8002fdc <HAL_GPIO_Init+0x204>
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	e002      	b.n	8002fdc <HAL_GPIO_Init+0x204>
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e000      	b.n	8002fdc <HAL_GPIO_Init+0x204>
 8002fda:	2300      	movs	r3, #0
 8002fdc:	69fa      	ldr	r2, [r7, #28]
 8002fde:	f002 0203 	and.w	r2, r2, #3
 8002fe2:	0092      	lsls	r2, r2, #2
 8002fe4:	4093      	lsls	r3, r2
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fec:	4935      	ldr	r1, [pc, #212]	; (80030c4 <HAL_GPIO_Init+0x2ec>)
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	089b      	lsrs	r3, r3, #2
 8002ff2:	3302      	adds	r3, #2
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ffa:	4b38      	ldr	r3, [pc, #224]	; (80030dc <HAL_GPIO_Init+0x304>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	43db      	mvns	r3, r3
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	4013      	ands	r3, r2
 8003008:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d003      	beq.n	800301e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	4313      	orrs	r3, r2
 800301c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800301e:	4a2f      	ldr	r2, [pc, #188]	; (80030dc <HAL_GPIO_Init+0x304>)
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003024:	4b2d      	ldr	r3, [pc, #180]	; (80030dc <HAL_GPIO_Init+0x304>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	43db      	mvns	r3, r3
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	4013      	ands	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d003      	beq.n	8003048 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	4313      	orrs	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003048:	4a24      	ldr	r2, [pc, #144]	; (80030dc <HAL_GPIO_Init+0x304>)
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800304e:	4b23      	ldr	r3, [pc, #140]	; (80030dc <HAL_GPIO_Init+0x304>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	43db      	mvns	r3, r3
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	4013      	ands	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	4313      	orrs	r3, r2
 8003070:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003072:	4a1a      	ldr	r2, [pc, #104]	; (80030dc <HAL_GPIO_Init+0x304>)
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003078:	4b18      	ldr	r3, [pc, #96]	; (80030dc <HAL_GPIO_Init+0x304>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	43db      	mvns	r3, r3
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	4013      	ands	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d003      	beq.n	800309c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	4313      	orrs	r3, r2
 800309a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800309c:	4a0f      	ldr	r2, [pc, #60]	; (80030dc <HAL_GPIO_Init+0x304>)
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	3301      	adds	r3, #1
 80030a6:	61fb      	str	r3, [r7, #28]
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	2b0f      	cmp	r3, #15
 80030ac:	f67f aea2 	bls.w	8002df4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030b0:	bf00      	nop
 80030b2:	bf00      	nop
 80030b4:	3724      	adds	r7, #36	; 0x24
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	40023800 	.word	0x40023800
 80030c4:	40013800 	.word	0x40013800
 80030c8:	40020000 	.word	0x40020000
 80030cc:	40020400 	.word	0x40020400
 80030d0:	40020800 	.word	0x40020800
 80030d4:	40020c00 	.word	0x40020c00
 80030d8:	40021000 	.word	0x40021000
 80030dc:	40013c00 	.word	0x40013c00

080030e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	460b      	mov	r3, r1
 80030ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	691a      	ldr	r2, [r3, #16]
 80030f0:	887b      	ldrh	r3, [r7, #2]
 80030f2:	4013      	ands	r3, r2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d002      	beq.n	80030fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80030f8:	2301      	movs	r3, #1
 80030fa:	73fb      	strb	r3, [r7, #15]
 80030fc:	e001      	b.n	8003102 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030fe:	2300      	movs	r3, #0
 8003100:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003102:	7bfb      	ldrb	r3, [r7, #15]
}
 8003104:	4618      	mov	r0, r3
 8003106:	3714      	adds	r7, #20
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	460b      	mov	r3, r1
 800311a:	807b      	strh	r3, [r7, #2]
 800311c:	4613      	mov	r3, r2
 800311e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003120:	787b      	ldrb	r3, [r7, #1]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003126:	887a      	ldrh	r2, [r7, #2]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800312c:	e003      	b.n	8003136 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800312e:	887b      	ldrh	r3, [r7, #2]
 8003130:	041a      	lsls	r2, r3, #16
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	619a      	str	r2, [r3, #24]
}
 8003136:	bf00      	nop
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
	...

08003144 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e267      	b.n	8003626 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d075      	beq.n	800324e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003162:	4b88      	ldr	r3, [pc, #544]	; (8003384 <HAL_RCC_OscConfig+0x240>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 030c 	and.w	r3, r3, #12
 800316a:	2b04      	cmp	r3, #4
 800316c:	d00c      	beq.n	8003188 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800316e:	4b85      	ldr	r3, [pc, #532]	; (8003384 <HAL_RCC_OscConfig+0x240>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003176:	2b08      	cmp	r3, #8
 8003178:	d112      	bne.n	80031a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800317a:	4b82      	ldr	r3, [pc, #520]	; (8003384 <HAL_RCC_OscConfig+0x240>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003182:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003186:	d10b      	bne.n	80031a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003188:	4b7e      	ldr	r3, [pc, #504]	; (8003384 <HAL_RCC_OscConfig+0x240>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d05b      	beq.n	800324c <HAL_RCC_OscConfig+0x108>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d157      	bne.n	800324c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e242      	b.n	8003626 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031a8:	d106      	bne.n	80031b8 <HAL_RCC_OscConfig+0x74>
 80031aa:	4b76      	ldr	r3, [pc, #472]	; (8003384 <HAL_RCC_OscConfig+0x240>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a75      	ldr	r2, [pc, #468]	; (8003384 <HAL_RCC_OscConfig+0x240>)
 80031b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031b4:	6013      	str	r3, [r2, #0]
 80031b6:	e01d      	b.n	80031f4 <HAL_RCC_OscConfig+0xb0>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031c0:	d10c      	bne.n	80031dc <HAL_RCC_OscConfig+0x98>
 80031c2:	4b70      	ldr	r3, [pc, #448]	; (8003384 <HAL_RCC_OscConfig+0x240>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a6f      	ldr	r2, [pc, #444]	; (8003384 <HAL_RCC_OscConfig+0x240>)
 80031c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031cc:	6013      	str	r3, [r2, #0]
 80031ce:	4b6d      	ldr	r3, [pc, #436]	; (8003384 <HAL_RCC_OscConfig+0x240>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a6c      	ldr	r2, [pc, #432]	; (8003384 <HAL_RCC_OscConfig+0x240>)
 80031d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d8:	6013      	str	r3, [r2, #0]
 80031da:	e00b      	b.n	80031f4 <HAL_RCC_OscConfig+0xb0>
 80031dc:	4b69      	ldr	r3, [pc, #420]	; (8003384 <HAL_RCC_OscConfig+0x240>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a68      	ldr	r2, [pc, #416]	; (8003384 <HAL_RCC_OscConfig+0x240>)
 80031e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031e6:	6013      	str	r3, [r2, #0]
 80031e8:	4b66      	ldr	r3, [pc, #408]	; (8003384 <HAL_RCC_OscConfig+0x240>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a65      	ldr	r2, [pc, #404]	; (8003384 <HAL_RCC_OscConfig+0x240>)
 80031ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d013      	beq.n	8003224 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031fc:	f7ff f826 	bl	800224c <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003204:	f7ff f822 	bl	800224c <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b64      	cmp	r3, #100	; 0x64
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e207      	b.n	8003626 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003216:	4b5b      	ldr	r3, [pc, #364]	; (8003384 <HAL_RCC_OscConfig+0x240>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d0f0      	beq.n	8003204 <HAL_RCC_OscConfig+0xc0>
 8003222:	e014      	b.n	800324e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003224:	f7ff f812 	bl	800224c <HAL_GetTick>
 8003228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800322a:	e008      	b.n	800323e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800322c:	f7ff f80e 	bl	800224c <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b64      	cmp	r3, #100	; 0x64
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e1f3      	b.n	8003626 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800323e:	4b51      	ldr	r3, [pc, #324]	; (8003384 <HAL_RCC_OscConfig+0x240>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1f0      	bne.n	800322c <HAL_RCC_OscConfig+0xe8>
 800324a:	e000      	b.n	800324e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800324c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d063      	beq.n	8003322 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800325a:	4b4a      	ldr	r3, [pc, #296]	; (8003384 <HAL_RCC_OscConfig+0x240>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f003 030c 	and.w	r3, r3, #12
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00b      	beq.n	800327e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003266:	4b47      	ldr	r3, [pc, #284]	; (8003384 <HAL_RCC_OscConfig+0x240>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800326e:	2b08      	cmp	r3, #8
 8003270:	d11c      	bne.n	80032ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003272:	4b44      	ldr	r3, [pc, #272]	; (8003384 <HAL_RCC_OscConfig+0x240>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d116      	bne.n	80032ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800327e:	4b41      	ldr	r3, [pc, #260]	; (8003384 <HAL_RCC_OscConfig+0x240>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d005      	beq.n	8003296 <HAL_RCC_OscConfig+0x152>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d001      	beq.n	8003296 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e1c7      	b.n	8003626 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003296:	4b3b      	ldr	r3, [pc, #236]	; (8003384 <HAL_RCC_OscConfig+0x240>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	4937      	ldr	r1, [pc, #220]	; (8003384 <HAL_RCC_OscConfig+0x240>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032aa:	e03a      	b.n	8003322 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d020      	beq.n	80032f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032b4:	4b34      	ldr	r3, [pc, #208]	; (8003388 <HAL_RCC_OscConfig+0x244>)
 80032b6:	2201      	movs	r2, #1
 80032b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ba:	f7fe ffc7 	bl	800224c <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032c2:	f7fe ffc3 	bl	800224c <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e1a8      	b.n	8003626 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d4:	4b2b      	ldr	r3, [pc, #172]	; (8003384 <HAL_RCC_OscConfig+0x240>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0f0      	beq.n	80032c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032e0:	4b28      	ldr	r3, [pc, #160]	; (8003384 <HAL_RCC_OscConfig+0x240>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	00db      	lsls	r3, r3, #3
 80032ee:	4925      	ldr	r1, [pc, #148]	; (8003384 <HAL_RCC_OscConfig+0x240>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	600b      	str	r3, [r1, #0]
 80032f4:	e015      	b.n	8003322 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032f6:	4b24      	ldr	r3, [pc, #144]	; (8003388 <HAL_RCC_OscConfig+0x244>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fc:	f7fe ffa6 	bl	800224c <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003304:	f7fe ffa2 	bl	800224c <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e187      	b.n	8003626 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003316:	4b1b      	ldr	r3, [pc, #108]	; (8003384 <HAL_RCC_OscConfig+0x240>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1f0      	bne.n	8003304 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0308 	and.w	r3, r3, #8
 800332a:	2b00      	cmp	r3, #0
 800332c:	d036      	beq.n	800339c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d016      	beq.n	8003364 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003336:	4b15      	ldr	r3, [pc, #84]	; (800338c <HAL_RCC_OscConfig+0x248>)
 8003338:	2201      	movs	r2, #1
 800333a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800333c:	f7fe ff86 	bl	800224c <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003344:	f7fe ff82 	bl	800224c <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e167      	b.n	8003626 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003356:	4b0b      	ldr	r3, [pc, #44]	; (8003384 <HAL_RCC_OscConfig+0x240>)
 8003358:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d0f0      	beq.n	8003344 <HAL_RCC_OscConfig+0x200>
 8003362:	e01b      	b.n	800339c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003364:	4b09      	ldr	r3, [pc, #36]	; (800338c <HAL_RCC_OscConfig+0x248>)
 8003366:	2200      	movs	r2, #0
 8003368:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800336a:	f7fe ff6f 	bl	800224c <HAL_GetTick>
 800336e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003370:	e00e      	b.n	8003390 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003372:	f7fe ff6b 	bl	800224c <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d907      	bls.n	8003390 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e150      	b.n	8003626 <HAL_RCC_OscConfig+0x4e2>
 8003384:	40023800 	.word	0x40023800
 8003388:	42470000 	.word	0x42470000
 800338c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003390:	4b88      	ldr	r3, [pc, #544]	; (80035b4 <HAL_RCC_OscConfig+0x470>)
 8003392:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1ea      	bne.n	8003372 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0304 	and.w	r3, r3, #4
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f000 8097 	beq.w	80034d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033aa:	2300      	movs	r3, #0
 80033ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ae:	4b81      	ldr	r3, [pc, #516]	; (80035b4 <HAL_RCC_OscConfig+0x470>)
 80033b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10f      	bne.n	80033da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ba:	2300      	movs	r3, #0
 80033bc:	60bb      	str	r3, [r7, #8]
 80033be:	4b7d      	ldr	r3, [pc, #500]	; (80035b4 <HAL_RCC_OscConfig+0x470>)
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	4a7c      	ldr	r2, [pc, #496]	; (80035b4 <HAL_RCC_OscConfig+0x470>)
 80033c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033c8:	6413      	str	r3, [r2, #64]	; 0x40
 80033ca:	4b7a      	ldr	r3, [pc, #488]	; (80035b4 <HAL_RCC_OscConfig+0x470>)
 80033cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d2:	60bb      	str	r3, [r7, #8]
 80033d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033d6:	2301      	movs	r3, #1
 80033d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033da:	4b77      	ldr	r3, [pc, #476]	; (80035b8 <HAL_RCC_OscConfig+0x474>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d118      	bne.n	8003418 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033e6:	4b74      	ldr	r3, [pc, #464]	; (80035b8 <HAL_RCC_OscConfig+0x474>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a73      	ldr	r2, [pc, #460]	; (80035b8 <HAL_RCC_OscConfig+0x474>)
 80033ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033f2:	f7fe ff2b 	bl	800224c <HAL_GetTick>
 80033f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f8:	e008      	b.n	800340c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033fa:	f7fe ff27 	bl	800224c <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	2b02      	cmp	r3, #2
 8003406:	d901      	bls.n	800340c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e10c      	b.n	8003626 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800340c:	4b6a      	ldr	r3, [pc, #424]	; (80035b8 <HAL_RCC_OscConfig+0x474>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003414:	2b00      	cmp	r3, #0
 8003416:	d0f0      	beq.n	80033fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d106      	bne.n	800342e <HAL_RCC_OscConfig+0x2ea>
 8003420:	4b64      	ldr	r3, [pc, #400]	; (80035b4 <HAL_RCC_OscConfig+0x470>)
 8003422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003424:	4a63      	ldr	r2, [pc, #396]	; (80035b4 <HAL_RCC_OscConfig+0x470>)
 8003426:	f043 0301 	orr.w	r3, r3, #1
 800342a:	6713      	str	r3, [r2, #112]	; 0x70
 800342c:	e01c      	b.n	8003468 <HAL_RCC_OscConfig+0x324>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	2b05      	cmp	r3, #5
 8003434:	d10c      	bne.n	8003450 <HAL_RCC_OscConfig+0x30c>
 8003436:	4b5f      	ldr	r3, [pc, #380]	; (80035b4 <HAL_RCC_OscConfig+0x470>)
 8003438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343a:	4a5e      	ldr	r2, [pc, #376]	; (80035b4 <HAL_RCC_OscConfig+0x470>)
 800343c:	f043 0304 	orr.w	r3, r3, #4
 8003440:	6713      	str	r3, [r2, #112]	; 0x70
 8003442:	4b5c      	ldr	r3, [pc, #368]	; (80035b4 <HAL_RCC_OscConfig+0x470>)
 8003444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003446:	4a5b      	ldr	r2, [pc, #364]	; (80035b4 <HAL_RCC_OscConfig+0x470>)
 8003448:	f043 0301 	orr.w	r3, r3, #1
 800344c:	6713      	str	r3, [r2, #112]	; 0x70
 800344e:	e00b      	b.n	8003468 <HAL_RCC_OscConfig+0x324>
 8003450:	4b58      	ldr	r3, [pc, #352]	; (80035b4 <HAL_RCC_OscConfig+0x470>)
 8003452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003454:	4a57      	ldr	r2, [pc, #348]	; (80035b4 <HAL_RCC_OscConfig+0x470>)
 8003456:	f023 0301 	bic.w	r3, r3, #1
 800345a:	6713      	str	r3, [r2, #112]	; 0x70
 800345c:	4b55      	ldr	r3, [pc, #340]	; (80035b4 <HAL_RCC_OscConfig+0x470>)
 800345e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003460:	4a54      	ldr	r2, [pc, #336]	; (80035b4 <HAL_RCC_OscConfig+0x470>)
 8003462:	f023 0304 	bic.w	r3, r3, #4
 8003466:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d015      	beq.n	800349c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003470:	f7fe feec 	bl	800224c <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003476:	e00a      	b.n	800348e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003478:	f7fe fee8 	bl	800224c <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	f241 3288 	movw	r2, #5000	; 0x1388
 8003486:	4293      	cmp	r3, r2
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e0cb      	b.n	8003626 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800348e:	4b49      	ldr	r3, [pc, #292]	; (80035b4 <HAL_RCC_OscConfig+0x470>)
 8003490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d0ee      	beq.n	8003478 <HAL_RCC_OscConfig+0x334>
 800349a:	e014      	b.n	80034c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800349c:	f7fe fed6 	bl	800224c <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034a2:	e00a      	b.n	80034ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034a4:	f7fe fed2 	bl	800224c <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e0b5      	b.n	8003626 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ba:	4b3e      	ldr	r3, [pc, #248]	; (80035b4 <HAL_RCC_OscConfig+0x470>)
 80034bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1ee      	bne.n	80034a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034c6:	7dfb      	ldrb	r3, [r7, #23]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d105      	bne.n	80034d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034cc:	4b39      	ldr	r3, [pc, #228]	; (80035b4 <HAL_RCC_OscConfig+0x470>)
 80034ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d0:	4a38      	ldr	r2, [pc, #224]	; (80035b4 <HAL_RCC_OscConfig+0x470>)
 80034d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f000 80a1 	beq.w	8003624 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034e2:	4b34      	ldr	r3, [pc, #208]	; (80035b4 <HAL_RCC_OscConfig+0x470>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f003 030c 	and.w	r3, r3, #12
 80034ea:	2b08      	cmp	r3, #8
 80034ec:	d05c      	beq.n	80035a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d141      	bne.n	800357a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034f6:	4b31      	ldr	r3, [pc, #196]	; (80035bc <HAL_RCC_OscConfig+0x478>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034fc:	f7fe fea6 	bl	800224c <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003502:	e008      	b.n	8003516 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003504:	f7fe fea2 	bl	800224c <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e087      	b.n	8003626 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003516:	4b27      	ldr	r3, [pc, #156]	; (80035b4 <HAL_RCC_OscConfig+0x470>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1f0      	bne.n	8003504 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	69da      	ldr	r2, [r3, #28]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a1b      	ldr	r3, [r3, #32]
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003530:	019b      	lsls	r3, r3, #6
 8003532:	431a      	orrs	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003538:	085b      	lsrs	r3, r3, #1
 800353a:	3b01      	subs	r3, #1
 800353c:	041b      	lsls	r3, r3, #16
 800353e:	431a      	orrs	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003544:	061b      	lsls	r3, r3, #24
 8003546:	491b      	ldr	r1, [pc, #108]	; (80035b4 <HAL_RCC_OscConfig+0x470>)
 8003548:	4313      	orrs	r3, r2
 800354a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800354c:	4b1b      	ldr	r3, [pc, #108]	; (80035bc <HAL_RCC_OscConfig+0x478>)
 800354e:	2201      	movs	r2, #1
 8003550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003552:	f7fe fe7b 	bl	800224c <HAL_GetTick>
 8003556:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003558:	e008      	b.n	800356c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800355a:	f7fe fe77 	bl	800224c <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	2b02      	cmp	r3, #2
 8003566:	d901      	bls.n	800356c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e05c      	b.n	8003626 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800356c:	4b11      	ldr	r3, [pc, #68]	; (80035b4 <HAL_RCC_OscConfig+0x470>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d0f0      	beq.n	800355a <HAL_RCC_OscConfig+0x416>
 8003578:	e054      	b.n	8003624 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800357a:	4b10      	ldr	r3, [pc, #64]	; (80035bc <HAL_RCC_OscConfig+0x478>)
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003580:	f7fe fe64 	bl	800224c <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003586:	e008      	b.n	800359a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003588:	f7fe fe60 	bl	800224c <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e045      	b.n	8003626 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800359a:	4b06      	ldr	r3, [pc, #24]	; (80035b4 <HAL_RCC_OscConfig+0x470>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1f0      	bne.n	8003588 <HAL_RCC_OscConfig+0x444>
 80035a6:	e03d      	b.n	8003624 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d107      	bne.n	80035c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e038      	b.n	8003626 <HAL_RCC_OscConfig+0x4e2>
 80035b4:	40023800 	.word	0x40023800
 80035b8:	40007000 	.word	0x40007000
 80035bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035c0:	4b1b      	ldr	r3, [pc, #108]	; (8003630 <HAL_RCC_OscConfig+0x4ec>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d028      	beq.n	8003620 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035d8:	429a      	cmp	r2, r3
 80035da:	d121      	bne.n	8003620 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d11a      	bne.n	8003620 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035f0:	4013      	ands	r3, r2
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d111      	bne.n	8003620 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003606:	085b      	lsrs	r3, r3, #1
 8003608:	3b01      	subs	r3, #1
 800360a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800360c:	429a      	cmp	r2, r3
 800360e:	d107      	bne.n	8003620 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800361c:	429a      	cmp	r2, r3
 800361e:	d001      	beq.n	8003624 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e000      	b.n	8003626 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3718      	adds	r7, #24
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	40023800 	.word	0x40023800

08003634 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d101      	bne.n	8003648 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e0cc      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003648:	4b68      	ldr	r3, [pc, #416]	; (80037ec <HAL_RCC_ClockConfig+0x1b8>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	429a      	cmp	r2, r3
 8003654:	d90c      	bls.n	8003670 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003656:	4b65      	ldr	r3, [pc, #404]	; (80037ec <HAL_RCC_ClockConfig+0x1b8>)
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	b2d2      	uxtb	r2, r2
 800365c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800365e:	4b63      	ldr	r3, [pc, #396]	; (80037ec <HAL_RCC_ClockConfig+0x1b8>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0307 	and.w	r3, r3, #7
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	429a      	cmp	r2, r3
 800366a:	d001      	beq.n	8003670 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e0b8      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d020      	beq.n	80036be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b00      	cmp	r3, #0
 8003686:	d005      	beq.n	8003694 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003688:	4b59      	ldr	r3, [pc, #356]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	4a58      	ldr	r2, [pc, #352]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 800368e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003692:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0308 	and.w	r3, r3, #8
 800369c:	2b00      	cmp	r3, #0
 800369e:	d005      	beq.n	80036ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036a0:	4b53      	ldr	r3, [pc, #332]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	4a52      	ldr	r2, [pc, #328]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80036a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036ac:	4b50      	ldr	r3, [pc, #320]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	494d      	ldr	r1, [pc, #308]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d044      	beq.n	8003754 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d107      	bne.n	80036e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036d2:	4b47      	ldr	r3, [pc, #284]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d119      	bne.n	8003712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e07f      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d003      	beq.n	80036f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036ee:	2b03      	cmp	r3, #3
 80036f0:	d107      	bne.n	8003702 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036f2:	4b3f      	ldr	r3, [pc, #252]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d109      	bne.n	8003712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e06f      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003702:	4b3b      	ldr	r3, [pc, #236]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e067      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003712:	4b37      	ldr	r3, [pc, #220]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f023 0203 	bic.w	r2, r3, #3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	4934      	ldr	r1, [pc, #208]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003720:	4313      	orrs	r3, r2
 8003722:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003724:	f7fe fd92 	bl	800224c <HAL_GetTick>
 8003728:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800372a:	e00a      	b.n	8003742 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800372c:	f7fe fd8e 	bl	800224c <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	f241 3288 	movw	r2, #5000	; 0x1388
 800373a:	4293      	cmp	r3, r2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e04f      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003742:	4b2b      	ldr	r3, [pc, #172]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f003 020c 	and.w	r2, r3, #12
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	429a      	cmp	r2, r3
 8003752:	d1eb      	bne.n	800372c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003754:	4b25      	ldr	r3, [pc, #148]	; (80037ec <HAL_RCC_ClockConfig+0x1b8>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0307 	and.w	r3, r3, #7
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	429a      	cmp	r2, r3
 8003760:	d20c      	bcs.n	800377c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003762:	4b22      	ldr	r3, [pc, #136]	; (80037ec <HAL_RCC_ClockConfig+0x1b8>)
 8003764:	683a      	ldr	r2, [r7, #0]
 8003766:	b2d2      	uxtb	r2, r2
 8003768:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800376a:	4b20      	ldr	r3, [pc, #128]	; (80037ec <HAL_RCC_ClockConfig+0x1b8>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0307 	and.w	r3, r3, #7
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	429a      	cmp	r2, r3
 8003776:	d001      	beq.n	800377c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e032      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0304 	and.w	r3, r3, #4
 8003784:	2b00      	cmp	r3, #0
 8003786:	d008      	beq.n	800379a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003788:	4b19      	ldr	r3, [pc, #100]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	4916      	ldr	r1, [pc, #88]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003796:	4313      	orrs	r3, r2
 8003798:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0308 	and.w	r3, r3, #8
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d009      	beq.n	80037ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037a6:	4b12      	ldr	r3, [pc, #72]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	00db      	lsls	r3, r3, #3
 80037b4:	490e      	ldr	r1, [pc, #56]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037ba:	f000 f821 	bl	8003800 <HAL_RCC_GetSysClockFreq>
 80037be:	4602      	mov	r2, r0
 80037c0:	4b0b      	ldr	r3, [pc, #44]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	091b      	lsrs	r3, r3, #4
 80037c6:	f003 030f 	and.w	r3, r3, #15
 80037ca:	490a      	ldr	r1, [pc, #40]	; (80037f4 <HAL_RCC_ClockConfig+0x1c0>)
 80037cc:	5ccb      	ldrb	r3, [r1, r3]
 80037ce:	fa22 f303 	lsr.w	r3, r2, r3
 80037d2:	4a09      	ldr	r2, [pc, #36]	; (80037f8 <HAL_RCC_ClockConfig+0x1c4>)
 80037d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037d6:	4b09      	ldr	r3, [pc, #36]	; (80037fc <HAL_RCC_ClockConfig+0x1c8>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4618      	mov	r0, r3
 80037dc:	f7fe fcf2 	bl	80021c4 <HAL_InitTick>

  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	40023c00 	.word	0x40023c00
 80037f0:	40023800 	.word	0x40023800
 80037f4:	08006154 	.word	0x08006154
 80037f8:	20000000 	.word	0x20000000
 80037fc:	20000004 	.word	0x20000004

08003800 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003800:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003804:	b094      	sub	sp, #80	; 0x50
 8003806:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003808:	2300      	movs	r3, #0
 800380a:	647b      	str	r3, [r7, #68]	; 0x44
 800380c:	2300      	movs	r3, #0
 800380e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003810:	2300      	movs	r3, #0
 8003812:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003814:	2300      	movs	r3, #0
 8003816:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003818:	4b79      	ldr	r3, [pc, #484]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x200>)
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f003 030c 	and.w	r3, r3, #12
 8003820:	2b08      	cmp	r3, #8
 8003822:	d00d      	beq.n	8003840 <HAL_RCC_GetSysClockFreq+0x40>
 8003824:	2b08      	cmp	r3, #8
 8003826:	f200 80e1 	bhi.w	80039ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800382a:	2b00      	cmp	r3, #0
 800382c:	d002      	beq.n	8003834 <HAL_RCC_GetSysClockFreq+0x34>
 800382e:	2b04      	cmp	r3, #4
 8003830:	d003      	beq.n	800383a <HAL_RCC_GetSysClockFreq+0x3a>
 8003832:	e0db      	b.n	80039ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003834:	4b73      	ldr	r3, [pc, #460]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x204>)
 8003836:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003838:	e0db      	b.n	80039f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800383a:	4b73      	ldr	r3, [pc, #460]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x208>)
 800383c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800383e:	e0d8      	b.n	80039f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003840:	4b6f      	ldr	r3, [pc, #444]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x200>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003848:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800384a:	4b6d      	ldr	r3, [pc, #436]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x200>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d063      	beq.n	800391e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003856:	4b6a      	ldr	r3, [pc, #424]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x200>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	099b      	lsrs	r3, r3, #6
 800385c:	2200      	movs	r2, #0
 800385e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003860:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003864:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003868:	633b      	str	r3, [r7, #48]	; 0x30
 800386a:	2300      	movs	r3, #0
 800386c:	637b      	str	r3, [r7, #52]	; 0x34
 800386e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003872:	4622      	mov	r2, r4
 8003874:	462b      	mov	r3, r5
 8003876:	f04f 0000 	mov.w	r0, #0
 800387a:	f04f 0100 	mov.w	r1, #0
 800387e:	0159      	lsls	r1, r3, #5
 8003880:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003884:	0150      	lsls	r0, r2, #5
 8003886:	4602      	mov	r2, r0
 8003888:	460b      	mov	r3, r1
 800388a:	4621      	mov	r1, r4
 800388c:	1a51      	subs	r1, r2, r1
 800388e:	6139      	str	r1, [r7, #16]
 8003890:	4629      	mov	r1, r5
 8003892:	eb63 0301 	sbc.w	r3, r3, r1
 8003896:	617b      	str	r3, [r7, #20]
 8003898:	f04f 0200 	mov.w	r2, #0
 800389c:	f04f 0300 	mov.w	r3, #0
 80038a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038a4:	4659      	mov	r1, fp
 80038a6:	018b      	lsls	r3, r1, #6
 80038a8:	4651      	mov	r1, sl
 80038aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038ae:	4651      	mov	r1, sl
 80038b0:	018a      	lsls	r2, r1, #6
 80038b2:	4651      	mov	r1, sl
 80038b4:	ebb2 0801 	subs.w	r8, r2, r1
 80038b8:	4659      	mov	r1, fp
 80038ba:	eb63 0901 	sbc.w	r9, r3, r1
 80038be:	f04f 0200 	mov.w	r2, #0
 80038c2:	f04f 0300 	mov.w	r3, #0
 80038c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038d2:	4690      	mov	r8, r2
 80038d4:	4699      	mov	r9, r3
 80038d6:	4623      	mov	r3, r4
 80038d8:	eb18 0303 	adds.w	r3, r8, r3
 80038dc:	60bb      	str	r3, [r7, #8]
 80038de:	462b      	mov	r3, r5
 80038e0:	eb49 0303 	adc.w	r3, r9, r3
 80038e4:	60fb      	str	r3, [r7, #12]
 80038e6:	f04f 0200 	mov.w	r2, #0
 80038ea:	f04f 0300 	mov.w	r3, #0
 80038ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80038f2:	4629      	mov	r1, r5
 80038f4:	024b      	lsls	r3, r1, #9
 80038f6:	4621      	mov	r1, r4
 80038f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80038fc:	4621      	mov	r1, r4
 80038fe:	024a      	lsls	r2, r1, #9
 8003900:	4610      	mov	r0, r2
 8003902:	4619      	mov	r1, r3
 8003904:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003906:	2200      	movs	r2, #0
 8003908:	62bb      	str	r3, [r7, #40]	; 0x28
 800390a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800390c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003910:	f7fd f93c 	bl	8000b8c <__aeabi_uldivmod>
 8003914:	4602      	mov	r2, r0
 8003916:	460b      	mov	r3, r1
 8003918:	4613      	mov	r3, r2
 800391a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800391c:	e058      	b.n	80039d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800391e:	4b38      	ldr	r3, [pc, #224]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x200>)
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	099b      	lsrs	r3, r3, #6
 8003924:	2200      	movs	r2, #0
 8003926:	4618      	mov	r0, r3
 8003928:	4611      	mov	r1, r2
 800392a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800392e:	623b      	str	r3, [r7, #32]
 8003930:	2300      	movs	r3, #0
 8003932:	627b      	str	r3, [r7, #36]	; 0x24
 8003934:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003938:	4642      	mov	r2, r8
 800393a:	464b      	mov	r3, r9
 800393c:	f04f 0000 	mov.w	r0, #0
 8003940:	f04f 0100 	mov.w	r1, #0
 8003944:	0159      	lsls	r1, r3, #5
 8003946:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800394a:	0150      	lsls	r0, r2, #5
 800394c:	4602      	mov	r2, r0
 800394e:	460b      	mov	r3, r1
 8003950:	4641      	mov	r1, r8
 8003952:	ebb2 0a01 	subs.w	sl, r2, r1
 8003956:	4649      	mov	r1, r9
 8003958:	eb63 0b01 	sbc.w	fp, r3, r1
 800395c:	f04f 0200 	mov.w	r2, #0
 8003960:	f04f 0300 	mov.w	r3, #0
 8003964:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003968:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800396c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003970:	ebb2 040a 	subs.w	r4, r2, sl
 8003974:	eb63 050b 	sbc.w	r5, r3, fp
 8003978:	f04f 0200 	mov.w	r2, #0
 800397c:	f04f 0300 	mov.w	r3, #0
 8003980:	00eb      	lsls	r3, r5, #3
 8003982:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003986:	00e2      	lsls	r2, r4, #3
 8003988:	4614      	mov	r4, r2
 800398a:	461d      	mov	r5, r3
 800398c:	4643      	mov	r3, r8
 800398e:	18e3      	adds	r3, r4, r3
 8003990:	603b      	str	r3, [r7, #0]
 8003992:	464b      	mov	r3, r9
 8003994:	eb45 0303 	adc.w	r3, r5, r3
 8003998:	607b      	str	r3, [r7, #4]
 800399a:	f04f 0200 	mov.w	r2, #0
 800399e:	f04f 0300 	mov.w	r3, #0
 80039a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039a6:	4629      	mov	r1, r5
 80039a8:	028b      	lsls	r3, r1, #10
 80039aa:	4621      	mov	r1, r4
 80039ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039b0:	4621      	mov	r1, r4
 80039b2:	028a      	lsls	r2, r1, #10
 80039b4:	4610      	mov	r0, r2
 80039b6:	4619      	mov	r1, r3
 80039b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039ba:	2200      	movs	r2, #0
 80039bc:	61bb      	str	r3, [r7, #24]
 80039be:	61fa      	str	r2, [r7, #28]
 80039c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039c4:	f7fd f8e2 	bl	8000b8c <__aeabi_uldivmod>
 80039c8:	4602      	mov	r2, r0
 80039ca:	460b      	mov	r3, r1
 80039cc:	4613      	mov	r3, r2
 80039ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039d0:	4b0b      	ldr	r3, [pc, #44]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x200>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	0c1b      	lsrs	r3, r3, #16
 80039d6:	f003 0303 	and.w	r3, r3, #3
 80039da:	3301      	adds	r3, #1
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80039e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80039e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039ea:	e002      	b.n	80039f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039ec:	4b05      	ldr	r3, [pc, #20]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x204>)
 80039ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3750      	adds	r7, #80	; 0x50
 80039f8:	46bd      	mov	sp, r7
 80039fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039fe:	bf00      	nop
 8003a00:	40023800 	.word	0x40023800
 8003a04:	00f42400 	.word	0x00f42400
 8003a08:	007a1200 	.word	0x007a1200

08003a0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a10:	4b03      	ldr	r3, [pc, #12]	; (8003a20 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a12:	681b      	ldr	r3, [r3, #0]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	20000000 	.word	0x20000000

08003a24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a28:	f7ff fff0 	bl	8003a0c <HAL_RCC_GetHCLKFreq>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	4b05      	ldr	r3, [pc, #20]	; (8003a44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	0a9b      	lsrs	r3, r3, #10
 8003a34:	f003 0307 	and.w	r3, r3, #7
 8003a38:	4903      	ldr	r1, [pc, #12]	; (8003a48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a3a:	5ccb      	ldrb	r3, [r1, r3]
 8003a3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	40023800 	.word	0x40023800
 8003a48:	08006164 	.word	0x08006164

08003a4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a50:	f7ff ffdc 	bl	8003a0c <HAL_RCC_GetHCLKFreq>
 8003a54:	4602      	mov	r2, r0
 8003a56:	4b05      	ldr	r3, [pc, #20]	; (8003a6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	0b5b      	lsrs	r3, r3, #13
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	4903      	ldr	r1, [pc, #12]	; (8003a70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a62:	5ccb      	ldrb	r3, [r1, r3]
 8003a64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	40023800 	.word	0x40023800
 8003a70:	08006164 	.word	0x08006164

08003a74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e041      	b.n	8003b0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d106      	bne.n	8003aa0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f7fe f9ea 	bl	8001e74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	3304      	adds	r3, #4
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	4610      	mov	r0, r2
 8003ab4:	f000 fa10 	bl	8003ed8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b082      	sub	sp, #8
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d101      	bne.n	8003b24 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e041      	b.n	8003ba8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d106      	bne.n	8003b3e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 f839 	bl	8003bb0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2202      	movs	r2, #2
 8003b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	3304      	adds	r3, #4
 8003b4e:	4619      	mov	r1, r3
 8003b50:	4610      	mov	r0, r2
 8003b52:	f000 f9c1 	bl	8003ed8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2201      	movs	r2, #1
 8003b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3708      	adds	r7, #8
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d101      	bne.n	8003be2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003bde:	2302      	movs	r3, #2
 8003be0:	e0ae      	b.n	8003d40 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2b0c      	cmp	r3, #12
 8003bee:	f200 809f 	bhi.w	8003d30 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003bf2:	a201      	add	r2, pc, #4	; (adr r2, 8003bf8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf8:	08003c2d 	.word	0x08003c2d
 8003bfc:	08003d31 	.word	0x08003d31
 8003c00:	08003d31 	.word	0x08003d31
 8003c04:	08003d31 	.word	0x08003d31
 8003c08:	08003c6d 	.word	0x08003c6d
 8003c0c:	08003d31 	.word	0x08003d31
 8003c10:	08003d31 	.word	0x08003d31
 8003c14:	08003d31 	.word	0x08003d31
 8003c18:	08003caf 	.word	0x08003caf
 8003c1c:	08003d31 	.word	0x08003d31
 8003c20:	08003d31 	.word	0x08003d31
 8003c24:	08003d31 	.word	0x08003d31
 8003c28:	08003cef 	.word	0x08003cef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68b9      	ldr	r1, [r7, #8]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f000 f9d0 	bl	8003fd8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	699a      	ldr	r2, [r3, #24]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f042 0208 	orr.w	r2, r2, #8
 8003c46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	699a      	ldr	r2, [r3, #24]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 0204 	bic.w	r2, r2, #4
 8003c56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6999      	ldr	r1, [r3, #24]
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	691a      	ldr	r2, [r3, #16]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	619a      	str	r2, [r3, #24]
      break;
 8003c6a:	e064      	b.n	8003d36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68b9      	ldr	r1, [r7, #8]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f000 fa16 	bl	80040a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	699a      	ldr	r2, [r3, #24]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	699a      	ldr	r2, [r3, #24]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6999      	ldr	r1, [r3, #24]
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	021a      	lsls	r2, r3, #8
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	619a      	str	r2, [r3, #24]
      break;
 8003cac:	e043      	b.n	8003d36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68b9      	ldr	r1, [r7, #8]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f000 fa61 	bl	800417c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	69da      	ldr	r2, [r3, #28]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f042 0208 	orr.w	r2, r2, #8
 8003cc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	69da      	ldr	r2, [r3, #28]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 0204 	bic.w	r2, r2, #4
 8003cd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	69d9      	ldr	r1, [r3, #28]
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	691a      	ldr	r2, [r3, #16]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	61da      	str	r2, [r3, #28]
      break;
 8003cec:	e023      	b.n	8003d36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68b9      	ldr	r1, [r7, #8]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f000 faab 	bl	8004250 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	69da      	ldr	r2, [r3, #28]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	69da      	ldr	r2, [r3, #28]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	69d9      	ldr	r1, [r3, #28]
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	021a      	lsls	r2, r3, #8
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	61da      	str	r2, [r3, #28]
      break;
 8003d2e:	e002      	b.n	8003d36 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	75fb      	strb	r3, [r7, #23]
      break;
 8003d34:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3718      	adds	r7, #24
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d52:	2300      	movs	r3, #0
 8003d54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d101      	bne.n	8003d64 <HAL_TIM_ConfigClockSource+0x1c>
 8003d60:	2302      	movs	r3, #2
 8003d62:	e0b4      	b.n	8003ece <HAL_TIM_ConfigClockSource+0x186>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2202      	movs	r2, #2
 8003d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68ba      	ldr	r2, [r7, #8]
 8003d92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d9c:	d03e      	beq.n	8003e1c <HAL_TIM_ConfigClockSource+0xd4>
 8003d9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003da2:	f200 8087 	bhi.w	8003eb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003da6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003daa:	f000 8086 	beq.w	8003eba <HAL_TIM_ConfigClockSource+0x172>
 8003dae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003db2:	d87f      	bhi.n	8003eb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003db4:	2b70      	cmp	r3, #112	; 0x70
 8003db6:	d01a      	beq.n	8003dee <HAL_TIM_ConfigClockSource+0xa6>
 8003db8:	2b70      	cmp	r3, #112	; 0x70
 8003dba:	d87b      	bhi.n	8003eb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003dbc:	2b60      	cmp	r3, #96	; 0x60
 8003dbe:	d050      	beq.n	8003e62 <HAL_TIM_ConfigClockSource+0x11a>
 8003dc0:	2b60      	cmp	r3, #96	; 0x60
 8003dc2:	d877      	bhi.n	8003eb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003dc4:	2b50      	cmp	r3, #80	; 0x50
 8003dc6:	d03c      	beq.n	8003e42 <HAL_TIM_ConfigClockSource+0xfa>
 8003dc8:	2b50      	cmp	r3, #80	; 0x50
 8003dca:	d873      	bhi.n	8003eb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003dcc:	2b40      	cmp	r3, #64	; 0x40
 8003dce:	d058      	beq.n	8003e82 <HAL_TIM_ConfigClockSource+0x13a>
 8003dd0:	2b40      	cmp	r3, #64	; 0x40
 8003dd2:	d86f      	bhi.n	8003eb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003dd4:	2b30      	cmp	r3, #48	; 0x30
 8003dd6:	d064      	beq.n	8003ea2 <HAL_TIM_ConfigClockSource+0x15a>
 8003dd8:	2b30      	cmp	r3, #48	; 0x30
 8003dda:	d86b      	bhi.n	8003eb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ddc:	2b20      	cmp	r3, #32
 8003dde:	d060      	beq.n	8003ea2 <HAL_TIM_ConfigClockSource+0x15a>
 8003de0:	2b20      	cmp	r3, #32
 8003de2:	d867      	bhi.n	8003eb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d05c      	beq.n	8003ea2 <HAL_TIM_ConfigClockSource+0x15a>
 8003de8:	2b10      	cmp	r3, #16
 8003dea:	d05a      	beq.n	8003ea2 <HAL_TIM_ConfigClockSource+0x15a>
 8003dec:	e062      	b.n	8003eb4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6818      	ldr	r0, [r3, #0]
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	6899      	ldr	r1, [r3, #8]
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	f000 faf1 	bl	80043e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68ba      	ldr	r2, [r7, #8]
 8003e18:	609a      	str	r2, [r3, #8]
      break;
 8003e1a:	e04f      	b.n	8003ebc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6818      	ldr	r0, [r3, #0]
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	6899      	ldr	r1, [r3, #8]
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	685a      	ldr	r2, [r3, #4]
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	f000 fada 	bl	80043e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689a      	ldr	r2, [r3, #8]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e3e:	609a      	str	r2, [r3, #8]
      break;
 8003e40:	e03c      	b.n	8003ebc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6818      	ldr	r0, [r3, #0]
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	6859      	ldr	r1, [r3, #4]
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	461a      	mov	r2, r3
 8003e50:	f000 fa4e 	bl	80042f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2150      	movs	r1, #80	; 0x50
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 faa7 	bl	80043ae <TIM_ITRx_SetConfig>
      break;
 8003e60:	e02c      	b.n	8003ebc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6818      	ldr	r0, [r3, #0]
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	6859      	ldr	r1, [r3, #4]
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	461a      	mov	r2, r3
 8003e70:	f000 fa6d 	bl	800434e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2160      	movs	r1, #96	; 0x60
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f000 fa97 	bl	80043ae <TIM_ITRx_SetConfig>
      break;
 8003e80:	e01c      	b.n	8003ebc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6818      	ldr	r0, [r3, #0]
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	6859      	ldr	r1, [r3, #4]
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	f000 fa2e 	bl	80042f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2140      	movs	r1, #64	; 0x40
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 fa87 	bl	80043ae <TIM_ITRx_SetConfig>
      break;
 8003ea0:	e00c      	b.n	8003ebc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4619      	mov	r1, r3
 8003eac:	4610      	mov	r0, r2
 8003eae:	f000 fa7e 	bl	80043ae <TIM_ITRx_SetConfig>
      break;
 8003eb2:	e003      	b.n	8003ebc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	73fb      	strb	r3, [r7, #15]
      break;
 8003eb8:	e000      	b.n	8003ebc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003eba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
	...

08003ed8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a34      	ldr	r2, [pc, #208]	; (8003fbc <TIM_Base_SetConfig+0xe4>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d00f      	beq.n	8003f10 <TIM_Base_SetConfig+0x38>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ef6:	d00b      	beq.n	8003f10 <TIM_Base_SetConfig+0x38>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a31      	ldr	r2, [pc, #196]	; (8003fc0 <TIM_Base_SetConfig+0xe8>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d007      	beq.n	8003f10 <TIM_Base_SetConfig+0x38>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a30      	ldr	r2, [pc, #192]	; (8003fc4 <TIM_Base_SetConfig+0xec>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d003      	beq.n	8003f10 <TIM_Base_SetConfig+0x38>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a2f      	ldr	r2, [pc, #188]	; (8003fc8 <TIM_Base_SetConfig+0xf0>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d108      	bne.n	8003f22 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a25      	ldr	r2, [pc, #148]	; (8003fbc <TIM_Base_SetConfig+0xe4>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d01b      	beq.n	8003f62 <TIM_Base_SetConfig+0x8a>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f30:	d017      	beq.n	8003f62 <TIM_Base_SetConfig+0x8a>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a22      	ldr	r2, [pc, #136]	; (8003fc0 <TIM_Base_SetConfig+0xe8>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d013      	beq.n	8003f62 <TIM_Base_SetConfig+0x8a>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a21      	ldr	r2, [pc, #132]	; (8003fc4 <TIM_Base_SetConfig+0xec>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d00f      	beq.n	8003f62 <TIM_Base_SetConfig+0x8a>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a20      	ldr	r2, [pc, #128]	; (8003fc8 <TIM_Base_SetConfig+0xf0>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d00b      	beq.n	8003f62 <TIM_Base_SetConfig+0x8a>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a1f      	ldr	r2, [pc, #124]	; (8003fcc <TIM_Base_SetConfig+0xf4>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d007      	beq.n	8003f62 <TIM_Base_SetConfig+0x8a>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a1e      	ldr	r2, [pc, #120]	; (8003fd0 <TIM_Base_SetConfig+0xf8>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d003      	beq.n	8003f62 <TIM_Base_SetConfig+0x8a>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a1d      	ldr	r2, [pc, #116]	; (8003fd4 <TIM_Base_SetConfig+0xfc>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d108      	bne.n	8003f74 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	689a      	ldr	r2, [r3, #8]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a08      	ldr	r2, [pc, #32]	; (8003fbc <TIM_Base_SetConfig+0xe4>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d103      	bne.n	8003fa8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	691a      	ldr	r2, [r3, #16]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	615a      	str	r2, [r3, #20]
}
 8003fae:	bf00      	nop
 8003fb0:	3714      	adds	r7, #20
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	40010000 	.word	0x40010000
 8003fc0:	40000400 	.word	0x40000400
 8003fc4:	40000800 	.word	0x40000800
 8003fc8:	40000c00 	.word	0x40000c00
 8003fcc:	40014000 	.word	0x40014000
 8003fd0:	40014400 	.word	0x40014400
 8003fd4:	40014800 	.word	0x40014800

08003fd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b087      	sub	sp, #28
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
 8003fe6:	f023 0201 	bic.w	r2, r3, #1
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f023 0303 	bic.w	r3, r3, #3
 800400e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	4313      	orrs	r3, r2
 8004018:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	f023 0302 	bic.w	r3, r3, #2
 8004020:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	4313      	orrs	r3, r2
 800402a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a1c      	ldr	r2, [pc, #112]	; (80040a0 <TIM_OC1_SetConfig+0xc8>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d10c      	bne.n	800404e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	f023 0308 	bic.w	r3, r3, #8
 800403a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	697a      	ldr	r2, [r7, #20]
 8004042:	4313      	orrs	r3, r2
 8004044:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	f023 0304 	bic.w	r3, r3, #4
 800404c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a13      	ldr	r2, [pc, #76]	; (80040a0 <TIM_OC1_SetConfig+0xc8>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d111      	bne.n	800407a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800405c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004064:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	4313      	orrs	r3, r2
 800406e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	4313      	orrs	r3, r2
 8004078:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	685a      	ldr	r2, [r3, #4]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	697a      	ldr	r2, [r7, #20]
 8004092:	621a      	str	r2, [r3, #32]
}
 8004094:	bf00      	nop
 8004096:	371c      	adds	r7, #28
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	40010000 	.word	0x40010000

080040a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	f023 0210 	bic.w	r2, r3, #16
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	021b      	lsls	r3, r3, #8
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	f023 0320 	bic.w	r3, r3, #32
 80040ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	011b      	lsls	r3, r3, #4
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a1e      	ldr	r2, [pc, #120]	; (8004178 <TIM_OC2_SetConfig+0xd4>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d10d      	bne.n	8004120 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800410a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	011b      	lsls	r3, r3, #4
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	4313      	orrs	r3, r2
 8004116:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800411e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a15      	ldr	r2, [pc, #84]	; (8004178 <TIM_OC2_SetConfig+0xd4>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d113      	bne.n	8004150 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800412e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004136:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	695b      	ldr	r3, [r3, #20]
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	4313      	orrs	r3, r2
 8004142:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	4313      	orrs	r3, r2
 800414e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	621a      	str	r2, [r3, #32]
}
 800416a:	bf00      	nop
 800416c:	371c      	adds	r7, #28
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	40010000 	.word	0x40010000

0800417c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800417c:	b480      	push	{r7}
 800417e:	b087      	sub	sp, #28
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	69db      	ldr	r3, [r3, #28]
 80041a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f023 0303 	bic.w	r3, r3, #3
 80041b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	021b      	lsls	r3, r3, #8
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a1d      	ldr	r2, [pc, #116]	; (800424c <TIM_OC3_SetConfig+0xd0>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d10d      	bne.n	80041f6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	021b      	lsls	r3, r3, #8
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a14      	ldr	r2, [pc, #80]	; (800424c <TIM_OC3_SetConfig+0xd0>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d113      	bne.n	8004226 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004204:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800420c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	011b      	lsls	r3, r3, #4
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	4313      	orrs	r3, r2
 8004218:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	011b      	lsls	r3, r3, #4
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	4313      	orrs	r3, r2
 8004224:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	621a      	str	r2, [r3, #32]
}
 8004240:	bf00      	nop
 8004242:	371c      	adds	r7, #28
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	40010000 	.word	0x40010000

08004250 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004250:	b480      	push	{r7}
 8004252:	b087      	sub	sp, #28
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	69db      	ldr	r3, [r3, #28]
 8004276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800427e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004286:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	021b      	lsls	r3, r3, #8
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	4313      	orrs	r3, r2
 8004292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800429a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	031b      	lsls	r3, r3, #12
 80042a2:	693a      	ldr	r2, [r7, #16]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a10      	ldr	r2, [pc, #64]	; (80042ec <TIM_OC4_SetConfig+0x9c>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d109      	bne.n	80042c4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	695b      	ldr	r3, [r3, #20]
 80042bc:	019b      	lsls	r3, r3, #6
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	697a      	ldr	r2, [r7, #20]
 80042c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	685a      	ldr	r2, [r3, #4]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	621a      	str	r2, [r3, #32]
}
 80042de:	bf00      	nop
 80042e0:	371c      	adds	r7, #28
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	40010000 	.word	0x40010000

080042f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b087      	sub	sp, #28
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6a1b      	ldr	r3, [r3, #32]
 8004300:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	f023 0201 	bic.w	r2, r3, #1
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800431a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	011b      	lsls	r3, r3, #4
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	4313      	orrs	r3, r2
 8004324:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f023 030a 	bic.w	r3, r3, #10
 800432c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	4313      	orrs	r3, r2
 8004334:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	693a      	ldr	r2, [r7, #16]
 800433a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	621a      	str	r2, [r3, #32]
}
 8004342:	bf00      	nop
 8004344:	371c      	adds	r7, #28
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr

0800434e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800434e:	b480      	push	{r7}
 8004350:	b087      	sub	sp, #28
 8004352:	af00      	add	r7, sp, #0
 8004354:	60f8      	str	r0, [r7, #12]
 8004356:	60b9      	str	r1, [r7, #8]
 8004358:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	f023 0210 	bic.w	r2, r3, #16
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6a1b      	ldr	r3, [r3, #32]
 8004370:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004378:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	031b      	lsls	r3, r3, #12
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	4313      	orrs	r3, r2
 8004382:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800438a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	011b      	lsls	r3, r3, #4
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	4313      	orrs	r3, r2
 8004394:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	697a      	ldr	r2, [r7, #20]
 800439a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	621a      	str	r2, [r3, #32]
}
 80043a2:	bf00      	nop
 80043a4:	371c      	adds	r7, #28
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr

080043ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b085      	sub	sp, #20
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
 80043b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043c6:	683a      	ldr	r2, [r7, #0]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	f043 0307 	orr.w	r3, r3, #7
 80043d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	609a      	str	r2, [r3, #8]
}
 80043d8:	bf00      	nop
 80043da:	3714      	adds	r7, #20
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b087      	sub	sp, #28
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]
 80043f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	021a      	lsls	r2, r3, #8
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	431a      	orrs	r2, r3
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	4313      	orrs	r3, r2
 800440c:	697a      	ldr	r2, [r7, #20]
 800440e:	4313      	orrs	r3, r2
 8004410:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	697a      	ldr	r2, [r7, #20]
 8004416:	609a      	str	r2, [r3, #8]
}
 8004418:	bf00      	nop
 800441a:	371c      	adds	r7, #28
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004434:	2b01      	cmp	r3, #1
 8004436:	d101      	bne.n	800443c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004438:	2302      	movs	r3, #2
 800443a:	e050      	b.n	80044de <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2202      	movs	r2, #2
 8004448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004462:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	4313      	orrs	r3, r2
 800446c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a1c      	ldr	r2, [pc, #112]	; (80044ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d018      	beq.n	80044b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004488:	d013      	beq.n	80044b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a18      	ldr	r2, [pc, #96]	; (80044f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d00e      	beq.n	80044b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a16      	ldr	r2, [pc, #88]	; (80044f4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d009      	beq.n	80044b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a15      	ldr	r2, [pc, #84]	; (80044f8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d004      	beq.n	80044b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a13      	ldr	r2, [pc, #76]	; (80044fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d10c      	bne.n	80044cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	68ba      	ldr	r2, [r7, #8]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68ba      	ldr	r2, [r7, #8]
 80044ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3714      	adds	r7, #20
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	40010000 	.word	0x40010000
 80044f0:	40000400 	.word	0x40000400
 80044f4:	40000800 	.word	0x40000800
 80044f8:	40000c00 	.word	0x40000c00
 80044fc:	40014000 	.word	0x40014000

08004500 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e03f      	b.n	8004592 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d106      	bne.n	800452c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f7fd fd00 	bl	8001f2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2224      	movs	r2, #36	; 0x24
 8004530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68da      	ldr	r2, [r3, #12]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004542:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 fddf 	bl	8005108 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	691a      	ldr	r2, [r3, #16]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004558:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	695a      	ldr	r2, [r3, #20]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004568:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68da      	ldr	r2, [r3, #12]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004578:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2220      	movs	r2, #32
 8004584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2220      	movs	r2, #32
 800458c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800459a:	b580      	push	{r7, lr}
 800459c:	b08a      	sub	sp, #40	; 0x28
 800459e:	af02      	add	r7, sp, #8
 80045a0:	60f8      	str	r0, [r7, #12]
 80045a2:	60b9      	str	r1, [r7, #8]
 80045a4:	603b      	str	r3, [r7, #0]
 80045a6:	4613      	mov	r3, r2
 80045a8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80045aa:	2300      	movs	r3, #0
 80045ac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b20      	cmp	r3, #32
 80045b8:	d17c      	bne.n	80046b4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d002      	beq.n	80045c6 <HAL_UART_Transmit+0x2c>
 80045c0:	88fb      	ldrh	r3, [r7, #6]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e075      	b.n	80046b6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d101      	bne.n	80045d8 <HAL_UART_Transmit+0x3e>
 80045d4:	2302      	movs	r3, #2
 80045d6:	e06e      	b.n	80046b6 <HAL_UART_Transmit+0x11c>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2221      	movs	r2, #33	; 0x21
 80045ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045ee:	f7fd fe2d 	bl	800224c <HAL_GetTick>
 80045f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	88fa      	ldrh	r2, [r7, #6]
 80045f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	88fa      	ldrh	r2, [r7, #6]
 80045fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004608:	d108      	bne.n	800461c <HAL_UART_Transmit+0x82>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d104      	bne.n	800461c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004612:	2300      	movs	r3, #0
 8004614:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	61bb      	str	r3, [r7, #24]
 800461a:	e003      	b.n	8004624 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004620:	2300      	movs	r3, #0
 8004622:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800462c:	e02a      	b.n	8004684 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	9300      	str	r3, [sp, #0]
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	2200      	movs	r2, #0
 8004636:	2180      	movs	r1, #128	; 0x80
 8004638:	68f8      	ldr	r0, [r7, #12]
 800463a:	f000 fb1f 	bl	8004c7c <UART_WaitOnFlagUntilTimeout>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d001      	beq.n	8004648 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e036      	b.n	80046b6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d10b      	bne.n	8004666 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	881b      	ldrh	r3, [r3, #0]
 8004652:	461a      	mov	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800465c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	3302      	adds	r3, #2
 8004662:	61bb      	str	r3, [r7, #24]
 8004664:	e007      	b.n	8004676 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	781a      	ldrb	r2, [r3, #0]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	3301      	adds	r3, #1
 8004674:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800467a:	b29b      	uxth	r3, r3
 800467c:	3b01      	subs	r3, #1
 800467e:	b29a      	uxth	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004688:	b29b      	uxth	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1cf      	bne.n	800462e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	9300      	str	r3, [sp, #0]
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	2200      	movs	r2, #0
 8004696:	2140      	movs	r1, #64	; 0x40
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	f000 faef 	bl	8004c7c <UART_WaitOnFlagUntilTimeout>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d001      	beq.n	80046a8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e006      	b.n	80046b6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2220      	movs	r2, #32
 80046ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80046b0:	2300      	movs	r3, #0
 80046b2:	e000      	b.n	80046b6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80046b4:	2302      	movs	r3, #2
  }
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3720      	adds	r7, #32
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046be:	b580      	push	{r7, lr}
 80046c0:	b084      	sub	sp, #16
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	60f8      	str	r0, [r7, #12]
 80046c6:	60b9      	str	r1, [r7, #8]
 80046c8:	4613      	mov	r3, r2
 80046ca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	2b20      	cmp	r3, #32
 80046d6:	d11d      	bne.n	8004714 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d002      	beq.n	80046e4 <HAL_UART_Receive_IT+0x26>
 80046de:	88fb      	ldrh	r3, [r7, #6]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d101      	bne.n	80046e8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e016      	b.n	8004716 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d101      	bne.n	80046f6 <HAL_UART_Receive_IT+0x38>
 80046f2:	2302      	movs	r3, #2
 80046f4:	e00f      	b.n	8004716 <HAL_UART_Receive_IT+0x58>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004704:	88fb      	ldrh	r3, [r7, #6]
 8004706:	461a      	mov	r2, r3
 8004708:	68b9      	ldr	r1, [r7, #8]
 800470a:	68f8      	ldr	r0, [r7, #12]
 800470c:	f000 fb24 	bl	8004d58 <UART_Start_Receive_IT>
 8004710:	4603      	mov	r3, r0
 8004712:	e000      	b.n	8004716 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004714:	2302      	movs	r3, #2
  }
}
 8004716:	4618      	mov	r0, r3
 8004718:	3710      	adds	r7, #16
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
	...

08004720 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b0ba      	sub	sp, #232	; 0xe8
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004746:	2300      	movs	r3, #0
 8004748:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800474c:	2300      	movs	r3, #0
 800474e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004756:	f003 030f 	and.w	r3, r3, #15
 800475a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800475e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004762:	2b00      	cmp	r3, #0
 8004764:	d10f      	bne.n	8004786 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800476a:	f003 0320 	and.w	r3, r3, #32
 800476e:	2b00      	cmp	r3, #0
 8004770:	d009      	beq.n	8004786 <HAL_UART_IRQHandler+0x66>
 8004772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004776:	f003 0320 	and.w	r3, r3, #32
 800477a:	2b00      	cmp	r3, #0
 800477c:	d003      	beq.n	8004786 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 fc07 	bl	8004f92 <UART_Receive_IT>
      return;
 8004784:	e256      	b.n	8004c34 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004786:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800478a:	2b00      	cmp	r3, #0
 800478c:	f000 80de 	beq.w	800494c <HAL_UART_IRQHandler+0x22c>
 8004790:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004794:	f003 0301 	and.w	r3, r3, #1
 8004798:	2b00      	cmp	r3, #0
 800479a:	d106      	bne.n	80047aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800479c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047a0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f000 80d1 	beq.w	800494c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80047aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00b      	beq.n	80047ce <HAL_UART_IRQHandler+0xae>
 80047b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d005      	beq.n	80047ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c6:	f043 0201 	orr.w	r2, r3, #1
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047d2:	f003 0304 	and.w	r3, r3, #4
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00b      	beq.n	80047f2 <HAL_UART_IRQHandler+0xd2>
 80047da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d005      	beq.n	80047f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	f043 0202 	orr.w	r2, r3, #2
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00b      	beq.n	8004816 <HAL_UART_IRQHandler+0xf6>
 80047fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b00      	cmp	r3, #0
 8004808:	d005      	beq.n	8004816 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480e:	f043 0204 	orr.w	r2, r3, #4
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800481a:	f003 0308 	and.w	r3, r3, #8
 800481e:	2b00      	cmp	r3, #0
 8004820:	d011      	beq.n	8004846 <HAL_UART_IRQHandler+0x126>
 8004822:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004826:	f003 0320 	and.w	r3, r3, #32
 800482a:	2b00      	cmp	r3, #0
 800482c:	d105      	bne.n	800483a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800482e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	2b00      	cmp	r3, #0
 8004838:	d005      	beq.n	8004846 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483e:	f043 0208 	orr.w	r2, r3, #8
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484a:	2b00      	cmp	r3, #0
 800484c:	f000 81ed 	beq.w	8004c2a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004854:	f003 0320 	and.w	r3, r3, #32
 8004858:	2b00      	cmp	r3, #0
 800485a:	d008      	beq.n	800486e <HAL_UART_IRQHandler+0x14e>
 800485c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004860:	f003 0320 	and.w	r3, r3, #32
 8004864:	2b00      	cmp	r3, #0
 8004866:	d002      	beq.n	800486e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f000 fb92 	bl	8004f92 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004878:	2b40      	cmp	r3, #64	; 0x40
 800487a:	bf0c      	ite	eq
 800487c:	2301      	moveq	r3, #1
 800487e:	2300      	movne	r3, #0
 8004880:	b2db      	uxtb	r3, r3
 8004882:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488a:	f003 0308 	and.w	r3, r3, #8
 800488e:	2b00      	cmp	r3, #0
 8004890:	d103      	bne.n	800489a <HAL_UART_IRQHandler+0x17a>
 8004892:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004896:	2b00      	cmp	r3, #0
 8004898:	d04f      	beq.n	800493a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 fa9a 	bl	8004dd4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048aa:	2b40      	cmp	r3, #64	; 0x40
 80048ac:	d141      	bne.n	8004932 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	3314      	adds	r3, #20
 80048b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80048bc:	e853 3f00 	ldrex	r3, [r3]
 80048c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80048c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80048c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	3314      	adds	r3, #20
 80048d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80048da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80048de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80048e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80048ea:	e841 2300 	strex	r3, r2, [r1]
 80048ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80048f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1d9      	bne.n	80048ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d013      	beq.n	800492a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004906:	4a7d      	ldr	r2, [pc, #500]	; (8004afc <HAL_UART_IRQHandler+0x3dc>)
 8004908:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490e:	4618      	mov	r0, r3
 8004910:	f7fe fa3f 	bl	8002d92 <HAL_DMA_Abort_IT>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d016      	beq.n	8004948 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800491e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004924:	4610      	mov	r0, r2
 8004926:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004928:	e00e      	b.n	8004948 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 f990 	bl	8004c50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004930:	e00a      	b.n	8004948 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f98c 	bl	8004c50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004938:	e006      	b.n	8004948 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f988 	bl	8004c50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004946:	e170      	b.n	8004c2a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004948:	bf00      	nop
    return;
 800494a:	e16e      	b.n	8004c2a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004950:	2b01      	cmp	r3, #1
 8004952:	f040 814a 	bne.w	8004bea <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800495a:	f003 0310 	and.w	r3, r3, #16
 800495e:	2b00      	cmp	r3, #0
 8004960:	f000 8143 	beq.w	8004bea <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004968:	f003 0310 	and.w	r3, r3, #16
 800496c:	2b00      	cmp	r3, #0
 800496e:	f000 813c 	beq.w	8004bea <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004972:	2300      	movs	r3, #0
 8004974:	60bb      	str	r3, [r7, #8]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	60bb      	str	r3, [r7, #8]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	60bb      	str	r3, [r7, #8]
 8004986:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004992:	2b40      	cmp	r3, #64	; 0x40
 8004994:	f040 80b4 	bne.w	8004b00 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80049a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	f000 8140 	beq.w	8004c2e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80049b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80049b6:	429a      	cmp	r2, r3
 80049b8:	f080 8139 	bcs.w	8004c2e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80049c2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c8:	69db      	ldr	r3, [r3, #28]
 80049ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049ce:	f000 8088 	beq.w	8004ae2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	330c      	adds	r3, #12
 80049d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049e0:	e853 3f00 	ldrex	r3, [r3]
 80049e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80049e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	330c      	adds	r3, #12
 80049fa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80049fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a06:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004a0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a0e:	e841 2300 	strex	r3, r2, [r1]
 8004a12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004a16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1d9      	bne.n	80049d2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	3314      	adds	r3, #20
 8004a24:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a28:	e853 3f00 	ldrex	r3, [r3]
 8004a2c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004a2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a30:	f023 0301 	bic.w	r3, r3, #1
 8004a34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	3314      	adds	r3, #20
 8004a3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004a42:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004a46:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a48:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004a4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004a4e:	e841 2300 	strex	r3, r2, [r1]
 8004a52:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004a54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1e1      	bne.n	8004a1e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	3314      	adds	r3, #20
 8004a60:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a64:	e853 3f00 	ldrex	r3, [r3]
 8004a68:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004a6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	3314      	adds	r3, #20
 8004a7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004a7e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004a80:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a82:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004a84:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004a86:	e841 2300 	strex	r3, r2, [r1]
 8004a8a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004a8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1e3      	bne.n	8004a5a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2220      	movs	r2, #32
 8004a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	330c      	adds	r3, #12
 8004aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004aaa:	e853 3f00 	ldrex	r3, [r3]
 8004aae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ab0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ab2:	f023 0310 	bic.w	r3, r3, #16
 8004ab6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	330c      	adds	r3, #12
 8004ac0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004ac4:	65ba      	str	r2, [r7, #88]	; 0x58
 8004ac6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004aca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004acc:	e841 2300 	strex	r3, r2, [r1]
 8004ad0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004ad2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1e3      	bne.n	8004aa0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004adc:	4618      	mov	r0, r3
 8004ade:	f7fe f8e8 	bl	8002cb2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	4619      	mov	r1, r3
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 f8b6 	bl	8004c64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004af8:	e099      	b.n	8004c2e <HAL_UART_IRQHandler+0x50e>
 8004afa:	bf00      	nop
 8004afc:	08004e9b 	.word	0x08004e9b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	f000 808b 	beq.w	8004c32 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004b1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	f000 8086 	beq.w	8004c32 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	330c      	adds	r3, #12
 8004b2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b30:	e853 3f00 	ldrex	r3, [r3]
 8004b34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	330c      	adds	r3, #12
 8004b46:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004b4a:	647a      	str	r2, [r7, #68]	; 0x44
 8004b4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b52:	e841 2300 	strex	r3, r2, [r1]
 8004b56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1e3      	bne.n	8004b26 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	3314      	adds	r3, #20
 8004b64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b68:	e853 3f00 	ldrex	r3, [r3]
 8004b6c:	623b      	str	r3, [r7, #32]
   return(result);
 8004b6e:	6a3b      	ldr	r3, [r7, #32]
 8004b70:	f023 0301 	bic.w	r3, r3, #1
 8004b74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	3314      	adds	r3, #20
 8004b7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004b82:	633a      	str	r2, [r7, #48]	; 0x30
 8004b84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b8a:	e841 2300 	strex	r3, r2, [r1]
 8004b8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1e3      	bne.n	8004b5e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2220      	movs	r2, #32
 8004b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	330c      	adds	r3, #12
 8004baa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	e853 3f00 	ldrex	r3, [r3]
 8004bb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f023 0310 	bic.w	r3, r3, #16
 8004bba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	330c      	adds	r3, #12
 8004bc4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004bc8:	61fa      	str	r2, [r7, #28]
 8004bca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bcc:	69b9      	ldr	r1, [r7, #24]
 8004bce:	69fa      	ldr	r2, [r7, #28]
 8004bd0:	e841 2300 	strex	r3, r2, [r1]
 8004bd4:	617b      	str	r3, [r7, #20]
   return(result);
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1e3      	bne.n	8004ba4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004bdc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004be0:	4619      	mov	r1, r3
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f83e 	bl	8004c64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004be8:	e023      	b.n	8004c32 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d009      	beq.n	8004c0a <HAL_UART_IRQHandler+0x4ea>
 8004bf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d003      	beq.n	8004c0a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f95d 	bl	8004ec2 <UART_Transmit_IT>
    return;
 8004c08:	e014      	b.n	8004c34 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00e      	beq.n	8004c34 <HAL_UART_IRQHandler+0x514>
 8004c16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d008      	beq.n	8004c34 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 f99d 	bl	8004f62 <UART_EndTransmit_IT>
    return;
 8004c28:	e004      	b.n	8004c34 <HAL_UART_IRQHandler+0x514>
    return;
 8004c2a:	bf00      	nop
 8004c2c:	e002      	b.n	8004c34 <HAL_UART_IRQHandler+0x514>
      return;
 8004c2e:	bf00      	nop
 8004c30:	e000      	b.n	8004c34 <HAL_UART_IRQHandler+0x514>
      return;
 8004c32:	bf00      	nop
  }
}
 8004c34:	37e8      	adds	r7, #232	; 0xe8
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop

08004c3c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004c58:	bf00      	nop
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b090      	sub	sp, #64	; 0x40
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	603b      	str	r3, [r7, #0]
 8004c88:	4613      	mov	r3, r2
 8004c8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c8c:	e050      	b.n	8004d30 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c94:	d04c      	beq.n	8004d30 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d007      	beq.n	8004cac <UART_WaitOnFlagUntilTimeout+0x30>
 8004c9c:	f7fd fad6 	bl	800224c <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d241      	bcs.n	8004d30 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	330c      	adds	r3, #12
 8004cb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb6:	e853 3f00 	ldrex	r3, [r3]
 8004cba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	330c      	adds	r3, #12
 8004cca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ccc:	637a      	str	r2, [r7, #52]	; 0x34
 8004cce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004cd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cd4:	e841 2300 	strex	r3, r2, [r1]
 8004cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1e5      	bne.n	8004cac <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	3314      	adds	r3, #20
 8004ce6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	e853 3f00 	ldrex	r3, [r3]
 8004cee:	613b      	str	r3, [r7, #16]
   return(result);
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	f023 0301 	bic.w	r3, r3, #1
 8004cf6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	3314      	adds	r3, #20
 8004cfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d00:	623a      	str	r2, [r7, #32]
 8004d02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d04:	69f9      	ldr	r1, [r7, #28]
 8004d06:	6a3a      	ldr	r2, [r7, #32]
 8004d08:	e841 2300 	strex	r3, r2, [r1]
 8004d0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1e5      	bne.n	8004ce0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2220      	movs	r2, #32
 8004d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2220      	movs	r2, #32
 8004d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	e00f      	b.n	8004d50 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	4013      	ands	r3, r2
 8004d3a:	68ba      	ldr	r2, [r7, #8]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	bf0c      	ite	eq
 8004d40:	2301      	moveq	r3, #1
 8004d42:	2300      	movne	r3, #0
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	461a      	mov	r2, r3
 8004d48:	79fb      	ldrb	r3, [r7, #7]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d09f      	beq.n	8004c8e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3740      	adds	r7, #64	; 0x40
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	4613      	mov	r3, r2
 8004d64:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	68ba      	ldr	r2, [r7, #8]
 8004d6a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	88fa      	ldrh	r2, [r7, #6]
 8004d70:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	88fa      	ldrh	r2, [r7, #6]
 8004d76:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2222      	movs	r2, #34	; 0x22
 8004d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d007      	beq.n	8004da6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68da      	ldr	r2, [r3, #12]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004da4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	695a      	ldr	r2, [r3, #20]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f042 0201 	orr.w	r2, r2, #1
 8004db4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68da      	ldr	r2, [r3, #12]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f042 0220 	orr.w	r2, r2, #32
 8004dc4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3714      	adds	r7, #20
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b095      	sub	sp, #84	; 0x54
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	330c      	adds	r3, #12
 8004de2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004de6:	e853 3f00 	ldrex	r3, [r3]
 8004dea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004df2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	330c      	adds	r3, #12
 8004dfa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004dfc:	643a      	str	r2, [r7, #64]	; 0x40
 8004dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e04:	e841 2300 	strex	r3, r2, [r1]
 8004e08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1e5      	bne.n	8004ddc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	3314      	adds	r3, #20
 8004e16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e18:	6a3b      	ldr	r3, [r7, #32]
 8004e1a:	e853 3f00 	ldrex	r3, [r3]
 8004e1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	f023 0301 	bic.w	r3, r3, #1
 8004e26:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	3314      	adds	r3, #20
 8004e2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e30:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e38:	e841 2300 	strex	r3, r2, [r1]
 8004e3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1e5      	bne.n	8004e10 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d119      	bne.n	8004e80 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	330c      	adds	r3, #12
 8004e52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	e853 3f00 	ldrex	r3, [r3]
 8004e5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	f023 0310 	bic.w	r3, r3, #16
 8004e62:	647b      	str	r3, [r7, #68]	; 0x44
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	330c      	adds	r3, #12
 8004e6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e6c:	61ba      	str	r2, [r7, #24]
 8004e6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e70:	6979      	ldr	r1, [r7, #20]
 8004e72:	69ba      	ldr	r2, [r7, #24]
 8004e74:	e841 2300 	strex	r3, r2, [r1]
 8004e78:	613b      	str	r3, [r7, #16]
   return(result);
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1e5      	bne.n	8004e4c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2220      	movs	r2, #32
 8004e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004e8e:	bf00      	nop
 8004e90:	3754      	adds	r7, #84	; 0x54
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr

08004e9a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e9a:	b580      	push	{r7, lr}
 8004e9c:	b084      	sub	sp, #16
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004eb4:	68f8      	ldr	r0, [r7, #12]
 8004eb6:	f7ff fecb 	bl	8004c50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004eba:	bf00      	nop
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	b085      	sub	sp, #20
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	2b21      	cmp	r3, #33	; 0x21
 8004ed4:	d13e      	bne.n	8004f54 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ede:	d114      	bne.n	8004f0a <UART_Transmit_IT+0x48>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d110      	bne.n	8004f0a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a1b      	ldr	r3, [r3, #32]
 8004eec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	881b      	ldrh	r3, [r3, #0]
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004efc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	1c9a      	adds	r2, r3, #2
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	621a      	str	r2, [r3, #32]
 8004f08:	e008      	b.n	8004f1c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	1c59      	adds	r1, r3, #1
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	6211      	str	r1, [r2, #32]
 8004f14:	781a      	ldrb	r2, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	3b01      	subs	r3, #1
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	4619      	mov	r1, r3
 8004f2a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d10f      	bne.n	8004f50 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68da      	ldr	r2, [r3, #12]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f3e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68da      	ldr	r2, [r3, #12]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f4e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f50:	2300      	movs	r3, #0
 8004f52:	e000      	b.n	8004f56 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004f54:	2302      	movs	r3, #2
  }
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3714      	adds	r7, #20
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr

08004f62 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f62:	b580      	push	{r7, lr}
 8004f64:	b082      	sub	sp, #8
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68da      	ldr	r2, [r3, #12]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f78:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2220      	movs	r2, #32
 8004f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f7ff fe5a 	bl	8004c3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3708      	adds	r7, #8
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b08c      	sub	sp, #48	; 0x30
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	2b22      	cmp	r3, #34	; 0x22
 8004fa4:	f040 80ab 	bne.w	80050fe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fb0:	d117      	bne.n	8004fe2 <UART_Receive_IT+0x50>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d113      	bne.n	8004fe2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fda:	1c9a      	adds	r2, r3, #2
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	629a      	str	r2, [r3, #40]	; 0x28
 8004fe0:	e026      	b.n	8005030 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ff4:	d007      	beq.n	8005006 <UART_Receive_IT+0x74>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d10a      	bne.n	8005014 <UART_Receive_IT+0x82>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d106      	bne.n	8005014 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	b2da      	uxtb	r2, r3
 800500e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005010:	701a      	strb	r2, [r3, #0]
 8005012:	e008      	b.n	8005026 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	b2db      	uxtb	r3, r3
 800501c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005020:	b2da      	uxtb	r2, r3
 8005022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005024:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800502a:	1c5a      	adds	r2, r3, #1
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005034:	b29b      	uxth	r3, r3
 8005036:	3b01      	subs	r3, #1
 8005038:	b29b      	uxth	r3, r3
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	4619      	mov	r1, r3
 800503e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005040:	2b00      	cmp	r3, #0
 8005042:	d15a      	bne.n	80050fa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68da      	ldr	r2, [r3, #12]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f022 0220 	bic.w	r2, r2, #32
 8005052:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68da      	ldr	r2, [r3, #12]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005062:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	695a      	ldr	r2, [r3, #20]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f022 0201 	bic.w	r2, r2, #1
 8005072:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2220      	movs	r2, #32
 8005078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005080:	2b01      	cmp	r3, #1
 8005082:	d135      	bne.n	80050f0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	330c      	adds	r3, #12
 8005090:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	e853 3f00 	ldrex	r3, [r3]
 8005098:	613b      	str	r3, [r7, #16]
   return(result);
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	f023 0310 	bic.w	r3, r3, #16
 80050a0:	627b      	str	r3, [r7, #36]	; 0x24
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	330c      	adds	r3, #12
 80050a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050aa:	623a      	str	r2, [r7, #32]
 80050ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ae:	69f9      	ldr	r1, [r7, #28]
 80050b0:	6a3a      	ldr	r2, [r7, #32]
 80050b2:	e841 2300 	strex	r3, r2, [r1]
 80050b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1e5      	bne.n	800508a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0310 	and.w	r3, r3, #16
 80050c8:	2b10      	cmp	r3, #16
 80050ca:	d10a      	bne.n	80050e2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80050cc:	2300      	movs	r3, #0
 80050ce:	60fb      	str	r3, [r7, #12]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	60fb      	str	r3, [r7, #12]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	60fb      	str	r3, [r7, #12]
 80050e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80050e6:	4619      	mov	r1, r3
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f7ff fdbb 	bl	8004c64 <HAL_UARTEx_RxEventCallback>
 80050ee:	e002      	b.n	80050f6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f7fc f979 	bl	80013e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80050f6:	2300      	movs	r3, #0
 80050f8:	e002      	b.n	8005100 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80050fa:	2300      	movs	r3, #0
 80050fc:	e000      	b.n	8005100 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80050fe:	2302      	movs	r3, #2
  }
}
 8005100:	4618      	mov	r0, r3
 8005102:	3730      	adds	r7, #48	; 0x30
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005108:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800510c:	b0c0      	sub	sp, #256	; 0x100
 800510e:	af00      	add	r7, sp, #0
 8005110:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005124:	68d9      	ldr	r1, [r3, #12]
 8005126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	ea40 0301 	orr.w	r3, r0, r1
 8005130:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005136:	689a      	ldr	r2, [r3, #8]
 8005138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	431a      	orrs	r2, r3
 8005140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	431a      	orrs	r2, r3
 8005148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800514c:	69db      	ldr	r3, [r3, #28]
 800514e:	4313      	orrs	r3, r2
 8005150:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005160:	f021 010c 	bic.w	r1, r1, #12
 8005164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800516e:	430b      	orrs	r3, r1
 8005170:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800517e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005182:	6999      	ldr	r1, [r3, #24]
 8005184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	ea40 0301 	orr.w	r3, r0, r1
 800518e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	4b8f      	ldr	r3, [pc, #572]	; (80053d4 <UART_SetConfig+0x2cc>)
 8005198:	429a      	cmp	r2, r3
 800519a:	d005      	beq.n	80051a8 <UART_SetConfig+0xa0>
 800519c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	4b8d      	ldr	r3, [pc, #564]	; (80053d8 <UART_SetConfig+0x2d0>)
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d104      	bne.n	80051b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80051a8:	f7fe fc50 	bl	8003a4c <HAL_RCC_GetPCLK2Freq>
 80051ac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80051b0:	e003      	b.n	80051ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80051b2:	f7fe fc37 	bl	8003a24 <HAL_RCC_GetPCLK1Freq>
 80051b6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051be:	69db      	ldr	r3, [r3, #28]
 80051c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051c4:	f040 810c 	bne.w	80053e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80051c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051cc:	2200      	movs	r2, #0
 80051ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80051d2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80051d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80051da:	4622      	mov	r2, r4
 80051dc:	462b      	mov	r3, r5
 80051de:	1891      	adds	r1, r2, r2
 80051e0:	65b9      	str	r1, [r7, #88]	; 0x58
 80051e2:	415b      	adcs	r3, r3
 80051e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80051ea:	4621      	mov	r1, r4
 80051ec:	eb12 0801 	adds.w	r8, r2, r1
 80051f0:	4629      	mov	r1, r5
 80051f2:	eb43 0901 	adc.w	r9, r3, r1
 80051f6:	f04f 0200 	mov.w	r2, #0
 80051fa:	f04f 0300 	mov.w	r3, #0
 80051fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005202:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005206:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800520a:	4690      	mov	r8, r2
 800520c:	4699      	mov	r9, r3
 800520e:	4623      	mov	r3, r4
 8005210:	eb18 0303 	adds.w	r3, r8, r3
 8005214:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005218:	462b      	mov	r3, r5
 800521a:	eb49 0303 	adc.w	r3, r9, r3
 800521e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800522e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005232:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005236:	460b      	mov	r3, r1
 8005238:	18db      	adds	r3, r3, r3
 800523a:	653b      	str	r3, [r7, #80]	; 0x50
 800523c:	4613      	mov	r3, r2
 800523e:	eb42 0303 	adc.w	r3, r2, r3
 8005242:	657b      	str	r3, [r7, #84]	; 0x54
 8005244:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005248:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800524c:	f7fb fc9e 	bl	8000b8c <__aeabi_uldivmod>
 8005250:	4602      	mov	r2, r0
 8005252:	460b      	mov	r3, r1
 8005254:	4b61      	ldr	r3, [pc, #388]	; (80053dc <UART_SetConfig+0x2d4>)
 8005256:	fba3 2302 	umull	r2, r3, r3, r2
 800525a:	095b      	lsrs	r3, r3, #5
 800525c:	011c      	lsls	r4, r3, #4
 800525e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005262:	2200      	movs	r2, #0
 8005264:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005268:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800526c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005270:	4642      	mov	r2, r8
 8005272:	464b      	mov	r3, r9
 8005274:	1891      	adds	r1, r2, r2
 8005276:	64b9      	str	r1, [r7, #72]	; 0x48
 8005278:	415b      	adcs	r3, r3
 800527a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800527c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005280:	4641      	mov	r1, r8
 8005282:	eb12 0a01 	adds.w	sl, r2, r1
 8005286:	4649      	mov	r1, r9
 8005288:	eb43 0b01 	adc.w	fp, r3, r1
 800528c:	f04f 0200 	mov.w	r2, #0
 8005290:	f04f 0300 	mov.w	r3, #0
 8005294:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005298:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800529c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052a0:	4692      	mov	sl, r2
 80052a2:	469b      	mov	fp, r3
 80052a4:	4643      	mov	r3, r8
 80052a6:	eb1a 0303 	adds.w	r3, sl, r3
 80052aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80052ae:	464b      	mov	r3, r9
 80052b0:	eb4b 0303 	adc.w	r3, fp, r3
 80052b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80052b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80052c4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80052c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80052cc:	460b      	mov	r3, r1
 80052ce:	18db      	adds	r3, r3, r3
 80052d0:	643b      	str	r3, [r7, #64]	; 0x40
 80052d2:	4613      	mov	r3, r2
 80052d4:	eb42 0303 	adc.w	r3, r2, r3
 80052d8:	647b      	str	r3, [r7, #68]	; 0x44
 80052da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80052de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80052e2:	f7fb fc53 	bl	8000b8c <__aeabi_uldivmod>
 80052e6:	4602      	mov	r2, r0
 80052e8:	460b      	mov	r3, r1
 80052ea:	4611      	mov	r1, r2
 80052ec:	4b3b      	ldr	r3, [pc, #236]	; (80053dc <UART_SetConfig+0x2d4>)
 80052ee:	fba3 2301 	umull	r2, r3, r3, r1
 80052f2:	095b      	lsrs	r3, r3, #5
 80052f4:	2264      	movs	r2, #100	; 0x64
 80052f6:	fb02 f303 	mul.w	r3, r2, r3
 80052fa:	1acb      	subs	r3, r1, r3
 80052fc:	00db      	lsls	r3, r3, #3
 80052fe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005302:	4b36      	ldr	r3, [pc, #216]	; (80053dc <UART_SetConfig+0x2d4>)
 8005304:	fba3 2302 	umull	r2, r3, r3, r2
 8005308:	095b      	lsrs	r3, r3, #5
 800530a:	005b      	lsls	r3, r3, #1
 800530c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005310:	441c      	add	r4, r3
 8005312:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005316:	2200      	movs	r2, #0
 8005318:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800531c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005320:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005324:	4642      	mov	r2, r8
 8005326:	464b      	mov	r3, r9
 8005328:	1891      	adds	r1, r2, r2
 800532a:	63b9      	str	r1, [r7, #56]	; 0x38
 800532c:	415b      	adcs	r3, r3
 800532e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005330:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005334:	4641      	mov	r1, r8
 8005336:	1851      	adds	r1, r2, r1
 8005338:	6339      	str	r1, [r7, #48]	; 0x30
 800533a:	4649      	mov	r1, r9
 800533c:	414b      	adcs	r3, r1
 800533e:	637b      	str	r3, [r7, #52]	; 0x34
 8005340:	f04f 0200 	mov.w	r2, #0
 8005344:	f04f 0300 	mov.w	r3, #0
 8005348:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800534c:	4659      	mov	r1, fp
 800534e:	00cb      	lsls	r3, r1, #3
 8005350:	4651      	mov	r1, sl
 8005352:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005356:	4651      	mov	r1, sl
 8005358:	00ca      	lsls	r2, r1, #3
 800535a:	4610      	mov	r0, r2
 800535c:	4619      	mov	r1, r3
 800535e:	4603      	mov	r3, r0
 8005360:	4642      	mov	r2, r8
 8005362:	189b      	adds	r3, r3, r2
 8005364:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005368:	464b      	mov	r3, r9
 800536a:	460a      	mov	r2, r1
 800536c:	eb42 0303 	adc.w	r3, r2, r3
 8005370:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005380:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005384:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005388:	460b      	mov	r3, r1
 800538a:	18db      	adds	r3, r3, r3
 800538c:	62bb      	str	r3, [r7, #40]	; 0x28
 800538e:	4613      	mov	r3, r2
 8005390:	eb42 0303 	adc.w	r3, r2, r3
 8005394:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005396:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800539a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800539e:	f7fb fbf5 	bl	8000b8c <__aeabi_uldivmod>
 80053a2:	4602      	mov	r2, r0
 80053a4:	460b      	mov	r3, r1
 80053a6:	4b0d      	ldr	r3, [pc, #52]	; (80053dc <UART_SetConfig+0x2d4>)
 80053a8:	fba3 1302 	umull	r1, r3, r3, r2
 80053ac:	095b      	lsrs	r3, r3, #5
 80053ae:	2164      	movs	r1, #100	; 0x64
 80053b0:	fb01 f303 	mul.w	r3, r1, r3
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	00db      	lsls	r3, r3, #3
 80053b8:	3332      	adds	r3, #50	; 0x32
 80053ba:	4a08      	ldr	r2, [pc, #32]	; (80053dc <UART_SetConfig+0x2d4>)
 80053bc:	fba2 2303 	umull	r2, r3, r2, r3
 80053c0:	095b      	lsrs	r3, r3, #5
 80053c2:	f003 0207 	and.w	r2, r3, #7
 80053c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4422      	add	r2, r4
 80053ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80053d0:	e105      	b.n	80055de <UART_SetConfig+0x4d6>
 80053d2:	bf00      	nop
 80053d4:	40011000 	.word	0x40011000
 80053d8:	40011400 	.word	0x40011400
 80053dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053e4:	2200      	movs	r2, #0
 80053e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80053ea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80053ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80053f2:	4642      	mov	r2, r8
 80053f4:	464b      	mov	r3, r9
 80053f6:	1891      	adds	r1, r2, r2
 80053f8:	6239      	str	r1, [r7, #32]
 80053fa:	415b      	adcs	r3, r3
 80053fc:	627b      	str	r3, [r7, #36]	; 0x24
 80053fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005402:	4641      	mov	r1, r8
 8005404:	1854      	adds	r4, r2, r1
 8005406:	4649      	mov	r1, r9
 8005408:	eb43 0501 	adc.w	r5, r3, r1
 800540c:	f04f 0200 	mov.w	r2, #0
 8005410:	f04f 0300 	mov.w	r3, #0
 8005414:	00eb      	lsls	r3, r5, #3
 8005416:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800541a:	00e2      	lsls	r2, r4, #3
 800541c:	4614      	mov	r4, r2
 800541e:	461d      	mov	r5, r3
 8005420:	4643      	mov	r3, r8
 8005422:	18e3      	adds	r3, r4, r3
 8005424:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005428:	464b      	mov	r3, r9
 800542a:	eb45 0303 	adc.w	r3, r5, r3
 800542e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800543e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005442:	f04f 0200 	mov.w	r2, #0
 8005446:	f04f 0300 	mov.w	r3, #0
 800544a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800544e:	4629      	mov	r1, r5
 8005450:	008b      	lsls	r3, r1, #2
 8005452:	4621      	mov	r1, r4
 8005454:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005458:	4621      	mov	r1, r4
 800545a:	008a      	lsls	r2, r1, #2
 800545c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005460:	f7fb fb94 	bl	8000b8c <__aeabi_uldivmod>
 8005464:	4602      	mov	r2, r0
 8005466:	460b      	mov	r3, r1
 8005468:	4b60      	ldr	r3, [pc, #384]	; (80055ec <UART_SetConfig+0x4e4>)
 800546a:	fba3 2302 	umull	r2, r3, r3, r2
 800546e:	095b      	lsrs	r3, r3, #5
 8005470:	011c      	lsls	r4, r3, #4
 8005472:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005476:	2200      	movs	r2, #0
 8005478:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800547c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005480:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005484:	4642      	mov	r2, r8
 8005486:	464b      	mov	r3, r9
 8005488:	1891      	adds	r1, r2, r2
 800548a:	61b9      	str	r1, [r7, #24]
 800548c:	415b      	adcs	r3, r3
 800548e:	61fb      	str	r3, [r7, #28]
 8005490:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005494:	4641      	mov	r1, r8
 8005496:	1851      	adds	r1, r2, r1
 8005498:	6139      	str	r1, [r7, #16]
 800549a:	4649      	mov	r1, r9
 800549c:	414b      	adcs	r3, r1
 800549e:	617b      	str	r3, [r7, #20]
 80054a0:	f04f 0200 	mov.w	r2, #0
 80054a4:	f04f 0300 	mov.w	r3, #0
 80054a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054ac:	4659      	mov	r1, fp
 80054ae:	00cb      	lsls	r3, r1, #3
 80054b0:	4651      	mov	r1, sl
 80054b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054b6:	4651      	mov	r1, sl
 80054b8:	00ca      	lsls	r2, r1, #3
 80054ba:	4610      	mov	r0, r2
 80054bc:	4619      	mov	r1, r3
 80054be:	4603      	mov	r3, r0
 80054c0:	4642      	mov	r2, r8
 80054c2:	189b      	adds	r3, r3, r2
 80054c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80054c8:	464b      	mov	r3, r9
 80054ca:	460a      	mov	r2, r1
 80054cc:	eb42 0303 	adc.w	r3, r2, r3
 80054d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80054d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80054de:	67fa      	str	r2, [r7, #124]	; 0x7c
 80054e0:	f04f 0200 	mov.w	r2, #0
 80054e4:	f04f 0300 	mov.w	r3, #0
 80054e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80054ec:	4649      	mov	r1, r9
 80054ee:	008b      	lsls	r3, r1, #2
 80054f0:	4641      	mov	r1, r8
 80054f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054f6:	4641      	mov	r1, r8
 80054f8:	008a      	lsls	r2, r1, #2
 80054fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80054fe:	f7fb fb45 	bl	8000b8c <__aeabi_uldivmod>
 8005502:	4602      	mov	r2, r0
 8005504:	460b      	mov	r3, r1
 8005506:	4b39      	ldr	r3, [pc, #228]	; (80055ec <UART_SetConfig+0x4e4>)
 8005508:	fba3 1302 	umull	r1, r3, r3, r2
 800550c:	095b      	lsrs	r3, r3, #5
 800550e:	2164      	movs	r1, #100	; 0x64
 8005510:	fb01 f303 	mul.w	r3, r1, r3
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	011b      	lsls	r3, r3, #4
 8005518:	3332      	adds	r3, #50	; 0x32
 800551a:	4a34      	ldr	r2, [pc, #208]	; (80055ec <UART_SetConfig+0x4e4>)
 800551c:	fba2 2303 	umull	r2, r3, r2, r3
 8005520:	095b      	lsrs	r3, r3, #5
 8005522:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005526:	441c      	add	r4, r3
 8005528:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800552c:	2200      	movs	r2, #0
 800552e:	673b      	str	r3, [r7, #112]	; 0x70
 8005530:	677a      	str	r2, [r7, #116]	; 0x74
 8005532:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005536:	4642      	mov	r2, r8
 8005538:	464b      	mov	r3, r9
 800553a:	1891      	adds	r1, r2, r2
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	415b      	adcs	r3, r3
 8005540:	60fb      	str	r3, [r7, #12]
 8005542:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005546:	4641      	mov	r1, r8
 8005548:	1851      	adds	r1, r2, r1
 800554a:	6039      	str	r1, [r7, #0]
 800554c:	4649      	mov	r1, r9
 800554e:	414b      	adcs	r3, r1
 8005550:	607b      	str	r3, [r7, #4]
 8005552:	f04f 0200 	mov.w	r2, #0
 8005556:	f04f 0300 	mov.w	r3, #0
 800555a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800555e:	4659      	mov	r1, fp
 8005560:	00cb      	lsls	r3, r1, #3
 8005562:	4651      	mov	r1, sl
 8005564:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005568:	4651      	mov	r1, sl
 800556a:	00ca      	lsls	r2, r1, #3
 800556c:	4610      	mov	r0, r2
 800556e:	4619      	mov	r1, r3
 8005570:	4603      	mov	r3, r0
 8005572:	4642      	mov	r2, r8
 8005574:	189b      	adds	r3, r3, r2
 8005576:	66bb      	str	r3, [r7, #104]	; 0x68
 8005578:	464b      	mov	r3, r9
 800557a:	460a      	mov	r2, r1
 800557c:	eb42 0303 	adc.w	r3, r2, r3
 8005580:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	663b      	str	r3, [r7, #96]	; 0x60
 800558c:	667a      	str	r2, [r7, #100]	; 0x64
 800558e:	f04f 0200 	mov.w	r2, #0
 8005592:	f04f 0300 	mov.w	r3, #0
 8005596:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800559a:	4649      	mov	r1, r9
 800559c:	008b      	lsls	r3, r1, #2
 800559e:	4641      	mov	r1, r8
 80055a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055a4:	4641      	mov	r1, r8
 80055a6:	008a      	lsls	r2, r1, #2
 80055a8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80055ac:	f7fb faee 	bl	8000b8c <__aeabi_uldivmod>
 80055b0:	4602      	mov	r2, r0
 80055b2:	460b      	mov	r3, r1
 80055b4:	4b0d      	ldr	r3, [pc, #52]	; (80055ec <UART_SetConfig+0x4e4>)
 80055b6:	fba3 1302 	umull	r1, r3, r3, r2
 80055ba:	095b      	lsrs	r3, r3, #5
 80055bc:	2164      	movs	r1, #100	; 0x64
 80055be:	fb01 f303 	mul.w	r3, r1, r3
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	011b      	lsls	r3, r3, #4
 80055c6:	3332      	adds	r3, #50	; 0x32
 80055c8:	4a08      	ldr	r2, [pc, #32]	; (80055ec <UART_SetConfig+0x4e4>)
 80055ca:	fba2 2303 	umull	r2, r3, r2, r3
 80055ce:	095b      	lsrs	r3, r3, #5
 80055d0:	f003 020f 	and.w	r2, r3, #15
 80055d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4422      	add	r2, r4
 80055dc:	609a      	str	r2, [r3, #8]
}
 80055de:	bf00      	nop
 80055e0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80055e4:	46bd      	mov	sp, r7
 80055e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055ea:	bf00      	nop
 80055ec:	51eb851f 	.word	0x51eb851f

080055f0 <__errno>:
 80055f0:	4b01      	ldr	r3, [pc, #4]	; (80055f8 <__errno+0x8>)
 80055f2:	6818      	ldr	r0, [r3, #0]
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	2000000c 	.word	0x2000000c

080055fc <__libc_init_array>:
 80055fc:	b570      	push	{r4, r5, r6, lr}
 80055fe:	4d0d      	ldr	r5, [pc, #52]	; (8005634 <__libc_init_array+0x38>)
 8005600:	4c0d      	ldr	r4, [pc, #52]	; (8005638 <__libc_init_array+0x3c>)
 8005602:	1b64      	subs	r4, r4, r5
 8005604:	10a4      	asrs	r4, r4, #2
 8005606:	2600      	movs	r6, #0
 8005608:	42a6      	cmp	r6, r4
 800560a:	d109      	bne.n	8005620 <__libc_init_array+0x24>
 800560c:	4d0b      	ldr	r5, [pc, #44]	; (800563c <__libc_init_array+0x40>)
 800560e:	4c0c      	ldr	r4, [pc, #48]	; (8005640 <__libc_init_array+0x44>)
 8005610:	f000 fc8e 	bl	8005f30 <_init>
 8005614:	1b64      	subs	r4, r4, r5
 8005616:	10a4      	asrs	r4, r4, #2
 8005618:	2600      	movs	r6, #0
 800561a:	42a6      	cmp	r6, r4
 800561c:	d105      	bne.n	800562a <__libc_init_array+0x2e>
 800561e:	bd70      	pop	{r4, r5, r6, pc}
 8005620:	f855 3b04 	ldr.w	r3, [r5], #4
 8005624:	4798      	blx	r3
 8005626:	3601      	adds	r6, #1
 8005628:	e7ee      	b.n	8005608 <__libc_init_array+0xc>
 800562a:	f855 3b04 	ldr.w	r3, [r5], #4
 800562e:	4798      	blx	r3
 8005630:	3601      	adds	r6, #1
 8005632:	e7f2      	b.n	800561a <__libc_init_array+0x1e>
 8005634:	080061a8 	.word	0x080061a8
 8005638:	080061a8 	.word	0x080061a8
 800563c:	080061a8 	.word	0x080061a8
 8005640:	080061ac 	.word	0x080061ac

08005644 <memset>:
 8005644:	4402      	add	r2, r0
 8005646:	4603      	mov	r3, r0
 8005648:	4293      	cmp	r3, r2
 800564a:	d100      	bne.n	800564e <memset+0xa>
 800564c:	4770      	bx	lr
 800564e:	f803 1b01 	strb.w	r1, [r3], #1
 8005652:	e7f9      	b.n	8005648 <memset+0x4>

08005654 <siprintf>:
 8005654:	b40e      	push	{r1, r2, r3}
 8005656:	b500      	push	{lr}
 8005658:	b09c      	sub	sp, #112	; 0x70
 800565a:	ab1d      	add	r3, sp, #116	; 0x74
 800565c:	9002      	str	r0, [sp, #8]
 800565e:	9006      	str	r0, [sp, #24]
 8005660:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005664:	4809      	ldr	r0, [pc, #36]	; (800568c <siprintf+0x38>)
 8005666:	9107      	str	r1, [sp, #28]
 8005668:	9104      	str	r1, [sp, #16]
 800566a:	4909      	ldr	r1, [pc, #36]	; (8005690 <siprintf+0x3c>)
 800566c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005670:	9105      	str	r1, [sp, #20]
 8005672:	6800      	ldr	r0, [r0, #0]
 8005674:	9301      	str	r3, [sp, #4]
 8005676:	a902      	add	r1, sp, #8
 8005678:	f000 f868 	bl	800574c <_svfiprintf_r>
 800567c:	9b02      	ldr	r3, [sp, #8]
 800567e:	2200      	movs	r2, #0
 8005680:	701a      	strb	r2, [r3, #0]
 8005682:	b01c      	add	sp, #112	; 0x70
 8005684:	f85d eb04 	ldr.w	lr, [sp], #4
 8005688:	b003      	add	sp, #12
 800568a:	4770      	bx	lr
 800568c:	2000000c 	.word	0x2000000c
 8005690:	ffff0208 	.word	0xffff0208

08005694 <__ssputs_r>:
 8005694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005698:	688e      	ldr	r6, [r1, #8]
 800569a:	429e      	cmp	r6, r3
 800569c:	4682      	mov	sl, r0
 800569e:	460c      	mov	r4, r1
 80056a0:	4690      	mov	r8, r2
 80056a2:	461f      	mov	r7, r3
 80056a4:	d838      	bhi.n	8005718 <__ssputs_r+0x84>
 80056a6:	898a      	ldrh	r2, [r1, #12]
 80056a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80056ac:	d032      	beq.n	8005714 <__ssputs_r+0x80>
 80056ae:	6825      	ldr	r5, [r4, #0]
 80056b0:	6909      	ldr	r1, [r1, #16]
 80056b2:	eba5 0901 	sub.w	r9, r5, r1
 80056b6:	6965      	ldr	r5, [r4, #20]
 80056b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80056bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80056c0:	3301      	adds	r3, #1
 80056c2:	444b      	add	r3, r9
 80056c4:	106d      	asrs	r5, r5, #1
 80056c6:	429d      	cmp	r5, r3
 80056c8:	bf38      	it	cc
 80056ca:	461d      	movcc	r5, r3
 80056cc:	0553      	lsls	r3, r2, #21
 80056ce:	d531      	bpl.n	8005734 <__ssputs_r+0xa0>
 80056d0:	4629      	mov	r1, r5
 80056d2:	f000 fb63 	bl	8005d9c <_malloc_r>
 80056d6:	4606      	mov	r6, r0
 80056d8:	b950      	cbnz	r0, 80056f0 <__ssputs_r+0x5c>
 80056da:	230c      	movs	r3, #12
 80056dc:	f8ca 3000 	str.w	r3, [sl]
 80056e0:	89a3      	ldrh	r3, [r4, #12]
 80056e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056e6:	81a3      	strh	r3, [r4, #12]
 80056e8:	f04f 30ff 	mov.w	r0, #4294967295
 80056ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056f0:	6921      	ldr	r1, [r4, #16]
 80056f2:	464a      	mov	r2, r9
 80056f4:	f000 fabe 	bl	8005c74 <memcpy>
 80056f8:	89a3      	ldrh	r3, [r4, #12]
 80056fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80056fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005702:	81a3      	strh	r3, [r4, #12]
 8005704:	6126      	str	r6, [r4, #16]
 8005706:	6165      	str	r5, [r4, #20]
 8005708:	444e      	add	r6, r9
 800570a:	eba5 0509 	sub.w	r5, r5, r9
 800570e:	6026      	str	r6, [r4, #0]
 8005710:	60a5      	str	r5, [r4, #8]
 8005712:	463e      	mov	r6, r7
 8005714:	42be      	cmp	r6, r7
 8005716:	d900      	bls.n	800571a <__ssputs_r+0x86>
 8005718:	463e      	mov	r6, r7
 800571a:	6820      	ldr	r0, [r4, #0]
 800571c:	4632      	mov	r2, r6
 800571e:	4641      	mov	r1, r8
 8005720:	f000 fab6 	bl	8005c90 <memmove>
 8005724:	68a3      	ldr	r3, [r4, #8]
 8005726:	1b9b      	subs	r3, r3, r6
 8005728:	60a3      	str	r3, [r4, #8]
 800572a:	6823      	ldr	r3, [r4, #0]
 800572c:	4433      	add	r3, r6
 800572e:	6023      	str	r3, [r4, #0]
 8005730:	2000      	movs	r0, #0
 8005732:	e7db      	b.n	80056ec <__ssputs_r+0x58>
 8005734:	462a      	mov	r2, r5
 8005736:	f000 fba5 	bl	8005e84 <_realloc_r>
 800573a:	4606      	mov	r6, r0
 800573c:	2800      	cmp	r0, #0
 800573e:	d1e1      	bne.n	8005704 <__ssputs_r+0x70>
 8005740:	6921      	ldr	r1, [r4, #16]
 8005742:	4650      	mov	r0, sl
 8005744:	f000 fabe 	bl	8005cc4 <_free_r>
 8005748:	e7c7      	b.n	80056da <__ssputs_r+0x46>
	...

0800574c <_svfiprintf_r>:
 800574c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005750:	4698      	mov	r8, r3
 8005752:	898b      	ldrh	r3, [r1, #12]
 8005754:	061b      	lsls	r3, r3, #24
 8005756:	b09d      	sub	sp, #116	; 0x74
 8005758:	4607      	mov	r7, r0
 800575a:	460d      	mov	r5, r1
 800575c:	4614      	mov	r4, r2
 800575e:	d50e      	bpl.n	800577e <_svfiprintf_r+0x32>
 8005760:	690b      	ldr	r3, [r1, #16]
 8005762:	b963      	cbnz	r3, 800577e <_svfiprintf_r+0x32>
 8005764:	2140      	movs	r1, #64	; 0x40
 8005766:	f000 fb19 	bl	8005d9c <_malloc_r>
 800576a:	6028      	str	r0, [r5, #0]
 800576c:	6128      	str	r0, [r5, #16]
 800576e:	b920      	cbnz	r0, 800577a <_svfiprintf_r+0x2e>
 8005770:	230c      	movs	r3, #12
 8005772:	603b      	str	r3, [r7, #0]
 8005774:	f04f 30ff 	mov.w	r0, #4294967295
 8005778:	e0d1      	b.n	800591e <_svfiprintf_r+0x1d2>
 800577a:	2340      	movs	r3, #64	; 0x40
 800577c:	616b      	str	r3, [r5, #20]
 800577e:	2300      	movs	r3, #0
 8005780:	9309      	str	r3, [sp, #36]	; 0x24
 8005782:	2320      	movs	r3, #32
 8005784:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005788:	f8cd 800c 	str.w	r8, [sp, #12]
 800578c:	2330      	movs	r3, #48	; 0x30
 800578e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005938 <_svfiprintf_r+0x1ec>
 8005792:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005796:	f04f 0901 	mov.w	r9, #1
 800579a:	4623      	mov	r3, r4
 800579c:	469a      	mov	sl, r3
 800579e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057a2:	b10a      	cbz	r2, 80057a8 <_svfiprintf_r+0x5c>
 80057a4:	2a25      	cmp	r2, #37	; 0x25
 80057a6:	d1f9      	bne.n	800579c <_svfiprintf_r+0x50>
 80057a8:	ebba 0b04 	subs.w	fp, sl, r4
 80057ac:	d00b      	beq.n	80057c6 <_svfiprintf_r+0x7a>
 80057ae:	465b      	mov	r3, fp
 80057b0:	4622      	mov	r2, r4
 80057b2:	4629      	mov	r1, r5
 80057b4:	4638      	mov	r0, r7
 80057b6:	f7ff ff6d 	bl	8005694 <__ssputs_r>
 80057ba:	3001      	adds	r0, #1
 80057bc:	f000 80aa 	beq.w	8005914 <_svfiprintf_r+0x1c8>
 80057c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80057c2:	445a      	add	r2, fp
 80057c4:	9209      	str	r2, [sp, #36]	; 0x24
 80057c6:	f89a 3000 	ldrb.w	r3, [sl]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	f000 80a2 	beq.w	8005914 <_svfiprintf_r+0x1c8>
 80057d0:	2300      	movs	r3, #0
 80057d2:	f04f 32ff 	mov.w	r2, #4294967295
 80057d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057da:	f10a 0a01 	add.w	sl, sl, #1
 80057de:	9304      	str	r3, [sp, #16]
 80057e0:	9307      	str	r3, [sp, #28]
 80057e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80057e6:	931a      	str	r3, [sp, #104]	; 0x68
 80057e8:	4654      	mov	r4, sl
 80057ea:	2205      	movs	r2, #5
 80057ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057f0:	4851      	ldr	r0, [pc, #324]	; (8005938 <_svfiprintf_r+0x1ec>)
 80057f2:	f7fa fcfd 	bl	80001f0 <memchr>
 80057f6:	9a04      	ldr	r2, [sp, #16]
 80057f8:	b9d8      	cbnz	r0, 8005832 <_svfiprintf_r+0xe6>
 80057fa:	06d0      	lsls	r0, r2, #27
 80057fc:	bf44      	itt	mi
 80057fe:	2320      	movmi	r3, #32
 8005800:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005804:	0711      	lsls	r1, r2, #28
 8005806:	bf44      	itt	mi
 8005808:	232b      	movmi	r3, #43	; 0x2b
 800580a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800580e:	f89a 3000 	ldrb.w	r3, [sl]
 8005812:	2b2a      	cmp	r3, #42	; 0x2a
 8005814:	d015      	beq.n	8005842 <_svfiprintf_r+0xf6>
 8005816:	9a07      	ldr	r2, [sp, #28]
 8005818:	4654      	mov	r4, sl
 800581a:	2000      	movs	r0, #0
 800581c:	f04f 0c0a 	mov.w	ip, #10
 8005820:	4621      	mov	r1, r4
 8005822:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005826:	3b30      	subs	r3, #48	; 0x30
 8005828:	2b09      	cmp	r3, #9
 800582a:	d94e      	bls.n	80058ca <_svfiprintf_r+0x17e>
 800582c:	b1b0      	cbz	r0, 800585c <_svfiprintf_r+0x110>
 800582e:	9207      	str	r2, [sp, #28]
 8005830:	e014      	b.n	800585c <_svfiprintf_r+0x110>
 8005832:	eba0 0308 	sub.w	r3, r0, r8
 8005836:	fa09 f303 	lsl.w	r3, r9, r3
 800583a:	4313      	orrs	r3, r2
 800583c:	9304      	str	r3, [sp, #16]
 800583e:	46a2      	mov	sl, r4
 8005840:	e7d2      	b.n	80057e8 <_svfiprintf_r+0x9c>
 8005842:	9b03      	ldr	r3, [sp, #12]
 8005844:	1d19      	adds	r1, r3, #4
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	9103      	str	r1, [sp, #12]
 800584a:	2b00      	cmp	r3, #0
 800584c:	bfbb      	ittet	lt
 800584e:	425b      	neglt	r3, r3
 8005850:	f042 0202 	orrlt.w	r2, r2, #2
 8005854:	9307      	strge	r3, [sp, #28]
 8005856:	9307      	strlt	r3, [sp, #28]
 8005858:	bfb8      	it	lt
 800585a:	9204      	strlt	r2, [sp, #16]
 800585c:	7823      	ldrb	r3, [r4, #0]
 800585e:	2b2e      	cmp	r3, #46	; 0x2e
 8005860:	d10c      	bne.n	800587c <_svfiprintf_r+0x130>
 8005862:	7863      	ldrb	r3, [r4, #1]
 8005864:	2b2a      	cmp	r3, #42	; 0x2a
 8005866:	d135      	bne.n	80058d4 <_svfiprintf_r+0x188>
 8005868:	9b03      	ldr	r3, [sp, #12]
 800586a:	1d1a      	adds	r2, r3, #4
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	9203      	str	r2, [sp, #12]
 8005870:	2b00      	cmp	r3, #0
 8005872:	bfb8      	it	lt
 8005874:	f04f 33ff 	movlt.w	r3, #4294967295
 8005878:	3402      	adds	r4, #2
 800587a:	9305      	str	r3, [sp, #20]
 800587c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005948 <_svfiprintf_r+0x1fc>
 8005880:	7821      	ldrb	r1, [r4, #0]
 8005882:	2203      	movs	r2, #3
 8005884:	4650      	mov	r0, sl
 8005886:	f7fa fcb3 	bl	80001f0 <memchr>
 800588a:	b140      	cbz	r0, 800589e <_svfiprintf_r+0x152>
 800588c:	2340      	movs	r3, #64	; 0x40
 800588e:	eba0 000a 	sub.w	r0, r0, sl
 8005892:	fa03 f000 	lsl.w	r0, r3, r0
 8005896:	9b04      	ldr	r3, [sp, #16]
 8005898:	4303      	orrs	r3, r0
 800589a:	3401      	adds	r4, #1
 800589c:	9304      	str	r3, [sp, #16]
 800589e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058a2:	4826      	ldr	r0, [pc, #152]	; (800593c <_svfiprintf_r+0x1f0>)
 80058a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80058a8:	2206      	movs	r2, #6
 80058aa:	f7fa fca1 	bl	80001f0 <memchr>
 80058ae:	2800      	cmp	r0, #0
 80058b0:	d038      	beq.n	8005924 <_svfiprintf_r+0x1d8>
 80058b2:	4b23      	ldr	r3, [pc, #140]	; (8005940 <_svfiprintf_r+0x1f4>)
 80058b4:	bb1b      	cbnz	r3, 80058fe <_svfiprintf_r+0x1b2>
 80058b6:	9b03      	ldr	r3, [sp, #12]
 80058b8:	3307      	adds	r3, #7
 80058ba:	f023 0307 	bic.w	r3, r3, #7
 80058be:	3308      	adds	r3, #8
 80058c0:	9303      	str	r3, [sp, #12]
 80058c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058c4:	4433      	add	r3, r6
 80058c6:	9309      	str	r3, [sp, #36]	; 0x24
 80058c8:	e767      	b.n	800579a <_svfiprintf_r+0x4e>
 80058ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80058ce:	460c      	mov	r4, r1
 80058d0:	2001      	movs	r0, #1
 80058d2:	e7a5      	b.n	8005820 <_svfiprintf_r+0xd4>
 80058d4:	2300      	movs	r3, #0
 80058d6:	3401      	adds	r4, #1
 80058d8:	9305      	str	r3, [sp, #20]
 80058da:	4619      	mov	r1, r3
 80058dc:	f04f 0c0a 	mov.w	ip, #10
 80058e0:	4620      	mov	r0, r4
 80058e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058e6:	3a30      	subs	r2, #48	; 0x30
 80058e8:	2a09      	cmp	r2, #9
 80058ea:	d903      	bls.n	80058f4 <_svfiprintf_r+0x1a8>
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d0c5      	beq.n	800587c <_svfiprintf_r+0x130>
 80058f0:	9105      	str	r1, [sp, #20]
 80058f2:	e7c3      	b.n	800587c <_svfiprintf_r+0x130>
 80058f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80058f8:	4604      	mov	r4, r0
 80058fa:	2301      	movs	r3, #1
 80058fc:	e7f0      	b.n	80058e0 <_svfiprintf_r+0x194>
 80058fe:	ab03      	add	r3, sp, #12
 8005900:	9300      	str	r3, [sp, #0]
 8005902:	462a      	mov	r2, r5
 8005904:	4b0f      	ldr	r3, [pc, #60]	; (8005944 <_svfiprintf_r+0x1f8>)
 8005906:	a904      	add	r1, sp, #16
 8005908:	4638      	mov	r0, r7
 800590a:	f3af 8000 	nop.w
 800590e:	1c42      	adds	r2, r0, #1
 8005910:	4606      	mov	r6, r0
 8005912:	d1d6      	bne.n	80058c2 <_svfiprintf_r+0x176>
 8005914:	89ab      	ldrh	r3, [r5, #12]
 8005916:	065b      	lsls	r3, r3, #25
 8005918:	f53f af2c 	bmi.w	8005774 <_svfiprintf_r+0x28>
 800591c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800591e:	b01d      	add	sp, #116	; 0x74
 8005920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005924:	ab03      	add	r3, sp, #12
 8005926:	9300      	str	r3, [sp, #0]
 8005928:	462a      	mov	r2, r5
 800592a:	4b06      	ldr	r3, [pc, #24]	; (8005944 <_svfiprintf_r+0x1f8>)
 800592c:	a904      	add	r1, sp, #16
 800592e:	4638      	mov	r0, r7
 8005930:	f000 f87a 	bl	8005a28 <_printf_i>
 8005934:	e7eb      	b.n	800590e <_svfiprintf_r+0x1c2>
 8005936:	bf00      	nop
 8005938:	0800616c 	.word	0x0800616c
 800593c:	08006176 	.word	0x08006176
 8005940:	00000000 	.word	0x00000000
 8005944:	08005695 	.word	0x08005695
 8005948:	08006172 	.word	0x08006172

0800594c <_printf_common>:
 800594c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005950:	4616      	mov	r6, r2
 8005952:	4699      	mov	r9, r3
 8005954:	688a      	ldr	r2, [r1, #8]
 8005956:	690b      	ldr	r3, [r1, #16]
 8005958:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800595c:	4293      	cmp	r3, r2
 800595e:	bfb8      	it	lt
 8005960:	4613      	movlt	r3, r2
 8005962:	6033      	str	r3, [r6, #0]
 8005964:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005968:	4607      	mov	r7, r0
 800596a:	460c      	mov	r4, r1
 800596c:	b10a      	cbz	r2, 8005972 <_printf_common+0x26>
 800596e:	3301      	adds	r3, #1
 8005970:	6033      	str	r3, [r6, #0]
 8005972:	6823      	ldr	r3, [r4, #0]
 8005974:	0699      	lsls	r1, r3, #26
 8005976:	bf42      	ittt	mi
 8005978:	6833      	ldrmi	r3, [r6, #0]
 800597a:	3302      	addmi	r3, #2
 800597c:	6033      	strmi	r3, [r6, #0]
 800597e:	6825      	ldr	r5, [r4, #0]
 8005980:	f015 0506 	ands.w	r5, r5, #6
 8005984:	d106      	bne.n	8005994 <_printf_common+0x48>
 8005986:	f104 0a19 	add.w	sl, r4, #25
 800598a:	68e3      	ldr	r3, [r4, #12]
 800598c:	6832      	ldr	r2, [r6, #0]
 800598e:	1a9b      	subs	r3, r3, r2
 8005990:	42ab      	cmp	r3, r5
 8005992:	dc26      	bgt.n	80059e2 <_printf_common+0x96>
 8005994:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005998:	1e13      	subs	r3, r2, #0
 800599a:	6822      	ldr	r2, [r4, #0]
 800599c:	bf18      	it	ne
 800599e:	2301      	movne	r3, #1
 80059a0:	0692      	lsls	r2, r2, #26
 80059a2:	d42b      	bmi.n	80059fc <_printf_common+0xb0>
 80059a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059a8:	4649      	mov	r1, r9
 80059aa:	4638      	mov	r0, r7
 80059ac:	47c0      	blx	r8
 80059ae:	3001      	adds	r0, #1
 80059b0:	d01e      	beq.n	80059f0 <_printf_common+0xa4>
 80059b2:	6823      	ldr	r3, [r4, #0]
 80059b4:	68e5      	ldr	r5, [r4, #12]
 80059b6:	6832      	ldr	r2, [r6, #0]
 80059b8:	f003 0306 	and.w	r3, r3, #6
 80059bc:	2b04      	cmp	r3, #4
 80059be:	bf08      	it	eq
 80059c0:	1aad      	subeq	r5, r5, r2
 80059c2:	68a3      	ldr	r3, [r4, #8]
 80059c4:	6922      	ldr	r2, [r4, #16]
 80059c6:	bf0c      	ite	eq
 80059c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059cc:	2500      	movne	r5, #0
 80059ce:	4293      	cmp	r3, r2
 80059d0:	bfc4      	itt	gt
 80059d2:	1a9b      	subgt	r3, r3, r2
 80059d4:	18ed      	addgt	r5, r5, r3
 80059d6:	2600      	movs	r6, #0
 80059d8:	341a      	adds	r4, #26
 80059da:	42b5      	cmp	r5, r6
 80059dc:	d11a      	bne.n	8005a14 <_printf_common+0xc8>
 80059de:	2000      	movs	r0, #0
 80059e0:	e008      	b.n	80059f4 <_printf_common+0xa8>
 80059e2:	2301      	movs	r3, #1
 80059e4:	4652      	mov	r2, sl
 80059e6:	4649      	mov	r1, r9
 80059e8:	4638      	mov	r0, r7
 80059ea:	47c0      	blx	r8
 80059ec:	3001      	adds	r0, #1
 80059ee:	d103      	bne.n	80059f8 <_printf_common+0xac>
 80059f0:	f04f 30ff 	mov.w	r0, #4294967295
 80059f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059f8:	3501      	adds	r5, #1
 80059fa:	e7c6      	b.n	800598a <_printf_common+0x3e>
 80059fc:	18e1      	adds	r1, r4, r3
 80059fe:	1c5a      	adds	r2, r3, #1
 8005a00:	2030      	movs	r0, #48	; 0x30
 8005a02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a06:	4422      	add	r2, r4
 8005a08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a10:	3302      	adds	r3, #2
 8005a12:	e7c7      	b.n	80059a4 <_printf_common+0x58>
 8005a14:	2301      	movs	r3, #1
 8005a16:	4622      	mov	r2, r4
 8005a18:	4649      	mov	r1, r9
 8005a1a:	4638      	mov	r0, r7
 8005a1c:	47c0      	blx	r8
 8005a1e:	3001      	adds	r0, #1
 8005a20:	d0e6      	beq.n	80059f0 <_printf_common+0xa4>
 8005a22:	3601      	adds	r6, #1
 8005a24:	e7d9      	b.n	80059da <_printf_common+0x8e>
	...

08005a28 <_printf_i>:
 8005a28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a2c:	7e0f      	ldrb	r7, [r1, #24]
 8005a2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005a30:	2f78      	cmp	r7, #120	; 0x78
 8005a32:	4691      	mov	r9, r2
 8005a34:	4680      	mov	r8, r0
 8005a36:	460c      	mov	r4, r1
 8005a38:	469a      	mov	sl, r3
 8005a3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005a3e:	d807      	bhi.n	8005a50 <_printf_i+0x28>
 8005a40:	2f62      	cmp	r7, #98	; 0x62
 8005a42:	d80a      	bhi.n	8005a5a <_printf_i+0x32>
 8005a44:	2f00      	cmp	r7, #0
 8005a46:	f000 80d8 	beq.w	8005bfa <_printf_i+0x1d2>
 8005a4a:	2f58      	cmp	r7, #88	; 0x58
 8005a4c:	f000 80a3 	beq.w	8005b96 <_printf_i+0x16e>
 8005a50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a58:	e03a      	b.n	8005ad0 <_printf_i+0xa8>
 8005a5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a5e:	2b15      	cmp	r3, #21
 8005a60:	d8f6      	bhi.n	8005a50 <_printf_i+0x28>
 8005a62:	a101      	add	r1, pc, #4	; (adr r1, 8005a68 <_printf_i+0x40>)
 8005a64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a68:	08005ac1 	.word	0x08005ac1
 8005a6c:	08005ad5 	.word	0x08005ad5
 8005a70:	08005a51 	.word	0x08005a51
 8005a74:	08005a51 	.word	0x08005a51
 8005a78:	08005a51 	.word	0x08005a51
 8005a7c:	08005a51 	.word	0x08005a51
 8005a80:	08005ad5 	.word	0x08005ad5
 8005a84:	08005a51 	.word	0x08005a51
 8005a88:	08005a51 	.word	0x08005a51
 8005a8c:	08005a51 	.word	0x08005a51
 8005a90:	08005a51 	.word	0x08005a51
 8005a94:	08005be1 	.word	0x08005be1
 8005a98:	08005b05 	.word	0x08005b05
 8005a9c:	08005bc3 	.word	0x08005bc3
 8005aa0:	08005a51 	.word	0x08005a51
 8005aa4:	08005a51 	.word	0x08005a51
 8005aa8:	08005c03 	.word	0x08005c03
 8005aac:	08005a51 	.word	0x08005a51
 8005ab0:	08005b05 	.word	0x08005b05
 8005ab4:	08005a51 	.word	0x08005a51
 8005ab8:	08005a51 	.word	0x08005a51
 8005abc:	08005bcb 	.word	0x08005bcb
 8005ac0:	682b      	ldr	r3, [r5, #0]
 8005ac2:	1d1a      	adds	r2, r3, #4
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	602a      	str	r2, [r5, #0]
 8005ac8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005acc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e0a3      	b.n	8005c1c <_printf_i+0x1f4>
 8005ad4:	6820      	ldr	r0, [r4, #0]
 8005ad6:	6829      	ldr	r1, [r5, #0]
 8005ad8:	0606      	lsls	r6, r0, #24
 8005ada:	f101 0304 	add.w	r3, r1, #4
 8005ade:	d50a      	bpl.n	8005af6 <_printf_i+0xce>
 8005ae0:	680e      	ldr	r6, [r1, #0]
 8005ae2:	602b      	str	r3, [r5, #0]
 8005ae4:	2e00      	cmp	r6, #0
 8005ae6:	da03      	bge.n	8005af0 <_printf_i+0xc8>
 8005ae8:	232d      	movs	r3, #45	; 0x2d
 8005aea:	4276      	negs	r6, r6
 8005aec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005af0:	485e      	ldr	r0, [pc, #376]	; (8005c6c <_printf_i+0x244>)
 8005af2:	230a      	movs	r3, #10
 8005af4:	e019      	b.n	8005b2a <_printf_i+0x102>
 8005af6:	680e      	ldr	r6, [r1, #0]
 8005af8:	602b      	str	r3, [r5, #0]
 8005afa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005afe:	bf18      	it	ne
 8005b00:	b236      	sxthne	r6, r6
 8005b02:	e7ef      	b.n	8005ae4 <_printf_i+0xbc>
 8005b04:	682b      	ldr	r3, [r5, #0]
 8005b06:	6820      	ldr	r0, [r4, #0]
 8005b08:	1d19      	adds	r1, r3, #4
 8005b0a:	6029      	str	r1, [r5, #0]
 8005b0c:	0601      	lsls	r1, r0, #24
 8005b0e:	d501      	bpl.n	8005b14 <_printf_i+0xec>
 8005b10:	681e      	ldr	r6, [r3, #0]
 8005b12:	e002      	b.n	8005b1a <_printf_i+0xf2>
 8005b14:	0646      	lsls	r6, r0, #25
 8005b16:	d5fb      	bpl.n	8005b10 <_printf_i+0xe8>
 8005b18:	881e      	ldrh	r6, [r3, #0]
 8005b1a:	4854      	ldr	r0, [pc, #336]	; (8005c6c <_printf_i+0x244>)
 8005b1c:	2f6f      	cmp	r7, #111	; 0x6f
 8005b1e:	bf0c      	ite	eq
 8005b20:	2308      	moveq	r3, #8
 8005b22:	230a      	movne	r3, #10
 8005b24:	2100      	movs	r1, #0
 8005b26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b2a:	6865      	ldr	r5, [r4, #4]
 8005b2c:	60a5      	str	r5, [r4, #8]
 8005b2e:	2d00      	cmp	r5, #0
 8005b30:	bfa2      	ittt	ge
 8005b32:	6821      	ldrge	r1, [r4, #0]
 8005b34:	f021 0104 	bicge.w	r1, r1, #4
 8005b38:	6021      	strge	r1, [r4, #0]
 8005b3a:	b90e      	cbnz	r6, 8005b40 <_printf_i+0x118>
 8005b3c:	2d00      	cmp	r5, #0
 8005b3e:	d04d      	beq.n	8005bdc <_printf_i+0x1b4>
 8005b40:	4615      	mov	r5, r2
 8005b42:	fbb6 f1f3 	udiv	r1, r6, r3
 8005b46:	fb03 6711 	mls	r7, r3, r1, r6
 8005b4a:	5dc7      	ldrb	r7, [r0, r7]
 8005b4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005b50:	4637      	mov	r7, r6
 8005b52:	42bb      	cmp	r3, r7
 8005b54:	460e      	mov	r6, r1
 8005b56:	d9f4      	bls.n	8005b42 <_printf_i+0x11a>
 8005b58:	2b08      	cmp	r3, #8
 8005b5a:	d10b      	bne.n	8005b74 <_printf_i+0x14c>
 8005b5c:	6823      	ldr	r3, [r4, #0]
 8005b5e:	07de      	lsls	r6, r3, #31
 8005b60:	d508      	bpl.n	8005b74 <_printf_i+0x14c>
 8005b62:	6923      	ldr	r3, [r4, #16]
 8005b64:	6861      	ldr	r1, [r4, #4]
 8005b66:	4299      	cmp	r1, r3
 8005b68:	bfde      	ittt	le
 8005b6a:	2330      	movle	r3, #48	; 0x30
 8005b6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b70:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005b74:	1b52      	subs	r2, r2, r5
 8005b76:	6122      	str	r2, [r4, #16]
 8005b78:	f8cd a000 	str.w	sl, [sp]
 8005b7c:	464b      	mov	r3, r9
 8005b7e:	aa03      	add	r2, sp, #12
 8005b80:	4621      	mov	r1, r4
 8005b82:	4640      	mov	r0, r8
 8005b84:	f7ff fee2 	bl	800594c <_printf_common>
 8005b88:	3001      	adds	r0, #1
 8005b8a:	d14c      	bne.n	8005c26 <_printf_i+0x1fe>
 8005b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b90:	b004      	add	sp, #16
 8005b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b96:	4835      	ldr	r0, [pc, #212]	; (8005c6c <_printf_i+0x244>)
 8005b98:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005b9c:	6829      	ldr	r1, [r5, #0]
 8005b9e:	6823      	ldr	r3, [r4, #0]
 8005ba0:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ba4:	6029      	str	r1, [r5, #0]
 8005ba6:	061d      	lsls	r5, r3, #24
 8005ba8:	d514      	bpl.n	8005bd4 <_printf_i+0x1ac>
 8005baa:	07df      	lsls	r7, r3, #31
 8005bac:	bf44      	itt	mi
 8005bae:	f043 0320 	orrmi.w	r3, r3, #32
 8005bb2:	6023      	strmi	r3, [r4, #0]
 8005bb4:	b91e      	cbnz	r6, 8005bbe <_printf_i+0x196>
 8005bb6:	6823      	ldr	r3, [r4, #0]
 8005bb8:	f023 0320 	bic.w	r3, r3, #32
 8005bbc:	6023      	str	r3, [r4, #0]
 8005bbe:	2310      	movs	r3, #16
 8005bc0:	e7b0      	b.n	8005b24 <_printf_i+0xfc>
 8005bc2:	6823      	ldr	r3, [r4, #0]
 8005bc4:	f043 0320 	orr.w	r3, r3, #32
 8005bc8:	6023      	str	r3, [r4, #0]
 8005bca:	2378      	movs	r3, #120	; 0x78
 8005bcc:	4828      	ldr	r0, [pc, #160]	; (8005c70 <_printf_i+0x248>)
 8005bce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005bd2:	e7e3      	b.n	8005b9c <_printf_i+0x174>
 8005bd4:	0659      	lsls	r1, r3, #25
 8005bd6:	bf48      	it	mi
 8005bd8:	b2b6      	uxthmi	r6, r6
 8005bda:	e7e6      	b.n	8005baa <_printf_i+0x182>
 8005bdc:	4615      	mov	r5, r2
 8005bde:	e7bb      	b.n	8005b58 <_printf_i+0x130>
 8005be0:	682b      	ldr	r3, [r5, #0]
 8005be2:	6826      	ldr	r6, [r4, #0]
 8005be4:	6961      	ldr	r1, [r4, #20]
 8005be6:	1d18      	adds	r0, r3, #4
 8005be8:	6028      	str	r0, [r5, #0]
 8005bea:	0635      	lsls	r5, r6, #24
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	d501      	bpl.n	8005bf4 <_printf_i+0x1cc>
 8005bf0:	6019      	str	r1, [r3, #0]
 8005bf2:	e002      	b.n	8005bfa <_printf_i+0x1d2>
 8005bf4:	0670      	lsls	r0, r6, #25
 8005bf6:	d5fb      	bpl.n	8005bf0 <_printf_i+0x1c8>
 8005bf8:	8019      	strh	r1, [r3, #0]
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	6123      	str	r3, [r4, #16]
 8005bfe:	4615      	mov	r5, r2
 8005c00:	e7ba      	b.n	8005b78 <_printf_i+0x150>
 8005c02:	682b      	ldr	r3, [r5, #0]
 8005c04:	1d1a      	adds	r2, r3, #4
 8005c06:	602a      	str	r2, [r5, #0]
 8005c08:	681d      	ldr	r5, [r3, #0]
 8005c0a:	6862      	ldr	r2, [r4, #4]
 8005c0c:	2100      	movs	r1, #0
 8005c0e:	4628      	mov	r0, r5
 8005c10:	f7fa faee 	bl	80001f0 <memchr>
 8005c14:	b108      	cbz	r0, 8005c1a <_printf_i+0x1f2>
 8005c16:	1b40      	subs	r0, r0, r5
 8005c18:	6060      	str	r0, [r4, #4]
 8005c1a:	6863      	ldr	r3, [r4, #4]
 8005c1c:	6123      	str	r3, [r4, #16]
 8005c1e:	2300      	movs	r3, #0
 8005c20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c24:	e7a8      	b.n	8005b78 <_printf_i+0x150>
 8005c26:	6923      	ldr	r3, [r4, #16]
 8005c28:	462a      	mov	r2, r5
 8005c2a:	4649      	mov	r1, r9
 8005c2c:	4640      	mov	r0, r8
 8005c2e:	47d0      	blx	sl
 8005c30:	3001      	adds	r0, #1
 8005c32:	d0ab      	beq.n	8005b8c <_printf_i+0x164>
 8005c34:	6823      	ldr	r3, [r4, #0]
 8005c36:	079b      	lsls	r3, r3, #30
 8005c38:	d413      	bmi.n	8005c62 <_printf_i+0x23a>
 8005c3a:	68e0      	ldr	r0, [r4, #12]
 8005c3c:	9b03      	ldr	r3, [sp, #12]
 8005c3e:	4298      	cmp	r0, r3
 8005c40:	bfb8      	it	lt
 8005c42:	4618      	movlt	r0, r3
 8005c44:	e7a4      	b.n	8005b90 <_printf_i+0x168>
 8005c46:	2301      	movs	r3, #1
 8005c48:	4632      	mov	r2, r6
 8005c4a:	4649      	mov	r1, r9
 8005c4c:	4640      	mov	r0, r8
 8005c4e:	47d0      	blx	sl
 8005c50:	3001      	adds	r0, #1
 8005c52:	d09b      	beq.n	8005b8c <_printf_i+0x164>
 8005c54:	3501      	adds	r5, #1
 8005c56:	68e3      	ldr	r3, [r4, #12]
 8005c58:	9903      	ldr	r1, [sp, #12]
 8005c5a:	1a5b      	subs	r3, r3, r1
 8005c5c:	42ab      	cmp	r3, r5
 8005c5e:	dcf2      	bgt.n	8005c46 <_printf_i+0x21e>
 8005c60:	e7eb      	b.n	8005c3a <_printf_i+0x212>
 8005c62:	2500      	movs	r5, #0
 8005c64:	f104 0619 	add.w	r6, r4, #25
 8005c68:	e7f5      	b.n	8005c56 <_printf_i+0x22e>
 8005c6a:	bf00      	nop
 8005c6c:	0800617d 	.word	0x0800617d
 8005c70:	0800618e 	.word	0x0800618e

08005c74 <memcpy>:
 8005c74:	440a      	add	r2, r1
 8005c76:	4291      	cmp	r1, r2
 8005c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c7c:	d100      	bne.n	8005c80 <memcpy+0xc>
 8005c7e:	4770      	bx	lr
 8005c80:	b510      	push	{r4, lr}
 8005c82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c8a:	4291      	cmp	r1, r2
 8005c8c:	d1f9      	bne.n	8005c82 <memcpy+0xe>
 8005c8e:	bd10      	pop	{r4, pc}

08005c90 <memmove>:
 8005c90:	4288      	cmp	r0, r1
 8005c92:	b510      	push	{r4, lr}
 8005c94:	eb01 0402 	add.w	r4, r1, r2
 8005c98:	d902      	bls.n	8005ca0 <memmove+0x10>
 8005c9a:	4284      	cmp	r4, r0
 8005c9c:	4623      	mov	r3, r4
 8005c9e:	d807      	bhi.n	8005cb0 <memmove+0x20>
 8005ca0:	1e43      	subs	r3, r0, #1
 8005ca2:	42a1      	cmp	r1, r4
 8005ca4:	d008      	beq.n	8005cb8 <memmove+0x28>
 8005ca6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005caa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005cae:	e7f8      	b.n	8005ca2 <memmove+0x12>
 8005cb0:	4402      	add	r2, r0
 8005cb2:	4601      	mov	r1, r0
 8005cb4:	428a      	cmp	r2, r1
 8005cb6:	d100      	bne.n	8005cba <memmove+0x2a>
 8005cb8:	bd10      	pop	{r4, pc}
 8005cba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005cbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005cc2:	e7f7      	b.n	8005cb4 <memmove+0x24>

08005cc4 <_free_r>:
 8005cc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005cc6:	2900      	cmp	r1, #0
 8005cc8:	d044      	beq.n	8005d54 <_free_r+0x90>
 8005cca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cce:	9001      	str	r0, [sp, #4]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	f1a1 0404 	sub.w	r4, r1, #4
 8005cd6:	bfb8      	it	lt
 8005cd8:	18e4      	addlt	r4, r4, r3
 8005cda:	f000 f913 	bl	8005f04 <__malloc_lock>
 8005cde:	4a1e      	ldr	r2, [pc, #120]	; (8005d58 <_free_r+0x94>)
 8005ce0:	9801      	ldr	r0, [sp, #4]
 8005ce2:	6813      	ldr	r3, [r2, #0]
 8005ce4:	b933      	cbnz	r3, 8005cf4 <_free_r+0x30>
 8005ce6:	6063      	str	r3, [r4, #4]
 8005ce8:	6014      	str	r4, [r2, #0]
 8005cea:	b003      	add	sp, #12
 8005cec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005cf0:	f000 b90e 	b.w	8005f10 <__malloc_unlock>
 8005cf4:	42a3      	cmp	r3, r4
 8005cf6:	d908      	bls.n	8005d0a <_free_r+0x46>
 8005cf8:	6825      	ldr	r5, [r4, #0]
 8005cfa:	1961      	adds	r1, r4, r5
 8005cfc:	428b      	cmp	r3, r1
 8005cfe:	bf01      	itttt	eq
 8005d00:	6819      	ldreq	r1, [r3, #0]
 8005d02:	685b      	ldreq	r3, [r3, #4]
 8005d04:	1949      	addeq	r1, r1, r5
 8005d06:	6021      	streq	r1, [r4, #0]
 8005d08:	e7ed      	b.n	8005ce6 <_free_r+0x22>
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	b10b      	cbz	r3, 8005d14 <_free_r+0x50>
 8005d10:	42a3      	cmp	r3, r4
 8005d12:	d9fa      	bls.n	8005d0a <_free_r+0x46>
 8005d14:	6811      	ldr	r1, [r2, #0]
 8005d16:	1855      	adds	r5, r2, r1
 8005d18:	42a5      	cmp	r5, r4
 8005d1a:	d10b      	bne.n	8005d34 <_free_r+0x70>
 8005d1c:	6824      	ldr	r4, [r4, #0]
 8005d1e:	4421      	add	r1, r4
 8005d20:	1854      	adds	r4, r2, r1
 8005d22:	42a3      	cmp	r3, r4
 8005d24:	6011      	str	r1, [r2, #0]
 8005d26:	d1e0      	bne.n	8005cea <_free_r+0x26>
 8005d28:	681c      	ldr	r4, [r3, #0]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	6053      	str	r3, [r2, #4]
 8005d2e:	4421      	add	r1, r4
 8005d30:	6011      	str	r1, [r2, #0]
 8005d32:	e7da      	b.n	8005cea <_free_r+0x26>
 8005d34:	d902      	bls.n	8005d3c <_free_r+0x78>
 8005d36:	230c      	movs	r3, #12
 8005d38:	6003      	str	r3, [r0, #0]
 8005d3a:	e7d6      	b.n	8005cea <_free_r+0x26>
 8005d3c:	6825      	ldr	r5, [r4, #0]
 8005d3e:	1961      	adds	r1, r4, r5
 8005d40:	428b      	cmp	r3, r1
 8005d42:	bf04      	itt	eq
 8005d44:	6819      	ldreq	r1, [r3, #0]
 8005d46:	685b      	ldreq	r3, [r3, #4]
 8005d48:	6063      	str	r3, [r4, #4]
 8005d4a:	bf04      	itt	eq
 8005d4c:	1949      	addeq	r1, r1, r5
 8005d4e:	6021      	streq	r1, [r4, #0]
 8005d50:	6054      	str	r4, [r2, #4]
 8005d52:	e7ca      	b.n	8005cea <_free_r+0x26>
 8005d54:	b003      	add	sp, #12
 8005d56:	bd30      	pop	{r4, r5, pc}
 8005d58:	200005c8 	.word	0x200005c8

08005d5c <sbrk_aligned>:
 8005d5c:	b570      	push	{r4, r5, r6, lr}
 8005d5e:	4e0e      	ldr	r6, [pc, #56]	; (8005d98 <sbrk_aligned+0x3c>)
 8005d60:	460c      	mov	r4, r1
 8005d62:	6831      	ldr	r1, [r6, #0]
 8005d64:	4605      	mov	r5, r0
 8005d66:	b911      	cbnz	r1, 8005d6e <sbrk_aligned+0x12>
 8005d68:	f000 f8bc 	bl	8005ee4 <_sbrk_r>
 8005d6c:	6030      	str	r0, [r6, #0]
 8005d6e:	4621      	mov	r1, r4
 8005d70:	4628      	mov	r0, r5
 8005d72:	f000 f8b7 	bl	8005ee4 <_sbrk_r>
 8005d76:	1c43      	adds	r3, r0, #1
 8005d78:	d00a      	beq.n	8005d90 <sbrk_aligned+0x34>
 8005d7a:	1cc4      	adds	r4, r0, #3
 8005d7c:	f024 0403 	bic.w	r4, r4, #3
 8005d80:	42a0      	cmp	r0, r4
 8005d82:	d007      	beq.n	8005d94 <sbrk_aligned+0x38>
 8005d84:	1a21      	subs	r1, r4, r0
 8005d86:	4628      	mov	r0, r5
 8005d88:	f000 f8ac 	bl	8005ee4 <_sbrk_r>
 8005d8c:	3001      	adds	r0, #1
 8005d8e:	d101      	bne.n	8005d94 <sbrk_aligned+0x38>
 8005d90:	f04f 34ff 	mov.w	r4, #4294967295
 8005d94:	4620      	mov	r0, r4
 8005d96:	bd70      	pop	{r4, r5, r6, pc}
 8005d98:	200005cc 	.word	0x200005cc

08005d9c <_malloc_r>:
 8005d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005da0:	1ccd      	adds	r5, r1, #3
 8005da2:	f025 0503 	bic.w	r5, r5, #3
 8005da6:	3508      	adds	r5, #8
 8005da8:	2d0c      	cmp	r5, #12
 8005daa:	bf38      	it	cc
 8005dac:	250c      	movcc	r5, #12
 8005dae:	2d00      	cmp	r5, #0
 8005db0:	4607      	mov	r7, r0
 8005db2:	db01      	blt.n	8005db8 <_malloc_r+0x1c>
 8005db4:	42a9      	cmp	r1, r5
 8005db6:	d905      	bls.n	8005dc4 <_malloc_r+0x28>
 8005db8:	230c      	movs	r3, #12
 8005dba:	603b      	str	r3, [r7, #0]
 8005dbc:	2600      	movs	r6, #0
 8005dbe:	4630      	mov	r0, r6
 8005dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005dc4:	4e2e      	ldr	r6, [pc, #184]	; (8005e80 <_malloc_r+0xe4>)
 8005dc6:	f000 f89d 	bl	8005f04 <__malloc_lock>
 8005dca:	6833      	ldr	r3, [r6, #0]
 8005dcc:	461c      	mov	r4, r3
 8005dce:	bb34      	cbnz	r4, 8005e1e <_malloc_r+0x82>
 8005dd0:	4629      	mov	r1, r5
 8005dd2:	4638      	mov	r0, r7
 8005dd4:	f7ff ffc2 	bl	8005d5c <sbrk_aligned>
 8005dd8:	1c43      	adds	r3, r0, #1
 8005dda:	4604      	mov	r4, r0
 8005ddc:	d14d      	bne.n	8005e7a <_malloc_r+0xde>
 8005dde:	6834      	ldr	r4, [r6, #0]
 8005de0:	4626      	mov	r6, r4
 8005de2:	2e00      	cmp	r6, #0
 8005de4:	d140      	bne.n	8005e68 <_malloc_r+0xcc>
 8005de6:	6823      	ldr	r3, [r4, #0]
 8005de8:	4631      	mov	r1, r6
 8005dea:	4638      	mov	r0, r7
 8005dec:	eb04 0803 	add.w	r8, r4, r3
 8005df0:	f000 f878 	bl	8005ee4 <_sbrk_r>
 8005df4:	4580      	cmp	r8, r0
 8005df6:	d13a      	bne.n	8005e6e <_malloc_r+0xd2>
 8005df8:	6821      	ldr	r1, [r4, #0]
 8005dfa:	3503      	adds	r5, #3
 8005dfc:	1a6d      	subs	r5, r5, r1
 8005dfe:	f025 0503 	bic.w	r5, r5, #3
 8005e02:	3508      	adds	r5, #8
 8005e04:	2d0c      	cmp	r5, #12
 8005e06:	bf38      	it	cc
 8005e08:	250c      	movcc	r5, #12
 8005e0a:	4629      	mov	r1, r5
 8005e0c:	4638      	mov	r0, r7
 8005e0e:	f7ff ffa5 	bl	8005d5c <sbrk_aligned>
 8005e12:	3001      	adds	r0, #1
 8005e14:	d02b      	beq.n	8005e6e <_malloc_r+0xd2>
 8005e16:	6823      	ldr	r3, [r4, #0]
 8005e18:	442b      	add	r3, r5
 8005e1a:	6023      	str	r3, [r4, #0]
 8005e1c:	e00e      	b.n	8005e3c <_malloc_r+0xa0>
 8005e1e:	6822      	ldr	r2, [r4, #0]
 8005e20:	1b52      	subs	r2, r2, r5
 8005e22:	d41e      	bmi.n	8005e62 <_malloc_r+0xc6>
 8005e24:	2a0b      	cmp	r2, #11
 8005e26:	d916      	bls.n	8005e56 <_malloc_r+0xba>
 8005e28:	1961      	adds	r1, r4, r5
 8005e2a:	42a3      	cmp	r3, r4
 8005e2c:	6025      	str	r5, [r4, #0]
 8005e2e:	bf18      	it	ne
 8005e30:	6059      	strne	r1, [r3, #4]
 8005e32:	6863      	ldr	r3, [r4, #4]
 8005e34:	bf08      	it	eq
 8005e36:	6031      	streq	r1, [r6, #0]
 8005e38:	5162      	str	r2, [r4, r5]
 8005e3a:	604b      	str	r3, [r1, #4]
 8005e3c:	4638      	mov	r0, r7
 8005e3e:	f104 060b 	add.w	r6, r4, #11
 8005e42:	f000 f865 	bl	8005f10 <__malloc_unlock>
 8005e46:	f026 0607 	bic.w	r6, r6, #7
 8005e4a:	1d23      	adds	r3, r4, #4
 8005e4c:	1af2      	subs	r2, r6, r3
 8005e4e:	d0b6      	beq.n	8005dbe <_malloc_r+0x22>
 8005e50:	1b9b      	subs	r3, r3, r6
 8005e52:	50a3      	str	r3, [r4, r2]
 8005e54:	e7b3      	b.n	8005dbe <_malloc_r+0x22>
 8005e56:	6862      	ldr	r2, [r4, #4]
 8005e58:	42a3      	cmp	r3, r4
 8005e5a:	bf0c      	ite	eq
 8005e5c:	6032      	streq	r2, [r6, #0]
 8005e5e:	605a      	strne	r2, [r3, #4]
 8005e60:	e7ec      	b.n	8005e3c <_malloc_r+0xa0>
 8005e62:	4623      	mov	r3, r4
 8005e64:	6864      	ldr	r4, [r4, #4]
 8005e66:	e7b2      	b.n	8005dce <_malloc_r+0x32>
 8005e68:	4634      	mov	r4, r6
 8005e6a:	6876      	ldr	r6, [r6, #4]
 8005e6c:	e7b9      	b.n	8005de2 <_malloc_r+0x46>
 8005e6e:	230c      	movs	r3, #12
 8005e70:	603b      	str	r3, [r7, #0]
 8005e72:	4638      	mov	r0, r7
 8005e74:	f000 f84c 	bl	8005f10 <__malloc_unlock>
 8005e78:	e7a1      	b.n	8005dbe <_malloc_r+0x22>
 8005e7a:	6025      	str	r5, [r4, #0]
 8005e7c:	e7de      	b.n	8005e3c <_malloc_r+0xa0>
 8005e7e:	bf00      	nop
 8005e80:	200005c8 	.word	0x200005c8

08005e84 <_realloc_r>:
 8005e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e88:	4680      	mov	r8, r0
 8005e8a:	4614      	mov	r4, r2
 8005e8c:	460e      	mov	r6, r1
 8005e8e:	b921      	cbnz	r1, 8005e9a <_realloc_r+0x16>
 8005e90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e94:	4611      	mov	r1, r2
 8005e96:	f7ff bf81 	b.w	8005d9c <_malloc_r>
 8005e9a:	b92a      	cbnz	r2, 8005ea8 <_realloc_r+0x24>
 8005e9c:	f7ff ff12 	bl	8005cc4 <_free_r>
 8005ea0:	4625      	mov	r5, r4
 8005ea2:	4628      	mov	r0, r5
 8005ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ea8:	f000 f838 	bl	8005f1c <_malloc_usable_size_r>
 8005eac:	4284      	cmp	r4, r0
 8005eae:	4607      	mov	r7, r0
 8005eb0:	d802      	bhi.n	8005eb8 <_realloc_r+0x34>
 8005eb2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005eb6:	d812      	bhi.n	8005ede <_realloc_r+0x5a>
 8005eb8:	4621      	mov	r1, r4
 8005eba:	4640      	mov	r0, r8
 8005ebc:	f7ff ff6e 	bl	8005d9c <_malloc_r>
 8005ec0:	4605      	mov	r5, r0
 8005ec2:	2800      	cmp	r0, #0
 8005ec4:	d0ed      	beq.n	8005ea2 <_realloc_r+0x1e>
 8005ec6:	42bc      	cmp	r4, r7
 8005ec8:	4622      	mov	r2, r4
 8005eca:	4631      	mov	r1, r6
 8005ecc:	bf28      	it	cs
 8005ece:	463a      	movcs	r2, r7
 8005ed0:	f7ff fed0 	bl	8005c74 <memcpy>
 8005ed4:	4631      	mov	r1, r6
 8005ed6:	4640      	mov	r0, r8
 8005ed8:	f7ff fef4 	bl	8005cc4 <_free_r>
 8005edc:	e7e1      	b.n	8005ea2 <_realloc_r+0x1e>
 8005ede:	4635      	mov	r5, r6
 8005ee0:	e7df      	b.n	8005ea2 <_realloc_r+0x1e>
	...

08005ee4 <_sbrk_r>:
 8005ee4:	b538      	push	{r3, r4, r5, lr}
 8005ee6:	4d06      	ldr	r5, [pc, #24]	; (8005f00 <_sbrk_r+0x1c>)
 8005ee8:	2300      	movs	r3, #0
 8005eea:	4604      	mov	r4, r0
 8005eec:	4608      	mov	r0, r1
 8005eee:	602b      	str	r3, [r5, #0]
 8005ef0:	f7fc f8d4 	bl	800209c <_sbrk>
 8005ef4:	1c43      	adds	r3, r0, #1
 8005ef6:	d102      	bne.n	8005efe <_sbrk_r+0x1a>
 8005ef8:	682b      	ldr	r3, [r5, #0]
 8005efa:	b103      	cbz	r3, 8005efe <_sbrk_r+0x1a>
 8005efc:	6023      	str	r3, [r4, #0]
 8005efe:	bd38      	pop	{r3, r4, r5, pc}
 8005f00:	200005d0 	.word	0x200005d0

08005f04 <__malloc_lock>:
 8005f04:	4801      	ldr	r0, [pc, #4]	; (8005f0c <__malloc_lock+0x8>)
 8005f06:	f000 b811 	b.w	8005f2c <__retarget_lock_acquire_recursive>
 8005f0a:	bf00      	nop
 8005f0c:	200005d4 	.word	0x200005d4

08005f10 <__malloc_unlock>:
 8005f10:	4801      	ldr	r0, [pc, #4]	; (8005f18 <__malloc_unlock+0x8>)
 8005f12:	f000 b80c 	b.w	8005f2e <__retarget_lock_release_recursive>
 8005f16:	bf00      	nop
 8005f18:	200005d4 	.word	0x200005d4

08005f1c <_malloc_usable_size_r>:
 8005f1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f20:	1f18      	subs	r0, r3, #4
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	bfbc      	itt	lt
 8005f26:	580b      	ldrlt	r3, [r1, r0]
 8005f28:	18c0      	addlt	r0, r0, r3
 8005f2a:	4770      	bx	lr

08005f2c <__retarget_lock_acquire_recursive>:
 8005f2c:	4770      	bx	lr

08005f2e <__retarget_lock_release_recursive>:
 8005f2e:	4770      	bx	lr

08005f30 <_init>:
 8005f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f32:	bf00      	nop
 8005f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f36:	bc08      	pop	{r3}
 8005f38:	469e      	mov	lr, r3
 8005f3a:	4770      	bx	lr

08005f3c <_fini>:
 8005f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f3e:	bf00      	nop
 8005f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f42:	bc08      	pop	{r3}
 8005f44:	469e      	mov	lr, r3
 8005f46:	4770      	bx	lr
