
Final-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c90  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  08005e30  08005e30  00015e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006088  08006088  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006088  08006088  00016088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006090  08006090  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006090  08006090  00016090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006094  08006094  00016094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006098  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000568  20000070  08006108  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200005d8  08006108  000205d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f1cc  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000209d  00000000  00000000  0002f26c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  00031310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cf8  00000000  00000000  000320d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001707a  00000000  00000000  00032dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fa87  00000000  00000000  00049e42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097fdf  00000000  00000000  000598c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f18a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ee8  00000000  00000000  000f18f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005e18 	.word	0x08005e18

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08005e18 	.word	0x08005e18

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b974 	b.w	8000d7c <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	468e      	mov	lr, r1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d14d      	bne.n	8000b56 <__udivmoddi4+0xaa>
 8000aba:	428a      	cmp	r2, r1
 8000abc:	4694      	mov	ip, r2
 8000abe:	d969      	bls.n	8000b94 <__udivmoddi4+0xe8>
 8000ac0:	fab2 f282 	clz	r2, r2
 8000ac4:	b152      	cbz	r2, 8000adc <__udivmoddi4+0x30>
 8000ac6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aca:	f1c2 0120 	rsb	r1, r2, #32
 8000ace:	fa20 f101 	lsr.w	r1, r0, r1
 8000ad2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ad6:	ea41 0e03 	orr.w	lr, r1, r3
 8000ada:	4094      	lsls	r4, r2
 8000adc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ae0:	0c21      	lsrs	r1, r4, #16
 8000ae2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ae6:	fa1f f78c 	uxth.w	r7, ip
 8000aea:	fb08 e316 	mls	r3, r8, r6, lr
 8000aee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000af2:	fb06 f107 	mul.w	r1, r6, r7
 8000af6:	4299      	cmp	r1, r3
 8000af8:	d90a      	bls.n	8000b10 <__udivmoddi4+0x64>
 8000afa:	eb1c 0303 	adds.w	r3, ip, r3
 8000afe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b02:	f080 811f 	bcs.w	8000d44 <__udivmoddi4+0x298>
 8000b06:	4299      	cmp	r1, r3
 8000b08:	f240 811c 	bls.w	8000d44 <__udivmoddi4+0x298>
 8000b0c:	3e02      	subs	r6, #2
 8000b0e:	4463      	add	r3, ip
 8000b10:	1a5b      	subs	r3, r3, r1
 8000b12:	b2a4      	uxth	r4, r4
 8000b14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b18:	fb08 3310 	mls	r3, r8, r0, r3
 8000b1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b20:	fb00 f707 	mul.w	r7, r0, r7
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	d90a      	bls.n	8000b3e <__udivmoddi4+0x92>
 8000b28:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b30:	f080 810a 	bcs.w	8000d48 <__udivmoddi4+0x29c>
 8000b34:	42a7      	cmp	r7, r4
 8000b36:	f240 8107 	bls.w	8000d48 <__udivmoddi4+0x29c>
 8000b3a:	4464      	add	r4, ip
 8000b3c:	3802      	subs	r0, #2
 8000b3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b42:	1be4      	subs	r4, r4, r7
 8000b44:	2600      	movs	r6, #0
 8000b46:	b11d      	cbz	r5, 8000b50 <__udivmoddi4+0xa4>
 8000b48:	40d4      	lsrs	r4, r2
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b50:	4631      	mov	r1, r6
 8000b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d909      	bls.n	8000b6e <__udivmoddi4+0xc2>
 8000b5a:	2d00      	cmp	r5, #0
 8000b5c:	f000 80ef 	beq.w	8000d3e <__udivmoddi4+0x292>
 8000b60:	2600      	movs	r6, #0
 8000b62:	e9c5 0100 	strd	r0, r1, [r5]
 8000b66:	4630      	mov	r0, r6
 8000b68:	4631      	mov	r1, r6
 8000b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6e:	fab3 f683 	clz	r6, r3
 8000b72:	2e00      	cmp	r6, #0
 8000b74:	d14a      	bne.n	8000c0c <__udivmoddi4+0x160>
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d302      	bcc.n	8000b80 <__udivmoddi4+0xd4>
 8000b7a:	4282      	cmp	r2, r0
 8000b7c:	f200 80f9 	bhi.w	8000d72 <__udivmoddi4+0x2c6>
 8000b80:	1a84      	subs	r4, r0, r2
 8000b82:	eb61 0303 	sbc.w	r3, r1, r3
 8000b86:	2001      	movs	r0, #1
 8000b88:	469e      	mov	lr, r3
 8000b8a:	2d00      	cmp	r5, #0
 8000b8c:	d0e0      	beq.n	8000b50 <__udivmoddi4+0xa4>
 8000b8e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b92:	e7dd      	b.n	8000b50 <__udivmoddi4+0xa4>
 8000b94:	b902      	cbnz	r2, 8000b98 <__udivmoddi4+0xec>
 8000b96:	deff      	udf	#255	; 0xff
 8000b98:	fab2 f282 	clz	r2, r2
 8000b9c:	2a00      	cmp	r2, #0
 8000b9e:	f040 8092 	bne.w	8000cc6 <__udivmoddi4+0x21a>
 8000ba2:	eba1 010c 	sub.w	r1, r1, ip
 8000ba6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000baa:	fa1f fe8c 	uxth.w	lr, ip
 8000bae:	2601      	movs	r6, #1
 8000bb0:	0c20      	lsrs	r0, r4, #16
 8000bb2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bb6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bbe:	fb0e f003 	mul.w	r0, lr, r3
 8000bc2:	4288      	cmp	r0, r1
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x12c>
 8000bc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bca:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x12a>
 8000bd0:	4288      	cmp	r0, r1
 8000bd2:	f200 80cb 	bhi.w	8000d6c <__udivmoddi4+0x2c0>
 8000bd6:	4643      	mov	r3, r8
 8000bd8:	1a09      	subs	r1, r1, r0
 8000bda:	b2a4      	uxth	r4, r4
 8000bdc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000be0:	fb07 1110 	mls	r1, r7, r0, r1
 8000be4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000be8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bec:	45a6      	cmp	lr, r4
 8000bee:	d908      	bls.n	8000c02 <__udivmoddi4+0x156>
 8000bf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bf8:	d202      	bcs.n	8000c00 <__udivmoddi4+0x154>
 8000bfa:	45a6      	cmp	lr, r4
 8000bfc:	f200 80bb 	bhi.w	8000d76 <__udivmoddi4+0x2ca>
 8000c00:	4608      	mov	r0, r1
 8000c02:	eba4 040e 	sub.w	r4, r4, lr
 8000c06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c0a:	e79c      	b.n	8000b46 <__udivmoddi4+0x9a>
 8000c0c:	f1c6 0720 	rsb	r7, r6, #32
 8000c10:	40b3      	lsls	r3, r6
 8000c12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c1a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c22:	431c      	orrs	r4, r3
 8000c24:	40f9      	lsrs	r1, r7
 8000c26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c2a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c2e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c32:	0c20      	lsrs	r0, r4, #16
 8000c34:	fa1f fe8c 	uxth.w	lr, ip
 8000c38:	fb09 1118 	mls	r1, r9, r8, r1
 8000c3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c40:	fb08 f00e 	mul.w	r0, r8, lr
 8000c44:	4288      	cmp	r0, r1
 8000c46:	fa02 f206 	lsl.w	r2, r2, r6
 8000c4a:	d90b      	bls.n	8000c64 <__udivmoddi4+0x1b8>
 8000c4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c50:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c54:	f080 8088 	bcs.w	8000d68 <__udivmoddi4+0x2bc>
 8000c58:	4288      	cmp	r0, r1
 8000c5a:	f240 8085 	bls.w	8000d68 <__udivmoddi4+0x2bc>
 8000c5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c62:	4461      	add	r1, ip
 8000c64:	1a09      	subs	r1, r1, r0
 8000c66:	b2a4      	uxth	r4, r4
 8000c68:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c6c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c70:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c78:	458e      	cmp	lr, r1
 8000c7a:	d908      	bls.n	8000c8e <__udivmoddi4+0x1e2>
 8000c7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c80:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c84:	d26c      	bcs.n	8000d60 <__udivmoddi4+0x2b4>
 8000c86:	458e      	cmp	lr, r1
 8000c88:	d96a      	bls.n	8000d60 <__udivmoddi4+0x2b4>
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	4461      	add	r1, ip
 8000c8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c92:	fba0 9402 	umull	r9, r4, r0, r2
 8000c96:	eba1 010e 	sub.w	r1, r1, lr
 8000c9a:	42a1      	cmp	r1, r4
 8000c9c:	46c8      	mov	r8, r9
 8000c9e:	46a6      	mov	lr, r4
 8000ca0:	d356      	bcc.n	8000d50 <__udivmoddi4+0x2a4>
 8000ca2:	d053      	beq.n	8000d4c <__udivmoddi4+0x2a0>
 8000ca4:	b15d      	cbz	r5, 8000cbe <__udivmoddi4+0x212>
 8000ca6:	ebb3 0208 	subs.w	r2, r3, r8
 8000caa:	eb61 010e 	sbc.w	r1, r1, lr
 8000cae:	fa01 f707 	lsl.w	r7, r1, r7
 8000cb2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cb6:	40f1      	lsrs	r1, r6
 8000cb8:	431f      	orrs	r7, r3
 8000cba:	e9c5 7100 	strd	r7, r1, [r5]
 8000cbe:	2600      	movs	r6, #0
 8000cc0:	4631      	mov	r1, r6
 8000cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc6:	f1c2 0320 	rsb	r3, r2, #32
 8000cca:	40d8      	lsrs	r0, r3
 8000ccc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cd4:	4091      	lsls	r1, r2
 8000cd6:	4301      	orrs	r1, r0
 8000cd8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cdc:	fa1f fe8c 	uxth.w	lr, ip
 8000ce0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ce4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ce8:	0c0b      	lsrs	r3, r1, #16
 8000cea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cee:	fb00 f60e 	mul.w	r6, r0, lr
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x260>
 8000cfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d02:	d22f      	bcs.n	8000d64 <__udivmoddi4+0x2b8>
 8000d04:	429e      	cmp	r6, r3
 8000d06:	d92d      	bls.n	8000d64 <__udivmoddi4+0x2b8>
 8000d08:	3802      	subs	r0, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	b289      	uxth	r1, r1
 8000d10:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d14:	fb07 3316 	mls	r3, r7, r6, r3
 8000d18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d20:	428b      	cmp	r3, r1
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x28a>
 8000d24:	eb1c 0101 	adds.w	r1, ip, r1
 8000d28:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d2c:	d216      	bcs.n	8000d5c <__udivmoddi4+0x2b0>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d914      	bls.n	8000d5c <__udivmoddi4+0x2b0>
 8000d32:	3e02      	subs	r6, #2
 8000d34:	4461      	add	r1, ip
 8000d36:	1ac9      	subs	r1, r1, r3
 8000d38:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d3c:	e738      	b.n	8000bb0 <__udivmoddi4+0x104>
 8000d3e:	462e      	mov	r6, r5
 8000d40:	4628      	mov	r0, r5
 8000d42:	e705      	b.n	8000b50 <__udivmoddi4+0xa4>
 8000d44:	4606      	mov	r6, r0
 8000d46:	e6e3      	b.n	8000b10 <__udivmoddi4+0x64>
 8000d48:	4618      	mov	r0, r3
 8000d4a:	e6f8      	b.n	8000b3e <__udivmoddi4+0x92>
 8000d4c:	454b      	cmp	r3, r9
 8000d4e:	d2a9      	bcs.n	8000ca4 <__udivmoddi4+0x1f8>
 8000d50:	ebb9 0802 	subs.w	r8, r9, r2
 8000d54:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d58:	3801      	subs	r0, #1
 8000d5a:	e7a3      	b.n	8000ca4 <__udivmoddi4+0x1f8>
 8000d5c:	4646      	mov	r6, r8
 8000d5e:	e7ea      	b.n	8000d36 <__udivmoddi4+0x28a>
 8000d60:	4620      	mov	r0, r4
 8000d62:	e794      	b.n	8000c8e <__udivmoddi4+0x1e2>
 8000d64:	4640      	mov	r0, r8
 8000d66:	e7d1      	b.n	8000d0c <__udivmoddi4+0x260>
 8000d68:	46d0      	mov	r8, sl
 8000d6a:	e77b      	b.n	8000c64 <__udivmoddi4+0x1b8>
 8000d6c:	3b02      	subs	r3, #2
 8000d6e:	4461      	add	r1, ip
 8000d70:	e732      	b.n	8000bd8 <__udivmoddi4+0x12c>
 8000d72:	4630      	mov	r0, r6
 8000d74:	e709      	b.n	8000b8a <__udivmoddi4+0xde>
 8000d76:	4464      	add	r4, ip
 8000d78:	3802      	subs	r0, #2
 8000d7a:	e742      	b.n	8000c02 <__udivmoddi4+0x156>

08000d7c <__aeabi_idiv0>:
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop

08000d80 <DWT_Delay_Init>:
uint16_t SUM; uint8_t Presence = 0;

#include "DHT.h"

uint32_t DWT_Delay_Init(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000d84:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <DWT_Delay_Init+0x58>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	4a13      	ldr	r2, [pc, #76]	; (8000dd8 <DWT_Delay_Init+0x58>)
 8000d8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000d8e:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000d90:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <DWT_Delay_Init+0x58>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	4a10      	ldr	r2, [pc, #64]	; (8000dd8 <DWT_Delay_Init+0x58>)
 8000d96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d9a:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000d9c:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <DWT_Delay_Init+0x5c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a0e      	ldr	r2, [pc, #56]	; (8000ddc <DWT_Delay_Init+0x5c>)
 8000da2:	f023 0301 	bic.w	r3, r3, #1
 8000da6:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <DWT_Delay_Init+0x5c>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a0b      	ldr	r2, [pc, #44]	; (8000ddc <DWT_Delay_Init+0x5c>)
 8000dae:	f043 0301 	orr.w	r3, r3, #1
 8000db2:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000db4:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <DWT_Delay_Init+0x5c>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000dba:	bf00      	nop
     __ASM volatile ("NOP");
 8000dbc:	bf00      	nop
  __ASM volatile ("NOP");
 8000dbe:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <DWT_Delay_Init+0x5c>)
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000dc8:	2300      	movs	r3, #0
 8000dca:	e000      	b.n	8000dce <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000dcc:	2301      	movs	r3, #1
  }
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	e000edf0 	.word	0xe000edf0
 8000ddc:	e0001000 	.word	0xe0001000

08000de0 <delay>:

__STATIC_INLINE void delay(volatile uint32_t microseconds)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000de8:	4b0d      	ldr	r3, [pc, #52]	; (8000e20 <delay+0x40>)
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000dee:	f002 fd81 	bl	80038f4 <HAL_RCC_GetHCLKFreq>
 8000df2:	4603      	mov	r3, r0
 8000df4:	4a0b      	ldr	r2, [pc, #44]	; (8000e24 <delay+0x44>)
 8000df6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dfa:	0c9b      	lsrs	r3, r3, #18
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	fb02 f303 	mul.w	r3, r2, r3
 8000e02:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000e04:	bf00      	nop
 8000e06:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <delay+0x40>)
 8000e08:	685a      	ldr	r2, [r3, #4]
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	1ad2      	subs	r2, r2, r3
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d3f8      	bcc.n	8000e06 <delay+0x26>
}
 8000e14:	bf00      	nop
 8000e16:	bf00      	nop
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	e0001000 	.word	0xe0001000
 8000e24:	431bde83 	.word	0x431bde83

08000e28 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b088      	sub	sp, #32
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	460b      	mov	r3, r1
 8000e32:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e34:	f107 030c 	add.w	r3, r7, #12
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000e44:	887b      	ldrh	r3, [r7, #2]
 8000e46:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000e50:	f107 030c 	add.w	r3, r7, #12
 8000e54:	4619      	mov	r1, r3
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f001 ff32 	bl	8002cc0 <HAL_GPIO_Init>
}
 8000e5c:	bf00      	nop
 8000e5e:	3720      	adds	r7, #32
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b088      	sub	sp, #32
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 030c 	add.w	r3, r7, #12
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000e80:	887b      	ldrh	r3, [r7, #2]
 8000e82:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e84:	2300      	movs	r3, #0
 8000e86:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000e8c:	f107 030c 	add.w	r3, r7, #12
 8000e90:	4619      	mov	r1, r3
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f001 ff14 	bl	8002cc0 <HAL_GPIO_Init>
}
 8000e98:	bf00      	nop
 8000e9a:	3720      	adds	r7, #32
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <DHT_Start>:


void DHT_Start (void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8000ea4:	f7ff ff6c 	bl	8000d80 <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8000ea8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eac:	480e      	ldr	r0, [pc, #56]	; (8000ee8 <DHT_Start+0x48>)
 8000eae:	f7ff ffbb 	bl	8000e28 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eb8:	480b      	ldr	r0, [pc, #44]	; (8000ee8 <DHT_Start+0x48>)
 8000eba:	f002 f89d 	bl	8002ff8 <HAL_GPIO_WritePin>

#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
 8000ebe:	f244 6050 	movw	r0, #18000	; 0x4650
 8000ec2:	f7ff ff8d 	bl	8000de0 <delay>

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ecc:	4806      	ldr	r0, [pc, #24]	; (8000ee8 <DHT_Start+0x48>)
 8000ece:	f002 f893 	bl	8002ff8 <HAL_GPIO_WritePin>
    delay (20);   // wait for 30us
 8000ed2:	2014      	movs	r0, #20
 8000ed4:	f7ff ff84 	bl	8000de0 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 8000ed8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000edc:	4802      	ldr	r0, [pc, #8]	; (8000ee8 <DHT_Start+0x48>)
 8000ede:	f7ff ffc1 	bl	8000e64 <Set_Pin_Input>
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40020000 	.word	0x40020000

08000eec <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	71fb      	strb	r3, [r7, #7]
	delay (40);
 8000ef6:	2028      	movs	r0, #40	; 0x28
 8000ef8:	f7ff ff72 	bl	8000de0 <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8000efc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f00:	4811      	ldr	r0, [pc, #68]	; (8000f48 <DHT_Check_Response+0x5c>)
 8000f02:	f002 f861 	bl	8002fc8 <HAL_GPIO_ReadPin>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d10f      	bne.n	8000f2c <DHT_Check_Response+0x40>
	{
		delay (80);
 8000f0c:	2050      	movs	r0, #80	; 0x50
 8000f0e:	f7ff ff67 	bl	8000de0 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 8000f12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f16:	480c      	ldr	r0, [pc, #48]	; (8000f48 <DHT_Check_Response+0x5c>)
 8000f18:	f002 f856 	bl	8002fc8 <HAL_GPIO_ReadPin>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d002      	beq.n	8000f28 <DHT_Check_Response+0x3c>
 8000f22:	2301      	movs	r3, #1
 8000f24:	71fb      	strb	r3, [r7, #7]
 8000f26:	e001      	b.n	8000f2c <DHT_Check_Response+0x40>
		else Response = -1;
 8000f28:	23ff      	movs	r3, #255	; 0xff
 8000f2a:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 8000f2c:	bf00      	nop
 8000f2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f32:	4805      	ldr	r0, [pc, #20]	; (8000f48 <DHT_Check_Response+0x5c>)
 8000f34:	f002 f848 	bl	8002fc8 <HAL_GPIO_ReadPin>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d1f7      	bne.n	8000f2e <DHT_Check_Response+0x42>

	return Response;
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40020000 	.word	0x40020000

08000f4c <DHT_Read>:

uint8_t DHT_Read (void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000f52:	2300      	movs	r3, #0
 8000f54:	71bb      	strb	r3, [r7, #6]
 8000f56:	e03a      	b.n	8000fce <DHT_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 8000f58:	bf00      	nop
 8000f5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f5e:	4820      	ldr	r0, [pc, #128]	; (8000fe0 <DHT_Read+0x94>)
 8000f60:	f002 f832 	bl	8002fc8 <HAL_GPIO_ReadPin>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d0f7      	beq.n	8000f5a <DHT_Read+0xe>
		delay (40);   // wait for 40 us
 8000f6a:	2028      	movs	r0, #40	; 0x28
 8000f6c:	f7ff ff38 	bl	8000de0 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 8000f70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f74:	481a      	ldr	r0, [pc, #104]	; (8000fe0 <DHT_Read+0x94>)
 8000f76:	f002 f827 	bl	8002fc8 <HAL_GPIO_ReadPin>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d10e      	bne.n	8000f9e <DHT_Read+0x52>
		{
			i&= ~(1<<(7-j));   // write 0
 8000f80:	79bb      	ldrb	r3, [r7, #6]
 8000f82:	f1c3 0307 	rsb	r3, r3, #7
 8000f86:	2201      	movs	r2, #1
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	b25b      	sxtb	r3, r3
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	b25a      	sxtb	r2, r3
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	4013      	ands	r3, r2
 8000f98:	b25b      	sxtb	r3, r3
 8000f9a:	71fb      	strb	r3, [r7, #7]
 8000f9c:	e00b      	b.n	8000fb6 <DHT_Read+0x6a>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8000f9e:	79bb      	ldrb	r3, [r7, #6]
 8000fa0:	f1c3 0307 	rsb	r3, r3, #7
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	b25a      	sxtb	r2, r3
 8000fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	b25b      	sxtb	r3, r3
 8000fb4:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 8000fb6:	bf00      	nop
 8000fb8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fbc:	4808      	ldr	r0, [pc, #32]	; (8000fe0 <DHT_Read+0x94>)
 8000fbe:	f002 f803 	bl	8002fc8 <HAL_GPIO_ReadPin>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d1f7      	bne.n	8000fb8 <DHT_Read+0x6c>
	for (j=0;j<8;j++)
 8000fc8:	79bb      	ldrb	r3, [r7, #6]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	71bb      	strb	r3, [r7, #6]
 8000fce:	79bb      	ldrb	r3, [r7, #6]
 8000fd0:	2b07      	cmp	r3, #7
 8000fd2:	d9c1      	bls.n	8000f58 <DHT_Read+0xc>
	}
	return i;
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40020000 	.word	0x40020000

08000fe4 <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 8000fec:	f7ff ff58 	bl	8000ea0 <DHT_Start>
	Presence = DHT_Check_Response ();
 8000ff0:	f7ff ff7c 	bl	8000eec <DHT_Check_Response>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	4b23      	ldr	r3, [pc, #140]	; (8001088 <DHT_GetData+0xa4>)
 8000ffa:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 8000ffc:	f7ff ffa6 	bl	8000f4c <DHT_Read>
 8001000:	4603      	mov	r3, r0
 8001002:	461a      	mov	r2, r3
 8001004:	4b21      	ldr	r3, [pc, #132]	; (800108c <DHT_GetData+0xa8>)
 8001006:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 8001008:	f7ff ffa0 	bl	8000f4c <DHT_Read>
 800100c:	4603      	mov	r3, r0
 800100e:	461a      	mov	r2, r3
 8001010:	4b1f      	ldr	r3, [pc, #124]	; (8001090 <DHT_GetData+0xac>)
 8001012:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 8001014:	f7ff ff9a 	bl	8000f4c <DHT_Read>
 8001018:	4603      	mov	r3, r0
 800101a:	461a      	mov	r2, r3
 800101c:	4b1d      	ldr	r3, [pc, #116]	; (8001094 <DHT_GetData+0xb0>)
 800101e:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 8001020:	f7ff ff94 	bl	8000f4c <DHT_Read>
 8001024:	4603      	mov	r3, r0
 8001026:	461a      	mov	r2, r3
 8001028:	4b1b      	ldr	r3, [pc, #108]	; (8001098 <DHT_GetData+0xb4>)
 800102a:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 800102c:	f7ff ff8e 	bl	8000f4c <DHT_Read>
 8001030:	4603      	mov	r3, r0
 8001032:	b29a      	uxth	r2, r3
 8001034:	4b19      	ldr	r3, [pc, #100]	; (800109c <DHT_GetData+0xb8>)
 8001036:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 8001038:	4b18      	ldr	r3, [pc, #96]	; (800109c <DHT_GetData+0xb8>)
 800103a:	881b      	ldrh	r3, [r3, #0]
 800103c:	4619      	mov	r1, r3
 800103e:	4b13      	ldr	r3, [pc, #76]	; (800108c <DHT_GetData+0xa8>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	461a      	mov	r2, r3
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <DHT_GetData+0xac>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	4413      	add	r3, r2
 800104a:	4a12      	ldr	r2, [pc, #72]	; (8001094 <DHT_GetData+0xb0>)
 800104c:	7812      	ldrb	r2, [r2, #0]
 800104e:	4413      	add	r3, r2
 8001050:	4a11      	ldr	r2, [pc, #68]	; (8001098 <DHT_GetData+0xb4>)
 8001052:	7812      	ldrb	r2, [r2, #0]
 8001054:	4413      	add	r3, r2
 8001056:	4299      	cmp	r1, r3
 8001058:	d111      	bne.n	800107e <DHT_GetData+0x9a>
	{
		#if defined(TYPE_DHT11)
			DHT_Data->Temperature = Temp_byte1;
 800105a:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <DHT_GetData+0xb0>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	ee07 3a90 	vmov	s15, r3
 8001062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	edc3 7a00 	vstr	s15, [r3]
			DHT_Data->Humidity = Rh_byte1;
 800106c:	4b07      	ldr	r3, [pc, #28]	; (800108c <DHT_GetData+0xa8>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	ee07 3a90 	vmov	s15, r3
 8001074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	edc3 7a01 	vstr	s15, [r3, #4]
		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
		#endif
	}
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000092 	.word	0x20000092
 800108c:	2000008c 	.word	0x2000008c
 8001090:	2000008d 	.word	0x2000008d
 8001094:	2000008e 	.word	0x2000008e
 8001098:	2000008f 	.word	0x2000008f
 800109c:	20000090 	.word	0x20000090

080010a0 <ADC_ReadChannel>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint32_t ADC_ReadChannel(uint32_t channel)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]

  ADC_ChannelConfTypeDef sConfig = {0};
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]

  // Configure ADC channel
  sConfig.Channel = channel;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	60fb      	str	r3, [r7, #12]
  sConfig.Rank = 1;
 80010ba:	2301      	movs	r3, #1
 80010bc:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010be:	2300      	movs	r3, #0
 80010c0:	617b      	str	r3, [r7, #20]

  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80010c2:	f107 030c 	add.w	r3, r7, #12
 80010c6:	4619      	mov	r1, r3
 80010c8:	480d      	ldr	r0, [pc, #52]	; (8001100 <ADC_ReadChannel+0x60>)
 80010ca:	f001 fa27 	bl	800251c <HAL_ADC_ConfigChannel>

  // Start ADC conversion
  HAL_ADC_Start(&hadc1);
 80010ce:	480c      	ldr	r0, [pc, #48]	; (8001100 <ADC_ReadChannel+0x60>)
 80010d0:	f001 f8a4 	bl	800221c <HAL_ADC_Start>

  // Wait for conversion to complete
  uint32_t adcValue = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61fb      	str	r3, [r7, #28]

  if( HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK )
 80010d8:	f04f 31ff 	mov.w	r1, #4294967295
 80010dc:	4808      	ldr	r0, [pc, #32]	; (8001100 <ADC_ReadChannel+0x60>)
 80010de:	f001 f984 	bl	80023ea <HAL_ADC_PollForConversion>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d103      	bne.n	80010f0 <ADC_ReadChannel+0x50>
	  adcValue = HAL_ADC_GetValue(&hadc1);
 80010e8:	4805      	ldr	r0, [pc, #20]	; (8001100 <ADC_ReadChannel+0x60>)
 80010ea:	f001 fa09 	bl	8002500 <HAL_ADC_GetValue>
 80010ee:	61f8      	str	r0, [r7, #28]

  // Stop ADC conversion
  HAL_ADC_Stop(&hadc1);
 80010f0:	4803      	ldr	r0, [pc, #12]	; (8001100 <ADC_ReadChannel+0x60>)
 80010f2:	f001 f947 	bl	8002384 <HAL_ADC_Stop>

  return adcValue;
 80010f6:	69fb      	ldr	r3, [r7, #28]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3720      	adds	r7, #32
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000094 	.word	0x20000094
 8001104:	00000000 	.word	0x00000000

08001108 <LDRconversion>:

//LDR --------------------------------------
int LDRconversion(int raw_val){
 8001108:	b580      	push	{r7, lr}
 800110a:	b088      	sub	sp, #32
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  // Conversion rule
  double Vout = (double)raw_val * Vin / ( 4096.0 - 1.0 );// Conversion analog to voltage
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff fa0f 	bl	8000534 <__aeabi_i2d>
 8001116:	a326      	add	r3, pc, #152	; (adr r3, 80011b0 <LDRconversion+0xa8>)
 8001118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111c:	f7ff fa74 	bl	8000608 <__aeabi_dmul>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	4610      	mov	r0, r2
 8001126:	4619      	mov	r1, r3
 8001128:	a323      	add	r3, pc, #140	; (adr r3, 80011b8 <LDRconversion+0xb0>)
 800112a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112e:	f7ff fb95 	bl	800085c <__aeabi_ddiv>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	e9c7 2306 	strd	r2, r3, [r7, #24]
  double RLDR = (R * (Vin - Vout))/Vout; // Conversion voltage to resistance
 800113a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800113e:	a11c      	add	r1, pc, #112	; (adr r1, 80011b0 <LDRconversion+0xa8>)
 8001140:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001144:	f7ff f8a8 	bl	8000298 <__aeabi_dsub>
 8001148:	4602      	mov	r2, r0
 800114a:	460b      	mov	r3, r1
 800114c:	4610      	mov	r0, r2
 800114e:	4619      	mov	r1, r3
 8001150:	a31b      	add	r3, pc, #108	; (adr r3, 80011c0 <LDRconversion+0xb8>)
 8001152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001156:	f7ff fa57 	bl	8000608 <__aeabi_dmul>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	4610      	mov	r0, r2
 8001160:	4619      	mov	r1, r3
 8001162:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001166:	f7ff fb79 	bl	800085c <__aeabi_ddiv>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  int lux = 500/(RLDR/1000); // Conversion resitance to lumen
 8001172:	f04f 0200 	mov.w	r2, #0
 8001176:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <LDRconversion+0xa0>)
 8001178:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800117c:	f7ff fb6e 	bl	800085c <__aeabi_ddiv>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	f04f 0000 	mov.w	r0, #0
 8001188:	4908      	ldr	r1, [pc, #32]	; (80011ac <LDRconversion+0xa4>)
 800118a:	f7ff fb67 	bl	800085c <__aeabi_ddiv>
 800118e:	4602      	mov	r2, r0
 8001190:	460b      	mov	r3, r1
 8001192:	4610      	mov	r0, r2
 8001194:	4619      	mov	r1, r3
 8001196:	f7ff fc49 	bl	8000a2c <__aeabi_d2iz>
 800119a:	4603      	mov	r3, r0
 800119c:	60fb      	str	r3, [r7, #12]
  return lux;
 800119e:	68fb      	ldr	r3, [r7, #12]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3720      	adds	r7, #32
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	408f4000 	.word	0x408f4000
 80011ac:	407f4000 	.word	0x407f4000
 80011b0:	66666666 	.word	0x66666666
 80011b4:	400a6666 	.word	0x400a6666
 80011b8:	00000000 	.word	0x00000000
 80011bc:	40affe00 	.word	0x40affe00
 80011c0:	00000000 	.word	0x00000000
 80011c4:	40c38800 	.word	0x40c38800

080011c8 <Light_intensity_readData>:

void Light_intensity_readData(){
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
	int LDRval = 0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	607b      	str	r3, [r7, #4]

	LDRval = ADC_ReadChannel(ADC_CHANNEL_0);
 80011d2:	2000      	movs	r0, #0
 80011d4:	f7ff ff64 	bl	80010a0 <ADC_ReadChannel>
 80011d8:	4603      	mov	r3, r0
 80011da:	607b      	str	r3, [r7, #4]

	//HAL_UART_Transmit(&huart2, (uint8_t*)str, sprintf(str, "LDR00-%d\r\n", LDRval )  , 10 );

	light = LDRconversion(LDRval);
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f7ff ff93 	bl	8001108 <LDRconversion>
 80011e2:	4603      	mov	r3, r0
 80011e4:	4a02      	ldr	r2, [pc, #8]	; (80011f0 <Light_intensity_readData+0x28>)
 80011e6:	6013      	str	r3, [r2, #0]
}
 80011e8:	bf00      	nop
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	200001ac 	.word	0x200001ac
 80011f4:	00000000 	.word	0x00000000

080011f8 <SoilMoisturePercentage>:

//Soil Moisture ----------------------------
double SoilMoisturePercentage(int raw_val){
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]

  double percentage = 100 - ( (double)raw_val / ( 4096.0 - 1.0 ) ) * 100;
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f7ff f997 	bl	8000534 <__aeabi_i2d>
 8001206:	a313      	add	r3, pc, #76	; (adr r3, 8001254 <SoilMoisturePercentage+0x5c>)
 8001208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120c:	f7ff fb26 	bl	800085c <__aeabi_ddiv>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	4610      	mov	r0, r2
 8001216:	4619      	mov	r1, r3
 8001218:	f04f 0200 	mov.w	r2, #0
 800121c:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <SoilMoisturePercentage+0x58>)
 800121e:	f7ff f9f3 	bl	8000608 <__aeabi_dmul>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	f04f 0000 	mov.w	r0, #0
 800122a:	4909      	ldr	r1, [pc, #36]	; (8001250 <SoilMoisturePercentage+0x58>)
 800122c:	f7ff f834 	bl	8000298 <__aeabi_dsub>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	e9c7 2302 	strd	r2, r3, [r7, #8]

  return percentage;
 8001238:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800123c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001240:	eeb0 0a47 	vmov.f32	s0, s14
 8001244:	eef0 0a67 	vmov.f32	s1, s15
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40590000 	.word	0x40590000
 8001254:	00000000 	.word	0x00000000
 8001258:	40affe00 	.word	0x40affe00

0800125c <Soil_moisture_readData>:

void Soil_moisture_readData(){
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
	int SoilMoistval = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	607b      	str	r3, [r7, #4]

	SoilMoistval = ADC_ReadChannel(ADC_CHANNEL_1);
 8001266:	2001      	movs	r0, #1
 8001268:	f7ff ff1a 	bl	80010a0 <ADC_ReadChannel>
 800126c:	4603      	mov	r3, r0
 800126e:	607b      	str	r3, [r7, #4]

	//HAL_UART_Transmit(&huart2, (uint8_t*)str, sprintf(str, "Soil01-%d\r\n", SoilMoistval )  , 10 );

	soilMoist = SoilMoisturePercentage(SoilMoistval);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff ffc1 	bl	80011f8 <SoilMoisturePercentage>
 8001276:	eeb0 7a40 	vmov.f32	s14, s0
 800127a:	eef0 7a60 	vmov.f32	s15, s1
 800127e:	4b03      	ldr	r3, [pc, #12]	; (800128c <Soil_moisture_readData+0x30>)
 8001280:	ed83 7b00 	vstr	d7, [r3]

}
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	200001b0 	.word	0x200001b0

08001290 <Temp_Humid_readData>:

//Temperature and Humidity -----------------
void Temp_Humid_readData(){
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0

	DHT_GetData(&DHT11_Data);
 8001294:	480c      	ldr	r0, [pc, #48]	; (80012c8 <Temp_Humid_readData+0x38>)
 8001296:	f7ff fea5 	bl	8000fe4 <DHT_GetData>
	tmpHumid.tCelsius = DHT11_Data.Temperature;
 800129a:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <Temp_Humid_readData+0x38>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff f95a 	bl	8000558 <__aeabi_f2d>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	4908      	ldr	r1, [pc, #32]	; (80012cc <Temp_Humid_readData+0x3c>)
 80012aa:	e9c1 2300 	strd	r2, r3, [r1]
	tmpHumid.humidity = DHT11_Data.Humidity;
 80012ae:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <Temp_Humid_readData+0x38>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff f950 	bl	8000558 <__aeabi_f2d>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	4903      	ldr	r1, [pc, #12]	; (80012cc <Temp_Humid_readData+0x3c>)
 80012be:	e9c1 2302 	strd	r2, r3, [r1, #8]

}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	200005b8 	.word	0x200005b8
 80012cc:	200001b8 	.word	0x200001b8

080012d0 <HAL_UART_RxCpltCallback>:

//For Interact with NodeMCU
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b090      	sub	sp, #64	; 0x40
 80012d4:	af06      	add	r7, sp, #24
 80012d6:	6078      	str	r0, [r7, #4]

	if( huart == &huart1 ){
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a4b      	ldr	r2, [pc, #300]	; (8001408 <HAL_UART_RxCpltCallback+0x138>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	f040 808e 	bne.w	80013fe <HAL_UART_RxCpltCallback+0x12e>
		int tInt = tmpHumid.tCelsius, tFloat = (int)( tmpHumid.tCelsius * 10 ) % 10;
 80012e2:	4b4a      	ldr	r3, [pc, #296]	; (800140c <HAL_UART_RxCpltCallback+0x13c>)
 80012e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e8:	4610      	mov	r0, r2
 80012ea:	4619      	mov	r1, r3
 80012ec:	f7ff fb9e 	bl	8000a2c <__aeabi_d2iz>
 80012f0:	4603      	mov	r3, r0
 80012f2:	627b      	str	r3, [r7, #36]	; 0x24
 80012f4:	4b45      	ldr	r3, [pc, #276]	; (800140c <HAL_UART_RxCpltCallback+0x13c>)
 80012f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012fa:	f04f 0200 	mov.w	r2, #0
 80012fe:	4b44      	ldr	r3, [pc, #272]	; (8001410 <HAL_UART_RxCpltCallback+0x140>)
 8001300:	f7ff f982 	bl	8000608 <__aeabi_dmul>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	4610      	mov	r0, r2
 800130a:	4619      	mov	r1, r3
 800130c:	f7ff fb8e 	bl	8000a2c <__aeabi_d2iz>
 8001310:	4602      	mov	r2, r0
 8001312:	4b40      	ldr	r3, [pc, #256]	; (8001414 <HAL_UART_RxCpltCallback+0x144>)
 8001314:	fb83 1302 	smull	r1, r3, r3, r2
 8001318:	1099      	asrs	r1, r3, #2
 800131a:	17d3      	asrs	r3, r2, #31
 800131c:	1ac9      	subs	r1, r1, r3
 800131e:	460b      	mov	r3, r1
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	440b      	add	r3, r1
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	623b      	str	r3, [r7, #32]
		int aInt = tmpHumid.humidity, aFloat = (int)( tmpHumid.humidity * 10 ) % 10;
 800132a:	4b38      	ldr	r3, [pc, #224]	; (800140c <HAL_UART_RxCpltCallback+0x13c>)
 800132c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001330:	4610      	mov	r0, r2
 8001332:	4619      	mov	r1, r3
 8001334:	f7ff fb7a 	bl	8000a2c <__aeabi_d2iz>
 8001338:	4603      	mov	r3, r0
 800133a:	61fb      	str	r3, [r7, #28]
 800133c:	4b33      	ldr	r3, [pc, #204]	; (800140c <HAL_UART_RxCpltCallback+0x13c>)
 800133e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001342:	f04f 0200 	mov.w	r2, #0
 8001346:	4b32      	ldr	r3, [pc, #200]	; (8001410 <HAL_UART_RxCpltCallback+0x140>)
 8001348:	f7ff f95e 	bl	8000608 <__aeabi_dmul>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	4610      	mov	r0, r2
 8001352:	4619      	mov	r1, r3
 8001354:	f7ff fb6a 	bl	8000a2c <__aeabi_d2iz>
 8001358:	4602      	mov	r2, r0
 800135a:	4b2e      	ldr	r3, [pc, #184]	; (8001414 <HAL_UART_RxCpltCallback+0x144>)
 800135c:	fb83 1302 	smull	r1, r3, r3, r2
 8001360:	1099      	asrs	r1, r3, #2
 8001362:	17d3      	asrs	r3, r2, #31
 8001364:	1ac9      	subs	r1, r1, r3
 8001366:	460b      	mov	r3, r1
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	440b      	add	r3, r1
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	61bb      	str	r3, [r7, #24]
		int l = light;
 8001372:	4b29      	ldr	r3, [pc, #164]	; (8001418 <HAL_UART_RxCpltCallback+0x148>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	617b      	str	r3, [r7, #20]
		int sInt = soilMoist, sFloat = (int)( soilMoist * 10 ) % 10;
 8001378:	4b28      	ldr	r3, [pc, #160]	; (800141c <HAL_UART_RxCpltCallback+0x14c>)
 800137a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137e:	4610      	mov	r0, r2
 8001380:	4619      	mov	r1, r3
 8001382:	f7ff fb53 	bl	8000a2c <__aeabi_d2iz>
 8001386:	4603      	mov	r3, r0
 8001388:	613b      	str	r3, [r7, #16]
 800138a:	4b24      	ldr	r3, [pc, #144]	; (800141c <HAL_UART_RxCpltCallback+0x14c>)
 800138c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001390:	f04f 0200 	mov.w	r2, #0
 8001394:	4b1e      	ldr	r3, [pc, #120]	; (8001410 <HAL_UART_RxCpltCallback+0x140>)
 8001396:	f7ff f937 	bl	8000608 <__aeabi_dmul>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	4610      	mov	r0, r2
 80013a0:	4619      	mov	r1, r3
 80013a2:	f7ff fb43 	bl	8000a2c <__aeabi_d2iz>
 80013a6:	4602      	mov	r2, r0
 80013a8:	4b1a      	ldr	r3, [pc, #104]	; (8001414 <HAL_UART_RxCpltCallback+0x144>)
 80013aa:	fb83 1302 	smull	r1, r3, r3, r2
 80013ae:	1099      	asrs	r1, r3, #2
 80013b0:	17d3      	asrs	r3, r2, #31
 80013b2:	1ac9      	subs	r1, r1, r3
 80013b4:	460b      	mov	r3, r1
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	440b      	add	r3, r1
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	60fb      	str	r3, [r7, #12]

		sprintf(text, "{\"data\": {\"temperature\": %d.%d, \"airHumidity\": %d.%d, \"lightIntensity\": %d, \"soilHumidity\": %d.%d}}", tInt, tFloat, aInt, aFloat, l, sInt, sFloat);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	9304      	str	r3, [sp, #16]
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	9303      	str	r3, [sp, #12]
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	9302      	str	r3, [sp, #8]
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	9301      	str	r3, [sp, #4]
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	6a3b      	ldr	r3, [r7, #32]
 80013d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013d8:	4911      	ldr	r1, [pc, #68]	; (8001420 <HAL_UART_RxCpltCallback+0x150>)
 80013da:	4812      	ldr	r0, [pc, #72]	; (8001424 <HAL_UART_RxCpltCallback+0x154>)
 80013dc:	f004 f8ae 	bl	800553c <siprintf>

		HAL_UART_Transmit(&huart1, text, strlen(text), 100);
 80013e0:	4810      	ldr	r0, [pc, #64]	; (8001424 <HAL_UART_RxCpltCallback+0x154>)
 80013e2:	f7fe fefd 	bl	80001e0 <strlen>
 80013e6:	4603      	mov	r3, r0
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	2364      	movs	r3, #100	; 0x64
 80013ec:	490d      	ldr	r1, [pc, #52]	; (8001424 <HAL_UART_RxCpltCallback+0x154>)
 80013ee:	4806      	ldr	r0, [pc, #24]	; (8001408 <HAL_UART_RxCpltCallback+0x138>)
 80013f0:	f003 f847 	bl	8004482 <HAL_UART_Transmit>
	    //HAL_UART_Transmit(&huart2, text, strlen(text), 100); // internal uart
		HAL_UART_Receive_IT(&huart1, rx_data, 1);
 80013f4:	2201      	movs	r2, #1
 80013f6:	490c      	ldr	r1, [pc, #48]	; (8001428 <HAL_UART_RxCpltCallback+0x158>)
 80013f8:	4803      	ldr	r0, [pc, #12]	; (8001408 <HAL_UART_RxCpltCallback+0x138>)
 80013fa:	f003 f8d4 	bl	80045a6 <HAL_UART_Receive_IT>
	}

}
 80013fe:	bf00      	nop
 8001400:	3728      	adds	r7, #40	; 0x28
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000124 	.word	0x20000124
 800140c:	200001b8 	.word	0x200001b8
 8001410:	40240000 	.word	0x40240000
 8001414:	66666667 	.word	0x66666667
 8001418:	200001ac 	.word	0x200001ac
 800141c:	200001b0 	.word	0x200001b0
 8001420:	08005e30 	.word	0x08005e30
 8001424:	200001c8 	.word	0x200001c8
 8001428:	200005b0 	.word	0x200005b0

0800142c <Print_console>:

}

//Print kitten
//Notice: It is a very cute reporter.
void Print_console(){
 800142c:	b580      	push	{r7, lr}
 800142e:	b0a4      	sub	sp, #144	; 0x90
 8001430:	af00      	add	r7, sp, #0

	char escape_sequence2[16];
	sprintf(escape_sequence2, "\033[%d;%dH", 0, 0);
 8001432:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8001436:	2300      	movs	r3, #0
 8001438:	2200      	movs	r2, #0
 800143a:	49a3      	ldr	r1, [pc, #652]	; (80016c8 <Print_console+0x29c>)
 800143c:	f004 f87e 	bl	800553c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)escape_sequence2, strlen(escape_sequence2), HAL_MAX_DELAY);
 8001440:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001444:	4618      	mov	r0, r3
 8001446:	f7fe fecb 	bl	80001e0 <strlen>
 800144a:	4603      	mov	r3, r0
 800144c:	b29a      	uxth	r2, r3
 800144e:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8001452:	f04f 33ff 	mov.w	r3, #4294967295
 8001456:	489d      	ldr	r0, [pc, #628]	; (80016cc <Print_console+0x2a0>)
 8001458:	f003 f813 	bl	8004482 <HAL_UART_Transmit>


	char pData[100];

	int tInt = tmpHumid.tCelsius, tFloat = (int)( tmpHumid.tCelsius * 10 ) % 10;
 800145c:	4b9c      	ldr	r3, [pc, #624]	; (80016d0 <Print_console+0x2a4>)
 800145e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001462:	4610      	mov	r0, r2
 8001464:	4619      	mov	r1, r3
 8001466:	f7ff fae1 	bl	8000a2c <__aeabi_d2iz>
 800146a:	4603      	mov	r3, r0
 800146c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001470:	4b97      	ldr	r3, [pc, #604]	; (80016d0 <Print_console+0x2a4>)
 8001472:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001476:	f04f 0200 	mov.w	r2, #0
 800147a:	4b96      	ldr	r3, [pc, #600]	; (80016d4 <Print_console+0x2a8>)
 800147c:	f7ff f8c4 	bl	8000608 <__aeabi_dmul>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	4610      	mov	r0, r2
 8001486:	4619      	mov	r1, r3
 8001488:	f7ff fad0 	bl	8000a2c <__aeabi_d2iz>
 800148c:	4602      	mov	r2, r0
 800148e:	4b92      	ldr	r3, [pc, #584]	; (80016d8 <Print_console+0x2ac>)
 8001490:	fb83 1302 	smull	r1, r3, r3, r2
 8001494:	1099      	asrs	r1, r3, #2
 8001496:	17d3      	asrs	r3, r2, #31
 8001498:	1ac9      	subs	r1, r1, r3
 800149a:	460b      	mov	r3, r1
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	440b      	add	r3, r1
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	int aInt = tmpHumid.humidity, aFloat = (int)( tmpHumid.humidity * 10 ) % 10;
 80014a8:	4b89      	ldr	r3, [pc, #548]	; (80016d0 <Print_console+0x2a4>)
 80014aa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80014ae:	4610      	mov	r0, r2
 80014b0:	4619      	mov	r1, r3
 80014b2:	f7ff fabb 	bl	8000a2c <__aeabi_d2iz>
 80014b6:	4603      	mov	r3, r0
 80014b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80014bc:	4b84      	ldr	r3, [pc, #528]	; (80016d0 <Print_console+0x2a4>)
 80014be:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80014c2:	f04f 0200 	mov.w	r2, #0
 80014c6:	4b83      	ldr	r3, [pc, #524]	; (80016d4 <Print_console+0x2a8>)
 80014c8:	f7ff f89e 	bl	8000608 <__aeabi_dmul>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4610      	mov	r0, r2
 80014d2:	4619      	mov	r1, r3
 80014d4:	f7ff faaa 	bl	8000a2c <__aeabi_d2iz>
 80014d8:	4602      	mov	r2, r0
 80014da:	4b7f      	ldr	r3, [pc, #508]	; (80016d8 <Print_console+0x2ac>)
 80014dc:	fb83 1302 	smull	r1, r3, r3, r2
 80014e0:	1099      	asrs	r1, r3, #2
 80014e2:	17d3      	asrs	r3, r2, #31
 80014e4:	1ac9      	subs	r1, r1, r3
 80014e6:	460b      	mov	r3, r1
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	440b      	add	r3, r1
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	int l = light;
 80014f4:	4b79      	ldr	r3, [pc, #484]	; (80016dc <Print_console+0x2b0>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	67fb      	str	r3, [r7, #124]	; 0x7c
	int sInt = soilMoist, sFloat = (int)( soilMoist * 10 ) % 10;
 80014fa:	4b79      	ldr	r3, [pc, #484]	; (80016e0 <Print_console+0x2b4>)
 80014fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001500:	4610      	mov	r0, r2
 8001502:	4619      	mov	r1, r3
 8001504:	f7ff fa92 	bl	8000a2c <__aeabi_d2iz>
 8001508:	4603      	mov	r3, r0
 800150a:	67bb      	str	r3, [r7, #120]	; 0x78
 800150c:	4b74      	ldr	r3, [pc, #464]	; (80016e0 <Print_console+0x2b4>)
 800150e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001512:	f04f 0200 	mov.w	r2, #0
 8001516:	4b6f      	ldr	r3, [pc, #444]	; (80016d4 <Print_console+0x2a8>)
 8001518:	f7ff f876 	bl	8000608 <__aeabi_dmul>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	4610      	mov	r0, r2
 8001522:	4619      	mov	r1, r3
 8001524:	f7ff fa82 	bl	8000a2c <__aeabi_d2iz>
 8001528:	4602      	mov	r2, r0
 800152a:	4b6b      	ldr	r3, [pc, #428]	; (80016d8 <Print_console+0x2ac>)
 800152c:	fb83 1302 	smull	r1, r3, r3, r2
 8001530:	1099      	asrs	r1, r3, #2
 8001532:	17d3      	asrs	r3, r2, #31
 8001534:	1ac9      	subs	r1, r1, r3
 8001536:	460b      	mov	r3, r1
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	440b      	add	r3, r1
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	677b      	str	r3, [r7, #116]	; 0x74

	HAL_UART_Transmit(&huart2, (uint8_t*)pData, sprintf(pData, " __________________________\r\n" )  , 10 );
 8001542:	463b      	mov	r3, r7
 8001544:	4967      	ldr	r1, [pc, #412]	; (80016e4 <Print_console+0x2b8>)
 8001546:	4618      	mov	r0, r3
 8001548:	f003 fff8 	bl	800553c <siprintf>
 800154c:	4603      	mov	r3, r0
 800154e:	b29a      	uxth	r2, r3
 8001550:	4639      	mov	r1, r7
 8001552:	230a      	movs	r3, #10
 8001554:	485d      	ldr	r0, [pc, #372]	; (80016cc <Print_console+0x2a0>)
 8001556:	f002 ff94 	bl	8004482 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)pData, sprintf(pData, "|                          |\r\n" )  , 10 );
 800155a:	463b      	mov	r3, r7
 800155c:	4962      	ldr	r1, [pc, #392]	; (80016e8 <Print_console+0x2bc>)
 800155e:	4618      	mov	r0, r3
 8001560:	f003 ffec 	bl	800553c <siprintf>
 8001564:	4603      	mov	r3, r0
 8001566:	b29a      	uxth	r2, r3
 8001568:	4639      	mov	r1, r7
 800156a:	230a      	movs	r3, #10
 800156c:	4857      	ldr	r0, [pc, #348]	; (80016cc <Print_console+0x2a0>)
 800156e:	f002 ff88 	bl	8004482 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)pData, sprintf(pData, "|  let's plant <3          |\r\n" )  , 10 );
 8001572:	463b      	mov	r3, r7
 8001574:	495d      	ldr	r1, [pc, #372]	; (80016ec <Print_console+0x2c0>)
 8001576:	4618      	mov	r0, r3
 8001578:	f003 ffe0 	bl	800553c <siprintf>
 800157c:	4603      	mov	r3, r0
 800157e:	b29a      	uxth	r2, r3
 8001580:	4639      	mov	r1, r7
 8001582:	230a      	movs	r3, #10
 8001584:	4851      	ldr	r0, [pc, #324]	; (80016cc <Print_console+0x2a0>)
 8001586:	f002 ff7c 	bl	8004482 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)pData, sprintf(pData, "|  Light Intensity:   %4d |\r\n", light )  , 10 );
 800158a:	4b54      	ldr	r3, [pc, #336]	; (80016dc <Print_console+0x2b0>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	463b      	mov	r3, r7
 8001590:	4957      	ldr	r1, [pc, #348]	; (80016f0 <Print_console+0x2c4>)
 8001592:	4618      	mov	r0, r3
 8001594:	f003 ffd2 	bl	800553c <siprintf>
 8001598:	4603      	mov	r3, r0
 800159a:	b29a      	uxth	r2, r3
 800159c:	4639      	mov	r1, r7
 800159e:	230a      	movs	r3, #10
 80015a0:	484a      	ldr	r0, [pc, #296]	; (80016cc <Print_console+0x2a0>)
 80015a2:	f002 ff6e 	bl	8004482 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)pData, sprintf(pData, "|  Soil Moisture:    %3d.%d |\r\n", sInt, sFloat )  , 10 );
 80015a6:	4638      	mov	r0, r7
 80015a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80015aa:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80015ac:	4951      	ldr	r1, [pc, #324]	; (80016f4 <Print_console+0x2c8>)
 80015ae:	f003 ffc5 	bl	800553c <siprintf>
 80015b2:	4603      	mov	r3, r0
 80015b4:	b29a      	uxth	r2, r3
 80015b6:	4639      	mov	r1, r7
 80015b8:	230a      	movs	r3, #10
 80015ba:	4844      	ldr	r0, [pc, #272]	; (80016cc <Print_console+0x2a0>)
 80015bc:	f002 ff61 	bl	8004482 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)pData, sprintf(pData, "|  Temperature:    %3d.%d C |\r\n", tInt, tFloat )  , 10 );
 80015c0:	4638      	mov	r0, r7
 80015c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80015c6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80015ca:	494b      	ldr	r1, [pc, #300]	; (80016f8 <Print_console+0x2cc>)
 80015cc:	f003 ffb6 	bl	800553c <siprintf>
 80015d0:	4603      	mov	r3, r0
 80015d2:	b29a      	uxth	r2, r3
 80015d4:	4639      	mov	r1, r7
 80015d6:	230a      	movs	r3, #10
 80015d8:	483c      	ldr	r0, [pc, #240]	; (80016cc <Print_console+0x2a0>)
 80015da:	f002 ff52 	bl	8004482 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)pData, sprintf(pData, "|  Humidity:         %3d.%d |\r\n", aInt, aFloat )  , 10 );
 80015de:	4638      	mov	r0, r7
 80015e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80015e4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80015e8:	4944      	ldr	r1, [pc, #272]	; (80016fc <Print_console+0x2d0>)
 80015ea:	f003 ffa7 	bl	800553c <siprintf>
 80015ee:	4603      	mov	r3, r0
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	4639      	mov	r1, r7
 80015f4:	230a      	movs	r3, #10
 80015f6:	4835      	ldr	r0, [pc, #212]	; (80016cc <Print_console+0x2a0>)
 80015f8:	f002 ff43 	bl	8004482 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)pData, sprintf(pData, "|_______   ________________|\r\n" )  , 10 );
 80015fc:	463b      	mov	r3, r7
 80015fe:	4940      	ldr	r1, [pc, #256]	; (8001700 <Print_console+0x2d4>)
 8001600:	4618      	mov	r0, r3
 8001602:	f003 ff9b 	bl	800553c <siprintf>
 8001606:	4603      	mov	r3, r0
 8001608:	b29a      	uxth	r2, r3
 800160a:	4639      	mov	r1, r7
 800160c:	230a      	movs	r3, #10
 800160e:	482f      	ldr	r0, [pc, #188]	; (80016cc <Print_console+0x2a0>)
 8001610:	f002 ff37 	bl	8004482 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)pData, sprintf(pData, "         V\r\n" )  , 10 );
 8001614:	463b      	mov	r3, r7
 8001616:	493b      	ldr	r1, [pc, #236]	; (8001704 <Print_console+0x2d8>)
 8001618:	4618      	mov	r0, r3
 800161a:	f003 ff8f 	bl	800553c <siprintf>
 800161e:	4603      	mov	r3, r0
 8001620:	b29a      	uxth	r2, r3
 8001622:	4639      	mov	r1, r7
 8001624:	230a      	movs	r3, #10
 8001626:	4829      	ldr	r0, [pc, #164]	; (80016cc <Print_console+0x2a0>)
 8001628:	f002 ff2b 	bl	8004482 <HAL_UART_Transmit>


	if( animation == 0 ){
 800162c:	4b36      	ldr	r3, [pc, #216]	; (8001708 <Print_console+0x2dc>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d177      	bne.n	8001724 <Print_console+0x2f8>
		HAL_UART_Transmit(&huart2, (uint8_t*)pData, sprintf(pData, "      /\\_/\\   \r\n" )  , 10 );
 8001634:	463b      	mov	r3, r7
 8001636:	4935      	ldr	r1, [pc, #212]	; (800170c <Print_console+0x2e0>)
 8001638:	4618      	mov	r0, r3
 800163a:	f003 ff7f 	bl	800553c <siprintf>
 800163e:	4603      	mov	r3, r0
 8001640:	b29a      	uxth	r2, r3
 8001642:	4639      	mov	r1, r7
 8001644:	230a      	movs	r3, #10
 8001646:	4821      	ldr	r0, [pc, #132]	; (80016cc <Print_console+0x2a0>)
 8001648:	f002 ff1b 	bl	8004482 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)pData, sprintf(pData, "     ( o.o )  \r\n" )  , 10 );
 800164c:	463b      	mov	r3, r7
 800164e:	4930      	ldr	r1, [pc, #192]	; (8001710 <Print_console+0x2e4>)
 8001650:	4618      	mov	r0, r3
 8001652:	f003 ff73 	bl	800553c <siprintf>
 8001656:	4603      	mov	r3, r0
 8001658:	b29a      	uxth	r2, r3
 800165a:	4639      	mov	r1, r7
 800165c:	230a      	movs	r3, #10
 800165e:	481b      	ldr	r0, [pc, #108]	; (80016cc <Print_console+0x2a0>)
 8001660:	f002 ff0f 	bl	8004482 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)pData, sprintf(pData, "      > ^ <   \r\n" )  , 10 );
 8001664:	463b      	mov	r3, r7
 8001666:	492b      	ldr	r1, [pc, #172]	; (8001714 <Print_console+0x2e8>)
 8001668:	4618      	mov	r0, r3
 800166a:	f003 ff67 	bl	800553c <siprintf>
 800166e:	4603      	mov	r3, r0
 8001670:	b29a      	uxth	r2, r3
 8001672:	4639      	mov	r1, r7
 8001674:	230a      	movs	r3, #10
 8001676:	4815      	ldr	r0, [pc, #84]	; (80016cc <Print_console+0x2a0>)
 8001678:	f002 ff03 	bl	8004482 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)pData, sprintf(pData, "    /  \\_/  \\ \r\n" )  , 10 );
 800167c:	463b      	mov	r3, r7
 800167e:	4926      	ldr	r1, [pc, #152]	; (8001718 <Print_console+0x2ec>)
 8001680:	4618      	mov	r0, r3
 8001682:	f003 ff5b 	bl	800553c <siprintf>
 8001686:	4603      	mov	r3, r0
 8001688:	b29a      	uxth	r2, r3
 800168a:	4639      	mov	r1, r7
 800168c:	230a      	movs	r3, #10
 800168e:	480f      	ldr	r0, [pc, #60]	; (80016cc <Print_console+0x2a0>)
 8001690:	f002 fef7 	bl	8004482 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)pData, sprintf(pData, "   /  ^   ^  \\ \r\n" )  , 10 );
 8001694:	463b      	mov	r3, r7
 8001696:	4921      	ldr	r1, [pc, #132]	; (800171c <Print_console+0x2f0>)
 8001698:	4618      	mov	r0, r3
 800169a:	f003 ff4f 	bl	800553c <siprintf>
 800169e:	4603      	mov	r3, r0
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	4639      	mov	r1, r7
 80016a4:	230a      	movs	r3, #10
 80016a6:	4809      	ldr	r0, [pc, #36]	; (80016cc <Print_console+0x2a0>)
 80016a8:	f002 feeb 	bl	8004482 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)pData, sprintf(pData, "  /__^__|__^__\\ \r\n" )  , 10 );
 80016ac:	463b      	mov	r3, r7
 80016ae:	491c      	ldr	r1, [pc, #112]	; (8001720 <Print_console+0x2f4>)
 80016b0:	4618      	mov	r0, r3
 80016b2:	f003 ff43 	bl	800553c <siprintf>
 80016b6:	4603      	mov	r3, r0
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	4639      	mov	r1, r7
 80016bc:	230a      	movs	r3, #10
 80016be:	4803      	ldr	r0, [pc, #12]	; (80016cc <Print_console+0x2a0>)
 80016c0:	f002 fedf 	bl	8004482 <HAL_UART_Transmit>
 80016c4:	e076      	b.n	80017b4 <Print_console+0x388>
 80016c6:	bf00      	nop
 80016c8:	08005e94 	.word	0x08005e94
 80016cc:	20000168 	.word	0x20000168
 80016d0:	200001b8 	.word	0x200001b8
 80016d4:	40240000 	.word	0x40240000
 80016d8:	66666667 	.word	0x66666667
 80016dc:	200001ac 	.word	0x200001ac
 80016e0:	200001b0 	.word	0x200001b0
 80016e4:	08005ea0 	.word	0x08005ea0
 80016e8:	08005ec0 	.word	0x08005ec0
 80016ec:	08005ee0 	.word	0x08005ee0
 80016f0:	08005f00 	.word	0x08005f00
 80016f4:	08005f20 	.word	0x08005f20
 80016f8:	08005f40 	.word	0x08005f40
 80016fc:	08005f60 	.word	0x08005f60
 8001700:	08005f80 	.word	0x08005f80
 8001704:	08005fa0 	.word	0x08005fa0
 8001708:	200005b4 	.word	0x200005b4
 800170c:	08005fb0 	.word	0x08005fb0
 8001710:	08005fc4 	.word	0x08005fc4
 8001714:	08005fd8 	.word	0x08005fd8
 8001718:	08005fec 	.word	0x08005fec
 800171c:	08006000 	.word	0x08006000
 8001720:	08006014 	.word	0x08006014
	}else{
		HAL_UART_Transmit(&huart2, (uint8_t*)pData, sprintf(pData, "      /\\_/\\   \r\n" )  , 10 );
 8001724:	463b      	mov	r3, r7
 8001726:	492a      	ldr	r1, [pc, #168]	; (80017d0 <Print_console+0x3a4>)
 8001728:	4618      	mov	r0, r3
 800172a:	f003 ff07 	bl	800553c <siprintf>
 800172e:	4603      	mov	r3, r0
 8001730:	b29a      	uxth	r2, r3
 8001732:	4639      	mov	r1, r7
 8001734:	230a      	movs	r3, #10
 8001736:	4827      	ldr	r0, [pc, #156]	; (80017d4 <Print_console+0x3a8>)
 8001738:	f002 fea3 	bl	8004482 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)pData, sprintf(pData, "     ( -.- )  \r\n" )  , 10 );
 800173c:	463b      	mov	r3, r7
 800173e:	4926      	ldr	r1, [pc, #152]	; (80017d8 <Print_console+0x3ac>)
 8001740:	4618      	mov	r0, r3
 8001742:	f003 fefb 	bl	800553c <siprintf>
 8001746:	4603      	mov	r3, r0
 8001748:	b29a      	uxth	r2, r3
 800174a:	4639      	mov	r1, r7
 800174c:	230a      	movs	r3, #10
 800174e:	4821      	ldr	r0, [pc, #132]	; (80017d4 <Print_console+0x3a8>)
 8001750:	f002 fe97 	bl	8004482 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)pData, sprintf(pData, "      > ^ <   \r\n" )  , 10 );
 8001754:	463b      	mov	r3, r7
 8001756:	4921      	ldr	r1, [pc, #132]	; (80017dc <Print_console+0x3b0>)
 8001758:	4618      	mov	r0, r3
 800175a:	f003 feef 	bl	800553c <siprintf>
 800175e:	4603      	mov	r3, r0
 8001760:	b29a      	uxth	r2, r3
 8001762:	4639      	mov	r1, r7
 8001764:	230a      	movs	r3, #10
 8001766:	481b      	ldr	r0, [pc, #108]	; (80017d4 <Print_console+0x3a8>)
 8001768:	f002 fe8b 	bl	8004482 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)pData, sprintf(pData, "    /  \\_/  \\ \r\n" )  , 10 );
 800176c:	463b      	mov	r3, r7
 800176e:	491c      	ldr	r1, [pc, #112]	; (80017e0 <Print_console+0x3b4>)
 8001770:	4618      	mov	r0, r3
 8001772:	f003 fee3 	bl	800553c <siprintf>
 8001776:	4603      	mov	r3, r0
 8001778:	b29a      	uxth	r2, r3
 800177a:	4639      	mov	r1, r7
 800177c:	230a      	movs	r3, #10
 800177e:	4815      	ldr	r0, [pc, #84]	; (80017d4 <Print_console+0x3a8>)
 8001780:	f002 fe7f 	bl	8004482 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)pData, sprintf(pData, "   /  ^   ^  \\ \r\n" )  , 10 );
 8001784:	463b      	mov	r3, r7
 8001786:	4917      	ldr	r1, [pc, #92]	; (80017e4 <Print_console+0x3b8>)
 8001788:	4618      	mov	r0, r3
 800178a:	f003 fed7 	bl	800553c <siprintf>
 800178e:	4603      	mov	r3, r0
 8001790:	b29a      	uxth	r2, r3
 8001792:	4639      	mov	r1, r7
 8001794:	230a      	movs	r3, #10
 8001796:	480f      	ldr	r0, [pc, #60]	; (80017d4 <Print_console+0x3a8>)
 8001798:	f002 fe73 	bl	8004482 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)pData, sprintf(pData, "  /__^__|__^__\\ \r\n" )  , 10 );
 800179c:	463b      	mov	r3, r7
 800179e:	4912      	ldr	r1, [pc, #72]	; (80017e8 <Print_console+0x3bc>)
 80017a0:	4618      	mov	r0, r3
 80017a2:	f003 fecb 	bl	800553c <siprintf>
 80017a6:	4603      	mov	r3, r0
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	4639      	mov	r1, r7
 80017ac:	230a      	movs	r3, #10
 80017ae:	4809      	ldr	r0, [pc, #36]	; (80017d4 <Print_console+0x3a8>)
 80017b0:	f002 fe67 	bl	8004482 <HAL_UART_Transmit>
	}

	animation = ( animation + 1 ) % 2;
 80017b4:	4b0d      	ldr	r3, [pc, #52]	; (80017ec <Print_console+0x3c0>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	3301      	adds	r3, #1
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	bfb8      	it	lt
 80017c2:	425b      	neglt	r3, r3
 80017c4:	4a09      	ldr	r2, [pc, #36]	; (80017ec <Print_console+0x3c0>)
 80017c6:	6013      	str	r3, [r2, #0]

}
 80017c8:	bf00      	nop
 80017ca:	3790      	adds	r7, #144	; 0x90
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	08005fb0 	.word	0x08005fb0
 80017d4:	20000168 	.word	0x20000168
 80017d8:	08006028 	.word	0x08006028
 80017dc:	08005fd8 	.word	0x08005fd8
 80017e0:	08005fec 	.word	0x08005fec
 80017e4:	08006000 	.word	0x08006000
 80017e8:	08006014 	.word	0x08006014
 80017ec:	200005b4 	.word	0x200005b4

080017f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017f4:	f000 fc38 	bl	8002068 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017f8:	f000 f820 	bl	800183c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017fc:	f000 f9a4 	bl	8001b48 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001800:	f000 f978 	bl	8001af4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001804:	f000 f884 	bl	8001910 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001808:	f000 f8d4 	bl	80019b4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800180c:	f000 f948 	bl	8001aa0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart1, (uint8_t*) rx_data, 1);
 8001810:	2201      	movs	r2, #1
 8001812:	4908      	ldr	r1, [pc, #32]	; (8001834 <main+0x44>)
 8001814:	4808      	ldr	r0, [pc, #32]	; (8001838 <main+0x48>)
 8001816:	f002 fec6 	bl	80045a6 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 Light_intensity_readData();
 800181a:	f7ff fcd5 	bl	80011c8 <Light_intensity_readData>

	 Soil_moisture_readData();
 800181e:	f7ff fd1d 	bl	800125c <Soil_moisture_readData>

	 Temp_Humid_readData();
 8001822:	f7ff fd35 	bl	8001290 <Temp_Humid_readData>

	 Print_console( );
 8001826:	f7ff fe01 	bl	800142c <Print_console>

	 HAL_Delay(1000);
 800182a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800182e:	f000 fc8d 	bl	800214c <HAL_Delay>
	 Light_intensity_readData();
 8001832:	e7f2      	b.n	800181a <main+0x2a>
 8001834:	200005b0 	.word	0x200005b0
 8001838:	20000124 	.word	0x20000124

0800183c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b094      	sub	sp, #80	; 0x50
 8001840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001842:	f107 0320 	add.w	r3, r7, #32
 8001846:	2230      	movs	r2, #48	; 0x30
 8001848:	2100      	movs	r1, #0
 800184a:	4618      	mov	r0, r3
 800184c:	f003 fe6e 	bl	800552c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001850:	f107 030c 	add.w	r3, r7, #12
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001860:	2300      	movs	r3, #0
 8001862:	60bb      	str	r3, [r7, #8]
 8001864:	4b28      	ldr	r3, [pc, #160]	; (8001908 <SystemClock_Config+0xcc>)
 8001866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001868:	4a27      	ldr	r2, [pc, #156]	; (8001908 <SystemClock_Config+0xcc>)
 800186a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800186e:	6413      	str	r3, [r2, #64]	; 0x40
 8001870:	4b25      	ldr	r3, [pc, #148]	; (8001908 <SystemClock_Config+0xcc>)
 8001872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001878:	60bb      	str	r3, [r7, #8]
 800187a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800187c:	2300      	movs	r3, #0
 800187e:	607b      	str	r3, [r7, #4]
 8001880:	4b22      	ldr	r3, [pc, #136]	; (800190c <SystemClock_Config+0xd0>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a21      	ldr	r2, [pc, #132]	; (800190c <SystemClock_Config+0xd0>)
 8001886:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800188a:	6013      	str	r3, [r2, #0]
 800188c:	4b1f      	ldr	r3, [pc, #124]	; (800190c <SystemClock_Config+0xd0>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001894:	607b      	str	r3, [r7, #4]
 8001896:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001898:	2302      	movs	r3, #2
 800189a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800189c:	2301      	movs	r3, #1
 800189e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018a0:	2310      	movs	r3, #16
 80018a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018a4:	2302      	movs	r3, #2
 80018a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018a8:	2300      	movs	r3, #0
 80018aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80018ac:	2310      	movs	r3, #16
 80018ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80018b0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80018b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80018b6:	2304      	movs	r3, #4
 80018b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018ba:	2304      	movs	r3, #4
 80018bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018be:	f107 0320 	add.w	r3, r7, #32
 80018c2:	4618      	mov	r0, r3
 80018c4:	f001 fbb2 	bl	800302c <HAL_RCC_OscConfig>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80018ce:	f000 f9d3 	bl	8001c78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018d2:	230f      	movs	r3, #15
 80018d4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018d6:	2302      	movs	r3, #2
 80018d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018da:	2300      	movs	r3, #0
 80018dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018e4:	2300      	movs	r3, #0
 80018e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018e8:	f107 030c 	add.w	r3, r7, #12
 80018ec:	2102      	movs	r1, #2
 80018ee:	4618      	mov	r0, r3
 80018f0:	f001 fe14 	bl	800351c <HAL_RCC_ClockConfig>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80018fa:	f000 f9bd 	bl	8001c78 <Error_Handler>
  }
}
 80018fe:	bf00      	nop
 8001900:	3750      	adds	r7, #80	; 0x50
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40023800 	.word	0x40023800
 800190c:	40007000 	.word	0x40007000

08001910 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001916:	463b      	mov	r3, r7
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001922:	4b21      	ldr	r3, [pc, #132]	; (80019a8 <MX_ADC1_Init+0x98>)
 8001924:	4a21      	ldr	r2, [pc, #132]	; (80019ac <MX_ADC1_Init+0x9c>)
 8001926:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001928:	4b1f      	ldr	r3, [pc, #124]	; (80019a8 <MX_ADC1_Init+0x98>)
 800192a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800192e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001930:	4b1d      	ldr	r3, [pc, #116]	; (80019a8 <MX_ADC1_Init+0x98>)
 8001932:	2200      	movs	r2, #0
 8001934:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001936:	4b1c      	ldr	r3, [pc, #112]	; (80019a8 <MX_ADC1_Init+0x98>)
 8001938:	2200      	movs	r2, #0
 800193a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800193c:	4b1a      	ldr	r3, [pc, #104]	; (80019a8 <MX_ADC1_Init+0x98>)
 800193e:	2200      	movs	r2, #0
 8001940:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001942:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <MX_ADC1_Init+0x98>)
 8001944:	2200      	movs	r2, #0
 8001946:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800194a:	4b17      	ldr	r3, [pc, #92]	; (80019a8 <MX_ADC1_Init+0x98>)
 800194c:	2200      	movs	r2, #0
 800194e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001950:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <MX_ADC1_Init+0x98>)
 8001952:	4a17      	ldr	r2, [pc, #92]	; (80019b0 <MX_ADC1_Init+0xa0>)
 8001954:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001956:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <MX_ADC1_Init+0x98>)
 8001958:	2200      	movs	r2, #0
 800195a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800195c:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <MX_ADC1_Init+0x98>)
 800195e:	2201      	movs	r2, #1
 8001960:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001962:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <MX_ADC1_Init+0x98>)
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800196a:	4b0f      	ldr	r3, [pc, #60]	; (80019a8 <MX_ADC1_Init+0x98>)
 800196c:	2201      	movs	r2, #1
 800196e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001970:	480d      	ldr	r0, [pc, #52]	; (80019a8 <MX_ADC1_Init+0x98>)
 8001972:	f000 fc0f 	bl	8002194 <HAL_ADC_Init>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800197c:	f000 f97c 	bl	8001c78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001980:	2300      	movs	r3, #0
 8001982:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001984:	2301      	movs	r3, #1
 8001986:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001988:	2300      	movs	r3, #0
 800198a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800198c:	463b      	mov	r3, r7
 800198e:	4619      	mov	r1, r3
 8001990:	4805      	ldr	r0, [pc, #20]	; (80019a8 <MX_ADC1_Init+0x98>)
 8001992:	f000 fdc3 	bl	800251c <HAL_ADC_ConfigChannel>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800199c:	f000 f96c 	bl	8001c78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019a0:	bf00      	nop
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20000094 	.word	0x20000094
 80019ac:	40012000 	.word	0x40012000
 80019b0:	0f000001 	.word	0x0f000001

080019b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b08e      	sub	sp, #56	; 0x38
 80019b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	605a      	str	r2, [r3, #4]
 80019c4:	609a      	str	r2, [r3, #8]
 80019c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019c8:	f107 0320 	add.w	r3, r7, #32
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019d2:	1d3b      	adds	r3, r7, #4
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	611a      	str	r2, [r3, #16]
 80019e0:	615a      	str	r2, [r3, #20]
 80019e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019e4:	4b2c      	ldr	r3, [pc, #176]	; (8001a98 <MX_TIM3_Init+0xe4>)
 80019e6:	4a2d      	ldr	r2, [pc, #180]	; (8001a9c <MX_TIM3_Init+0xe8>)
 80019e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 80019ea:	4b2b      	ldr	r3, [pc, #172]	; (8001a98 <MX_TIM3_Init+0xe4>)
 80019ec:	2253      	movs	r2, #83	; 0x53
 80019ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f0:	4b29      	ldr	r3, [pc, #164]	; (8001a98 <MX_TIM3_Init+0xe4>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 80019f6:	4b28      	ldr	r3, [pc, #160]	; (8001a98 <MX_TIM3_Init+0xe4>)
 80019f8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80019fc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019fe:	4b26      	ldr	r3, [pc, #152]	; (8001a98 <MX_TIM3_Init+0xe4>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a04:	4b24      	ldr	r3, [pc, #144]	; (8001a98 <MX_TIM3_Init+0xe4>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a0a:	4823      	ldr	r0, [pc, #140]	; (8001a98 <MX_TIM3_Init+0xe4>)
 8001a0c:	f001 ffa6 	bl	800395c <HAL_TIM_Base_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001a16:	f000 f92f 	bl	8001c78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a24:	4619      	mov	r1, r3
 8001a26:	481c      	ldr	r0, [pc, #112]	; (8001a98 <MX_TIM3_Init+0xe4>)
 8001a28:	f002 f902 	bl	8003c30 <HAL_TIM_ConfigClockSource>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001a32:	f000 f921 	bl	8001c78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a36:	4818      	ldr	r0, [pc, #96]	; (8001a98 <MX_TIM3_Init+0xe4>)
 8001a38:	f001 ffdf 	bl	80039fa <HAL_TIM_PWM_Init>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001a42:	f000 f919 	bl	8001c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a46:	2300      	movs	r3, #0
 8001a48:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a4e:	f107 0320 	add.w	r3, r7, #32
 8001a52:	4619      	mov	r1, r3
 8001a54:	4810      	ldr	r0, [pc, #64]	; (8001a98 <MX_TIM3_Init+0xe4>)
 8001a56:	f002 fc59 	bl	800430c <HAL_TIMEx_MasterConfigSynchronization>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001a60:	f000 f90a 	bl	8001c78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a64:	2360      	movs	r3, #96	; 0x60
 8001a66:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a74:	1d3b      	adds	r3, r7, #4
 8001a76:	2208      	movs	r2, #8
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4807      	ldr	r0, [pc, #28]	; (8001a98 <MX_TIM3_Init+0xe4>)
 8001a7c:	f002 f816 	bl	8003aac <HAL_TIM_PWM_ConfigChannel>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001a86:	f000 f8f7 	bl	8001c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a8a:	4803      	ldr	r0, [pc, #12]	; (8001a98 <MX_TIM3_Init+0xe4>)
 8001a8c:	f000 f988 	bl	8001da0 <HAL_TIM_MspPostInit>

}
 8001a90:	bf00      	nop
 8001a92:	3738      	adds	r7, #56	; 0x38
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	200000dc 	.word	0x200000dc
 8001a9c:	40000400 	.word	0x40000400

08001aa0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001aa4:	4b11      	ldr	r3, [pc, #68]	; (8001aec <MX_USART1_UART_Init+0x4c>)
 8001aa6:	4a12      	ldr	r2, [pc, #72]	; (8001af0 <MX_USART1_UART_Init+0x50>)
 8001aa8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001aaa:	4b10      	ldr	r3, [pc, #64]	; (8001aec <MX_USART1_UART_Init+0x4c>)
 8001aac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001ab0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ab2:	4b0e      	ldr	r3, [pc, #56]	; (8001aec <MX_USART1_UART_Init+0x4c>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <MX_USART1_UART_Init+0x4c>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001abe:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <MX_USART1_UART_Init+0x4c>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ac4:	4b09      	ldr	r3, [pc, #36]	; (8001aec <MX_USART1_UART_Init+0x4c>)
 8001ac6:	220c      	movs	r2, #12
 8001ac8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aca:	4b08      	ldr	r3, [pc, #32]	; (8001aec <MX_USART1_UART_Init+0x4c>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ad0:	4b06      	ldr	r3, [pc, #24]	; (8001aec <MX_USART1_UART_Init+0x4c>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ad6:	4805      	ldr	r0, [pc, #20]	; (8001aec <MX_USART1_UART_Init+0x4c>)
 8001ad8:	f002 fc86 	bl	80043e8 <HAL_UART_Init>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ae2:	f000 f8c9 	bl	8001c78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	20000124 	.word	0x20000124
 8001af0:	40011000 	.word	0x40011000

08001af4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001af8:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <MX_USART2_UART_Init+0x4c>)
 8001afa:	4a12      	ldr	r2, [pc, #72]	; (8001b44 <MX_USART2_UART_Init+0x50>)
 8001afc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001afe:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <MX_USART2_UART_Init+0x4c>)
 8001b00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b06:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <MX_USART2_UART_Init+0x4c>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <MX_USART2_UART_Init+0x4c>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b12:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <MX_USART2_UART_Init+0x4c>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b18:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <MX_USART2_UART_Init+0x4c>)
 8001b1a:	220c      	movs	r2, #12
 8001b1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b1e:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <MX_USART2_UART_Init+0x4c>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b24:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <MX_USART2_UART_Init+0x4c>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b2a:	4805      	ldr	r0, [pc, #20]	; (8001b40 <MX_USART2_UART_Init+0x4c>)
 8001b2c:	f002 fc5c 	bl	80043e8 <HAL_UART_Init>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b36:	f000 f89f 	bl	8001c78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000168 	.word	0x20000168
 8001b44:	40004400 	.word	0x40004400

08001b48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08a      	sub	sp, #40	; 0x28
 8001b4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4e:	f107 0314 	add.w	r3, r7, #20
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	605a      	str	r2, [r3, #4]
 8001b58:	609a      	str	r2, [r3, #8]
 8001b5a:	60da      	str	r2, [r3, #12]
 8001b5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	613b      	str	r3, [r7, #16]
 8001b62:	4b41      	ldr	r3, [pc, #260]	; (8001c68 <MX_GPIO_Init+0x120>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	4a40      	ldr	r2, [pc, #256]	; (8001c68 <MX_GPIO_Init+0x120>)
 8001b68:	f043 0304 	orr.w	r3, r3, #4
 8001b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6e:	4b3e      	ldr	r3, [pc, #248]	; (8001c68 <MX_GPIO_Init+0x120>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	f003 0304 	and.w	r3, r3, #4
 8001b76:	613b      	str	r3, [r7, #16]
 8001b78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	4b3a      	ldr	r3, [pc, #232]	; (8001c68 <MX_GPIO_Init+0x120>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	4a39      	ldr	r2, [pc, #228]	; (8001c68 <MX_GPIO_Init+0x120>)
 8001b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b88:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8a:	4b37      	ldr	r3, [pc, #220]	; (8001c68 <MX_GPIO_Init+0x120>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	60bb      	str	r3, [r7, #8]
 8001b9a:	4b33      	ldr	r3, [pc, #204]	; (8001c68 <MX_GPIO_Init+0x120>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	4a32      	ldr	r2, [pc, #200]	; (8001c68 <MX_GPIO_Init+0x120>)
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba6:	4b30      	ldr	r3, [pc, #192]	; (8001c68 <MX_GPIO_Init+0x120>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	60bb      	str	r3, [r7, #8]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	607b      	str	r3, [r7, #4]
 8001bb6:	4b2c      	ldr	r3, [pc, #176]	; (8001c68 <MX_GPIO_Init+0x120>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	4a2b      	ldr	r2, [pc, #172]	; (8001c68 <MX_GPIO_Init+0x120>)
 8001bbc:	f043 0302 	orr.w	r3, r3, #2
 8001bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc2:	4b29      	ldr	r3, [pc, #164]	; (8001c68 <MX_GPIO_Init+0x120>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	607b      	str	r3, [r7, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f44f 7190 	mov.w	r1, #288	; 0x120
 8001bd4:	4825      	ldr	r0, [pc, #148]	; (8001c6c <MX_GPIO_Init+0x124>)
 8001bd6:	f001 fa0f 	bl	8002ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2180      	movs	r1, #128	; 0x80
 8001bde:	4824      	ldr	r0, [pc, #144]	; (8001c70 <MX_GPIO_Init+0x128>)
 8001be0:	f001 fa0a 	bl	8002ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001be4:	2200      	movs	r2, #0
 8001be6:	2140      	movs	r1, #64	; 0x40
 8001be8:	4822      	ldr	r0, [pc, #136]	; (8001c74 <MX_GPIO_Init+0x12c>)
 8001bea:	f001 fa05 	bl	8002ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001bee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bf4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001bf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001bfe:	f107 0314 	add.w	r3, r7, #20
 8001c02:	4619      	mov	r1, r3
 8001c04:	481a      	ldr	r0, [pc, #104]	; (8001c70 <MX_GPIO_Init+0x128>)
 8001c06:	f001 f85b 	bl	8002cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 8001c0a:	f44f 7390 	mov.w	r3, #288	; 0x120
 8001c0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c10:	2301      	movs	r3, #1
 8001c12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1c:	f107 0314 	add.w	r3, r7, #20
 8001c20:	4619      	mov	r1, r3
 8001c22:	4812      	ldr	r0, [pc, #72]	; (8001c6c <MX_GPIO_Init+0x124>)
 8001c24:	f001 f84c 	bl	8002cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c28:	2380      	movs	r3, #128	; 0x80
 8001c2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c34:	2300      	movs	r3, #0
 8001c36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c38:	f107 0314 	add.w	r3, r7, #20
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	480c      	ldr	r0, [pc, #48]	; (8001c70 <MX_GPIO_Init+0x128>)
 8001c40:	f001 f83e 	bl	8002cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c44:	2340      	movs	r3, #64	; 0x40
 8001c46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c50:	2300      	movs	r3, #0
 8001c52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c54:	f107 0314 	add.w	r3, r7, #20
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4806      	ldr	r0, [pc, #24]	; (8001c74 <MX_GPIO_Init+0x12c>)
 8001c5c:	f001 f830 	bl	8002cc0 <HAL_GPIO_Init>

}
 8001c60:	bf00      	nop
 8001c62:	3728      	adds	r7, #40	; 0x28
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	40020000 	.word	0x40020000
 8001c70:	40020800 	.word	0x40020800
 8001c74:	40020400 	.word	0x40020400

08001c78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c7c:	b672      	cpsid	i
}
 8001c7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c80:	e7fe      	b.n	8001c80 <Error_Handler+0x8>
	...

08001c84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	607b      	str	r3, [r7, #4]
 8001c8e:	4b10      	ldr	r3, [pc, #64]	; (8001cd0 <HAL_MspInit+0x4c>)
 8001c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c92:	4a0f      	ldr	r2, [pc, #60]	; (8001cd0 <HAL_MspInit+0x4c>)
 8001c94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c98:	6453      	str	r3, [r2, #68]	; 0x44
 8001c9a:	4b0d      	ldr	r3, [pc, #52]	; (8001cd0 <HAL_MspInit+0x4c>)
 8001c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ca2:	607b      	str	r3, [r7, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	603b      	str	r3, [r7, #0]
 8001caa:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <HAL_MspInit+0x4c>)
 8001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cae:	4a08      	ldr	r2, [pc, #32]	; (8001cd0 <HAL_MspInit+0x4c>)
 8001cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cb6:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <HAL_MspInit+0x4c>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cbe:	603b      	str	r3, [r7, #0]
 8001cc0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001cc2:	2007      	movs	r0, #7
 8001cc4:	f000 ff28 	bl	8002b18 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cc8:	bf00      	nop
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40023800 	.word	0x40023800

08001cd4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b08a      	sub	sp, #40	; 0x28
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cdc:	f107 0314 	add.w	r3, r7, #20
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]
 8001cea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a17      	ldr	r2, [pc, #92]	; (8001d50 <HAL_ADC_MspInit+0x7c>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d127      	bne.n	8001d46 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	613b      	str	r3, [r7, #16]
 8001cfa:	4b16      	ldr	r3, [pc, #88]	; (8001d54 <HAL_ADC_MspInit+0x80>)
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfe:	4a15      	ldr	r2, [pc, #84]	; (8001d54 <HAL_ADC_MspInit+0x80>)
 8001d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d04:	6453      	str	r3, [r2, #68]	; 0x44
 8001d06:	4b13      	ldr	r3, [pc, #76]	; (8001d54 <HAL_ADC_MspInit+0x80>)
 8001d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d0e:	613b      	str	r3, [r7, #16]
 8001d10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	4b0f      	ldr	r3, [pc, #60]	; (8001d54 <HAL_ADC_MspInit+0x80>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	4a0e      	ldr	r2, [pc, #56]	; (8001d54 <HAL_ADC_MspInit+0x80>)
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	6313      	str	r3, [r2, #48]	; 0x30
 8001d22:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <HAL_ADC_MspInit+0x80>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d32:	2303      	movs	r3, #3
 8001d34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d36:	2300      	movs	r3, #0
 8001d38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d3a:	f107 0314 	add.w	r3, r7, #20
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4805      	ldr	r0, [pc, #20]	; (8001d58 <HAL_ADC_MspInit+0x84>)
 8001d42:	f000 ffbd 	bl	8002cc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d46:	bf00      	nop
 8001d48:	3728      	adds	r7, #40	; 0x28
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40012000 	.word	0x40012000
 8001d54:	40023800 	.word	0x40023800
 8001d58:	40020000 	.word	0x40020000

08001d5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a0b      	ldr	r2, [pc, #44]	; (8001d98 <HAL_TIM_Base_MspInit+0x3c>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d10d      	bne.n	8001d8a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	4b0a      	ldr	r3, [pc, #40]	; (8001d9c <HAL_TIM_Base_MspInit+0x40>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	4a09      	ldr	r2, [pc, #36]	; (8001d9c <HAL_TIM_Base_MspInit+0x40>)
 8001d78:	f043 0302 	orr.w	r3, r3, #2
 8001d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7e:	4b07      	ldr	r3, [pc, #28]	; (8001d9c <HAL_TIM_Base_MspInit+0x40>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001d8a:	bf00      	nop
 8001d8c:	3714      	adds	r7, #20
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	40000400 	.word	0x40000400
 8001d9c:	40023800 	.word	0x40023800

08001da0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b088      	sub	sp, #32
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da8:	f107 030c 	add.w	r3, r7, #12
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	609a      	str	r2, [r3, #8]
 8001db4:	60da      	str	r2, [r3, #12]
 8001db6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a12      	ldr	r2, [pc, #72]	; (8001e08 <HAL_TIM_MspPostInit+0x68>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d11d      	bne.n	8001dfe <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60bb      	str	r3, [r7, #8]
 8001dc6:	4b11      	ldr	r3, [pc, #68]	; (8001e0c <HAL_TIM_MspPostInit+0x6c>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	4a10      	ldr	r2, [pc, #64]	; (8001e0c <HAL_TIM_MspPostInit+0x6c>)
 8001dcc:	f043 0302 	orr.w	r3, r3, #2
 8001dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd2:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <HAL_TIM_MspPostInit+0x6c>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	60bb      	str	r3, [r7, #8]
 8001ddc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001dde:	2301      	movs	r3, #1
 8001de0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de2:	2302      	movs	r3, #2
 8001de4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de6:	2300      	movs	r3, #0
 8001de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dea:	2300      	movs	r3, #0
 8001dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001dee:	2302      	movs	r3, #2
 8001df0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df2:	f107 030c 	add.w	r3, r7, #12
 8001df6:	4619      	mov	r1, r3
 8001df8:	4805      	ldr	r0, [pc, #20]	; (8001e10 <HAL_TIM_MspPostInit+0x70>)
 8001dfa:	f000 ff61 	bl	8002cc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001dfe:	bf00      	nop
 8001e00:	3720      	adds	r7, #32
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40000400 	.word	0x40000400
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	40020400 	.word	0x40020400

08001e14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b08c      	sub	sp, #48	; 0x30
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1c:	f107 031c 	add.w	r3, r7, #28
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	60da      	str	r2, [r3, #12]
 8001e2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a36      	ldr	r2, [pc, #216]	; (8001f0c <HAL_UART_MspInit+0xf8>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d135      	bne.n	8001ea2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	61bb      	str	r3, [r7, #24]
 8001e3a:	4b35      	ldr	r3, [pc, #212]	; (8001f10 <HAL_UART_MspInit+0xfc>)
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3e:	4a34      	ldr	r2, [pc, #208]	; (8001f10 <HAL_UART_MspInit+0xfc>)
 8001e40:	f043 0310 	orr.w	r3, r3, #16
 8001e44:	6453      	str	r3, [r2, #68]	; 0x44
 8001e46:	4b32      	ldr	r3, [pc, #200]	; (8001f10 <HAL_UART_MspInit+0xfc>)
 8001e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4a:	f003 0310 	and.w	r3, r3, #16
 8001e4e:	61bb      	str	r3, [r7, #24]
 8001e50:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	617b      	str	r3, [r7, #20]
 8001e56:	4b2e      	ldr	r3, [pc, #184]	; (8001f10 <HAL_UART_MspInit+0xfc>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	4a2d      	ldr	r2, [pc, #180]	; (8001f10 <HAL_UART_MspInit+0xfc>)
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	6313      	str	r3, [r2, #48]	; 0x30
 8001e62:	4b2b      	ldr	r3, [pc, #172]	; (8001f10 <HAL_UART_MspInit+0xfc>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	617b      	str	r3, [r7, #20]
 8001e6c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e6e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001e72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e74:	2302      	movs	r3, #2
 8001e76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e80:	2307      	movs	r3, #7
 8001e82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e84:	f107 031c 	add.w	r3, r7, #28
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4822      	ldr	r0, [pc, #136]	; (8001f14 <HAL_UART_MspInit+0x100>)
 8001e8c:	f000 ff18 	bl	8002cc0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e90:	2200      	movs	r2, #0
 8001e92:	2100      	movs	r1, #0
 8001e94:	2025      	movs	r0, #37	; 0x25
 8001e96:	f000 fe4a 	bl	8002b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e9a:	2025      	movs	r0, #37	; 0x25
 8001e9c:	f000 fe63 	bl	8002b66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ea0:	e030      	b.n	8001f04 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a1c      	ldr	r2, [pc, #112]	; (8001f18 <HAL_UART_MspInit+0x104>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d12b      	bne.n	8001f04 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001eac:	2300      	movs	r3, #0
 8001eae:	613b      	str	r3, [r7, #16]
 8001eb0:	4b17      	ldr	r3, [pc, #92]	; (8001f10 <HAL_UART_MspInit+0xfc>)
 8001eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb4:	4a16      	ldr	r2, [pc, #88]	; (8001f10 <HAL_UART_MspInit+0xfc>)
 8001eb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eba:	6413      	str	r3, [r2, #64]	; 0x40
 8001ebc:	4b14      	ldr	r3, [pc, #80]	; (8001f10 <HAL_UART_MspInit+0xfc>)
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec4:	613b      	str	r3, [r7, #16]
 8001ec6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec8:	2300      	movs	r3, #0
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <HAL_UART_MspInit+0xfc>)
 8001ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed0:	4a0f      	ldr	r2, [pc, #60]	; (8001f10 <HAL_UART_MspInit+0xfc>)
 8001ed2:	f043 0301 	orr.w	r3, r3, #1
 8001ed6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed8:	4b0d      	ldr	r3, [pc, #52]	; (8001f10 <HAL_UART_MspInit+0xfc>)
 8001eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001edc:	f003 0301 	and.w	r3, r3, #1
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ee4:	230c      	movs	r3, #12
 8001ee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ef4:	2307      	movs	r3, #7
 8001ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef8:	f107 031c 	add.w	r3, r7, #28
 8001efc:	4619      	mov	r1, r3
 8001efe:	4805      	ldr	r0, [pc, #20]	; (8001f14 <HAL_UART_MspInit+0x100>)
 8001f00:	f000 fede 	bl	8002cc0 <HAL_GPIO_Init>
}
 8001f04:	bf00      	nop
 8001f06:	3730      	adds	r7, #48	; 0x30
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40011000 	.word	0x40011000
 8001f10:	40023800 	.word	0x40023800
 8001f14:	40020000 	.word	0x40020000
 8001f18:	40004400 	.word	0x40004400

08001f1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f20:	e7fe      	b.n	8001f20 <NMI_Handler+0x4>

08001f22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f22:	b480      	push	{r7}
 8001f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f26:	e7fe      	b.n	8001f26 <HardFault_Handler+0x4>

08001f28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f2c:	e7fe      	b.n	8001f2c <MemManage_Handler+0x4>

08001f2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f32:	e7fe      	b.n	8001f32 <BusFault_Handler+0x4>

08001f34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f38:	e7fe      	b.n	8001f38 <UsageFault_Handler+0x4>

08001f3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f4c:	bf00      	nop
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f56:	b480      	push	{r7}
 8001f58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f68:	f000 f8d0 	bl	800210c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f6c:	bf00      	nop
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f74:	4802      	ldr	r0, [pc, #8]	; (8001f80 <USART1_IRQHandler+0x10>)
 8001f76:	f002 fb47 	bl	8004608 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000124 	.word	0x20000124

08001f84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f8c:	4a14      	ldr	r2, [pc, #80]	; (8001fe0 <_sbrk+0x5c>)
 8001f8e:	4b15      	ldr	r3, [pc, #84]	; (8001fe4 <_sbrk+0x60>)
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f98:	4b13      	ldr	r3, [pc, #76]	; (8001fe8 <_sbrk+0x64>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d102      	bne.n	8001fa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fa0:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <_sbrk+0x64>)
 8001fa2:	4a12      	ldr	r2, [pc, #72]	; (8001fec <_sbrk+0x68>)
 8001fa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fa6:	4b10      	ldr	r3, [pc, #64]	; (8001fe8 <_sbrk+0x64>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4413      	add	r3, r2
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d207      	bcs.n	8001fc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fb4:	f003 fa90 	bl	80054d8 <__errno>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	220c      	movs	r2, #12
 8001fbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc2:	e009      	b.n	8001fd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fc4:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <_sbrk+0x64>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fca:	4b07      	ldr	r3, [pc, #28]	; (8001fe8 <_sbrk+0x64>)
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	4a05      	ldr	r2, [pc, #20]	; (8001fe8 <_sbrk+0x64>)
 8001fd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	20020000 	.word	0x20020000
 8001fe4:	00000400 	.word	0x00000400
 8001fe8:	200005c0 	.word	0x200005c0
 8001fec:	200005d8 	.word	0x200005d8

08001ff0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ff4:	4b06      	ldr	r3, [pc, #24]	; (8002010 <SystemInit+0x20>)
 8001ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ffa:	4a05      	ldr	r2, [pc, #20]	; (8002010 <SystemInit+0x20>)
 8001ffc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002000:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002004:	bf00      	nop
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002014:	f8df d034 	ldr.w	sp, [pc, #52]	; 800204c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002018:	480d      	ldr	r0, [pc, #52]	; (8002050 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800201a:	490e      	ldr	r1, [pc, #56]	; (8002054 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800201c:	4a0e      	ldr	r2, [pc, #56]	; (8002058 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800201e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002020:	e002      	b.n	8002028 <LoopCopyDataInit>

08002022 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002022:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002024:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002026:	3304      	adds	r3, #4

08002028 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002028:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800202a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800202c:	d3f9      	bcc.n	8002022 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800202e:	4a0b      	ldr	r2, [pc, #44]	; (800205c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002030:	4c0b      	ldr	r4, [pc, #44]	; (8002060 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002032:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002034:	e001      	b.n	800203a <LoopFillZerobss>

08002036 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002036:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002038:	3204      	adds	r2, #4

0800203a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800203a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800203c:	d3fb      	bcc.n	8002036 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800203e:	f7ff ffd7 	bl	8001ff0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002042:	f003 fa4f 	bl	80054e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002046:	f7ff fbd3 	bl	80017f0 <main>
  bx  lr    
 800204a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800204c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002050:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002054:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002058:	08006098 	.word	0x08006098
  ldr r2, =_sbss
 800205c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002060:	200005d8 	.word	0x200005d8

08002064 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002064:	e7fe      	b.n	8002064 <ADC_IRQHandler>
	...

08002068 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800206c:	4b0e      	ldr	r3, [pc, #56]	; (80020a8 <HAL_Init+0x40>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a0d      	ldr	r2, [pc, #52]	; (80020a8 <HAL_Init+0x40>)
 8002072:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002076:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002078:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <HAL_Init+0x40>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a0a      	ldr	r2, [pc, #40]	; (80020a8 <HAL_Init+0x40>)
 800207e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002082:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002084:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <HAL_Init+0x40>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a07      	ldr	r2, [pc, #28]	; (80020a8 <HAL_Init+0x40>)
 800208a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800208e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002090:	2003      	movs	r0, #3
 8002092:	f000 fd41 	bl	8002b18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002096:	2000      	movs	r0, #0
 8002098:	f000 f808 	bl	80020ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800209c:	f7ff fdf2 	bl	8001c84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40023c00 	.word	0x40023c00

080020ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020b4:	4b12      	ldr	r3, [pc, #72]	; (8002100 <HAL_InitTick+0x54>)
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	4b12      	ldr	r3, [pc, #72]	; (8002104 <HAL_InitTick+0x58>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	4619      	mov	r1, r3
 80020be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80020c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ca:	4618      	mov	r0, r3
 80020cc:	f000 fd59 	bl	8002b82 <HAL_SYSTICK_Config>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e00e      	b.n	80020f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2b0f      	cmp	r3, #15
 80020de:	d80a      	bhi.n	80020f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020e0:	2200      	movs	r2, #0
 80020e2:	6879      	ldr	r1, [r7, #4]
 80020e4:	f04f 30ff 	mov.w	r0, #4294967295
 80020e8:	f000 fd21 	bl	8002b2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020ec:	4a06      	ldr	r2, [pc, #24]	; (8002108 <HAL_InitTick+0x5c>)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
 80020f4:	e000      	b.n	80020f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	20000000 	.word	0x20000000
 8002104:	20000008 	.word	0x20000008
 8002108:	20000004 	.word	0x20000004

0800210c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002110:	4b06      	ldr	r3, [pc, #24]	; (800212c <HAL_IncTick+0x20>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	461a      	mov	r2, r3
 8002116:	4b06      	ldr	r3, [pc, #24]	; (8002130 <HAL_IncTick+0x24>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4413      	add	r3, r2
 800211c:	4a04      	ldr	r2, [pc, #16]	; (8002130 <HAL_IncTick+0x24>)
 800211e:	6013      	str	r3, [r2, #0]
}
 8002120:	bf00      	nop
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	20000008 	.word	0x20000008
 8002130:	200005c4 	.word	0x200005c4

08002134 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  return uwTick;
 8002138:	4b03      	ldr	r3, [pc, #12]	; (8002148 <HAL_GetTick+0x14>)
 800213a:	681b      	ldr	r3, [r3, #0]
}
 800213c:	4618      	mov	r0, r3
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	200005c4 	.word	0x200005c4

0800214c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002154:	f7ff ffee 	bl	8002134 <HAL_GetTick>
 8002158:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002164:	d005      	beq.n	8002172 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002166:	4b0a      	ldr	r3, [pc, #40]	; (8002190 <HAL_Delay+0x44>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	461a      	mov	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	4413      	add	r3, r2
 8002170:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002172:	bf00      	nop
 8002174:	f7ff ffde 	bl	8002134 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	429a      	cmp	r2, r3
 8002182:	d8f7      	bhi.n	8002174 <HAL_Delay+0x28>
  {
  }
}
 8002184:	bf00      	nop
 8002186:	bf00      	nop
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	20000008 	.word	0x20000008

08002194 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800219c:	2300      	movs	r3, #0
 800219e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e033      	b.n	8002212 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d109      	bne.n	80021c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7ff fd8e 	bl	8001cd4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	f003 0310 	and.w	r3, r3, #16
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d118      	bne.n	8002204 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021da:	f023 0302 	bic.w	r3, r3, #2
 80021de:	f043 0202 	orr.w	r2, r3, #2
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 faca 	bl	8002780 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	f023 0303 	bic.w	r3, r3, #3
 80021fa:	f043 0201 	orr.w	r2, r3, #1
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	641a      	str	r2, [r3, #64]	; 0x40
 8002202:	e001      	b.n	8002208 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002210:	7bfb      	ldrb	r3, [r7, #15]
}
 8002212:	4618      	mov	r0, r3
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
	...

0800221c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002224:	2300      	movs	r3, #0
 8002226:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800222e:	2b01      	cmp	r3, #1
 8002230:	d101      	bne.n	8002236 <HAL_ADC_Start+0x1a>
 8002232:	2302      	movs	r3, #2
 8002234:	e097      	b.n	8002366 <HAL_ADC_Start+0x14a>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2201      	movs	r2, #1
 800223a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	2b01      	cmp	r3, #1
 800224a:	d018      	beq.n	800227e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f042 0201 	orr.w	r2, r2, #1
 800225a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800225c:	4b45      	ldr	r3, [pc, #276]	; (8002374 <HAL_ADC_Start+0x158>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a45      	ldr	r2, [pc, #276]	; (8002378 <HAL_ADC_Start+0x15c>)
 8002262:	fba2 2303 	umull	r2, r3, r2, r3
 8002266:	0c9a      	lsrs	r2, r3, #18
 8002268:	4613      	mov	r3, r2
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	4413      	add	r3, r2
 800226e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002270:	e002      	b.n	8002278 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	3b01      	subs	r3, #1
 8002276:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1f9      	bne.n	8002272 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	2b01      	cmp	r3, #1
 800228a:	d15f      	bne.n	800234c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002290:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002294:	f023 0301 	bic.w	r3, r3, #1
 8002298:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d007      	beq.n	80022be <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022b6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022ca:	d106      	bne.n	80022da <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d0:	f023 0206 	bic.w	r2, r3, #6
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	645a      	str	r2, [r3, #68]	; 0x44
 80022d8:	e002      	b.n	80022e0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022e8:	4b24      	ldr	r3, [pc, #144]	; (800237c <HAL_ADC_Start+0x160>)
 80022ea:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80022f4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f003 031f 	and.w	r3, r3, #31
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d10f      	bne.n	8002322 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d129      	bne.n	8002364 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	689a      	ldr	r2, [r3, #8]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800231e:	609a      	str	r2, [r3, #8]
 8002320:	e020      	b.n	8002364 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a16      	ldr	r2, [pc, #88]	; (8002380 <HAL_ADC_Start+0x164>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d11b      	bne.n	8002364 <HAL_ADC_Start+0x148>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d114      	bne.n	8002364 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002348:	609a      	str	r2, [r3, #8]
 800234a:	e00b      	b.n	8002364 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002350:	f043 0210 	orr.w	r2, r3, #16
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235c:	f043 0201 	orr.w	r2, r3, #1
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3714      	adds	r7, #20
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	20000000 	.word	0x20000000
 8002378:	431bde83 	.word	0x431bde83
 800237c:	40012300 	.word	0x40012300
 8002380:	40012000 	.word	0x40012000

08002384 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002392:	2b01      	cmp	r3, #1
 8002394:	d101      	bne.n	800239a <HAL_ADC_Stop+0x16>
 8002396:	2302      	movs	r3, #2
 8002398:	e021      	b.n	80023de <HAL_ADC_Stop+0x5a>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 0201 	bic.w	r2, r2, #1
 80023b0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d109      	bne.n	80023d4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023c8:	f023 0301 	bic.w	r3, r3, #1
 80023cc:	f043 0201 	orr.w	r2, r3, #1
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b084      	sub	sp, #16
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
 80023f2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80023f4:	2300      	movs	r3, #0
 80023f6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002406:	d113      	bne.n	8002430 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002412:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002416:	d10b      	bne.n	8002430 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241c:	f043 0220 	orr.w	r2, r3, #32
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e063      	b.n	80024f8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002430:	f7ff fe80 	bl	8002134 <HAL_GetTick>
 8002434:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002436:	e021      	b.n	800247c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800243e:	d01d      	beq.n	800247c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d007      	beq.n	8002456 <HAL_ADC_PollForConversion+0x6c>
 8002446:	f7ff fe75 	bl	8002134 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	429a      	cmp	r2, r3
 8002454:	d212      	bcs.n	800247c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b02      	cmp	r3, #2
 8002462:	d00b      	beq.n	800247c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002468:	f043 0204 	orr.w	r2, r3, #4
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e03d      	b.n	80024f8 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b02      	cmp	r3, #2
 8002488:	d1d6      	bne.n	8002438 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f06f 0212 	mvn.w	r2, #18
 8002492:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002498:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d123      	bne.n	80024f6 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d11f      	bne.n	80024f6 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024bc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d006      	beq.n	80024d2 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d111      	bne.n	80024f6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d105      	bne.n	80024f6 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	f043 0201 	orr.w	r2, r3, #1
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3710      	adds	r7, #16
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800250e:	4618      	mov	r0, r3
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
	...

0800251c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800251c:	b480      	push	{r7}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002526:	2300      	movs	r3, #0
 8002528:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002530:	2b01      	cmp	r3, #1
 8002532:	d101      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x1c>
 8002534:	2302      	movs	r3, #2
 8002536:	e113      	b.n	8002760 <HAL_ADC_ConfigChannel+0x244>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2b09      	cmp	r3, #9
 8002546:	d925      	bls.n	8002594 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68d9      	ldr	r1, [r3, #12]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	b29b      	uxth	r3, r3
 8002554:	461a      	mov	r2, r3
 8002556:	4613      	mov	r3, r2
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	4413      	add	r3, r2
 800255c:	3b1e      	subs	r3, #30
 800255e:	2207      	movs	r2, #7
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	43da      	mvns	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	400a      	ands	r2, r1
 800256c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68d9      	ldr	r1, [r3, #12]
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	b29b      	uxth	r3, r3
 800257e:	4618      	mov	r0, r3
 8002580:	4603      	mov	r3, r0
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	4403      	add	r3, r0
 8002586:	3b1e      	subs	r3, #30
 8002588:	409a      	lsls	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	430a      	orrs	r2, r1
 8002590:	60da      	str	r2, [r3, #12]
 8002592:	e022      	b.n	80025da <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6919      	ldr	r1, [r3, #16]
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	b29b      	uxth	r3, r3
 80025a0:	461a      	mov	r2, r3
 80025a2:	4613      	mov	r3, r2
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	4413      	add	r3, r2
 80025a8:	2207      	movs	r2, #7
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	43da      	mvns	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	400a      	ands	r2, r1
 80025b6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6919      	ldr	r1, [r3, #16]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	4618      	mov	r0, r3
 80025ca:	4603      	mov	r3, r0
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	4403      	add	r3, r0
 80025d0:	409a      	lsls	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	430a      	orrs	r2, r1
 80025d8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2b06      	cmp	r3, #6
 80025e0:	d824      	bhi.n	800262c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685a      	ldr	r2, [r3, #4]
 80025ec:	4613      	mov	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	3b05      	subs	r3, #5
 80025f4:	221f      	movs	r2, #31
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	43da      	mvns	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	400a      	ands	r2, r1
 8002602:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	b29b      	uxth	r3, r3
 8002610:	4618      	mov	r0, r3
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	4613      	mov	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	3b05      	subs	r3, #5
 800261e:	fa00 f203 	lsl.w	r2, r0, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	430a      	orrs	r2, r1
 8002628:	635a      	str	r2, [r3, #52]	; 0x34
 800262a:	e04c      	b.n	80026c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2b0c      	cmp	r3, #12
 8002632:	d824      	bhi.n	800267e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	4613      	mov	r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	4413      	add	r3, r2
 8002644:	3b23      	subs	r3, #35	; 0x23
 8002646:	221f      	movs	r2, #31
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	43da      	mvns	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	400a      	ands	r2, r1
 8002654:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	b29b      	uxth	r3, r3
 8002662:	4618      	mov	r0, r3
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685a      	ldr	r2, [r3, #4]
 8002668:	4613      	mov	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	4413      	add	r3, r2
 800266e:	3b23      	subs	r3, #35	; 0x23
 8002670:	fa00 f203 	lsl.w	r2, r0, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	430a      	orrs	r2, r1
 800267a:	631a      	str	r2, [r3, #48]	; 0x30
 800267c:	e023      	b.n	80026c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	4613      	mov	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4413      	add	r3, r2
 800268e:	3b41      	subs	r3, #65	; 0x41
 8002690:	221f      	movs	r2, #31
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	43da      	mvns	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	400a      	ands	r2, r1
 800269e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	4618      	mov	r0, r3
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	4613      	mov	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	3b41      	subs	r3, #65	; 0x41
 80026ba:	fa00 f203 	lsl.w	r2, r0, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026c6:	4b29      	ldr	r3, [pc, #164]	; (800276c <HAL_ADC_ConfigChannel+0x250>)
 80026c8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a28      	ldr	r2, [pc, #160]	; (8002770 <HAL_ADC_ConfigChannel+0x254>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d10f      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x1d8>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2b12      	cmp	r3, #18
 80026da:	d10b      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a1d      	ldr	r2, [pc, #116]	; (8002770 <HAL_ADC_ConfigChannel+0x254>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d12b      	bne.n	8002756 <HAL_ADC_ConfigChannel+0x23a>
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a1c      	ldr	r2, [pc, #112]	; (8002774 <HAL_ADC_ConfigChannel+0x258>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d003      	beq.n	8002710 <HAL_ADC_ConfigChannel+0x1f4>
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2b11      	cmp	r3, #17
 800270e:	d122      	bne.n	8002756 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a11      	ldr	r2, [pc, #68]	; (8002774 <HAL_ADC_ConfigChannel+0x258>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d111      	bne.n	8002756 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002732:	4b11      	ldr	r3, [pc, #68]	; (8002778 <HAL_ADC_ConfigChannel+0x25c>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a11      	ldr	r2, [pc, #68]	; (800277c <HAL_ADC_ConfigChannel+0x260>)
 8002738:	fba2 2303 	umull	r2, r3, r2, r3
 800273c:	0c9a      	lsrs	r2, r3, #18
 800273e:	4613      	mov	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4413      	add	r3, r2
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002748:	e002      	b.n	8002750 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	3b01      	subs	r3, #1
 800274e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1f9      	bne.n	800274a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3714      	adds	r7, #20
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	40012300 	.word	0x40012300
 8002770:	40012000 	.word	0x40012000
 8002774:	10000012 	.word	0x10000012
 8002778:	20000000 	.word	0x20000000
 800277c:	431bde83 	.word	0x431bde83

08002780 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002788:	4b79      	ldr	r3, [pc, #484]	; (8002970 <ADC_Init+0x1f0>)
 800278a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	431a      	orrs	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	685a      	ldr	r2, [r3, #4]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	6859      	ldr	r1, [r3, #4]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	021a      	lsls	r2, r3, #8
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	430a      	orrs	r2, r1
 80027c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	685a      	ldr	r2, [r3, #4]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80027d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6859      	ldr	r1, [r3, #4]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689a      	ldr	r2, [r3, #8]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	430a      	orrs	r2, r1
 80027ea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	689a      	ldr	r2, [r3, #8]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6899      	ldr	r1, [r3, #8]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	68da      	ldr	r2, [r3, #12]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	430a      	orrs	r2, r1
 800280c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002812:	4a58      	ldr	r2, [pc, #352]	; (8002974 <ADC_Init+0x1f4>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d022      	beq.n	800285e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	689a      	ldr	r2, [r3, #8]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002826:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6899      	ldr	r1, [r3, #8]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	430a      	orrs	r2, r1
 8002838:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002848:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6899      	ldr	r1, [r3, #8]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	430a      	orrs	r2, r1
 800285a:	609a      	str	r2, [r3, #8]
 800285c:	e00f      	b.n	800287e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800286c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800287c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0202 	bic.w	r2, r2, #2
 800288c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6899      	ldr	r1, [r3, #8]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	7e1b      	ldrb	r3, [r3, #24]
 8002898:	005a      	lsls	r2, r3, #1
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	430a      	orrs	r2, r1
 80028a0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d01b      	beq.n	80028e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028ba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	685a      	ldr	r2, [r3, #4]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80028ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6859      	ldr	r1, [r3, #4]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d6:	3b01      	subs	r3, #1
 80028d8:	035a      	lsls	r2, r3, #13
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	430a      	orrs	r2, r1
 80028e0:	605a      	str	r2, [r3, #4]
 80028e2:	e007      	b.n	80028f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002902:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	3b01      	subs	r3, #1
 8002910:	051a      	lsls	r2, r3, #20
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	430a      	orrs	r2, r1
 8002918:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002928:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6899      	ldr	r1, [r3, #8]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002936:	025a      	lsls	r2, r3, #9
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	430a      	orrs	r2, r1
 800293e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689a      	ldr	r2, [r3, #8]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800294e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	6899      	ldr	r1, [r3, #8]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	029a      	lsls	r2, r3, #10
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	430a      	orrs	r2, r1
 8002962:	609a      	str	r2, [r3, #8]
}
 8002964:	bf00      	nop
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	40012300 	.word	0x40012300
 8002974:	0f000001 	.word	0x0f000001

08002978 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f003 0307 	and.w	r3, r3, #7
 8002986:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002988:	4b0c      	ldr	r3, [pc, #48]	; (80029bc <__NVIC_SetPriorityGrouping+0x44>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002994:	4013      	ands	r3, r2
 8002996:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029aa:	4a04      	ldr	r2, [pc, #16]	; (80029bc <__NVIC_SetPriorityGrouping+0x44>)
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	60d3      	str	r3, [r2, #12]
}
 80029b0:	bf00      	nop
 80029b2:	3714      	adds	r7, #20
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	e000ed00 	.word	0xe000ed00

080029c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029c4:	4b04      	ldr	r3, [pc, #16]	; (80029d8 <__NVIC_GetPriorityGrouping+0x18>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	0a1b      	lsrs	r3, r3, #8
 80029ca:	f003 0307 	and.w	r3, r3, #7
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	e000ed00 	.word	0xe000ed00

080029dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	4603      	mov	r3, r0
 80029e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	db0b      	blt.n	8002a06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ee:	79fb      	ldrb	r3, [r7, #7]
 80029f0:	f003 021f 	and.w	r2, r3, #31
 80029f4:	4907      	ldr	r1, [pc, #28]	; (8002a14 <__NVIC_EnableIRQ+0x38>)
 80029f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fa:	095b      	lsrs	r3, r3, #5
 80029fc:	2001      	movs	r0, #1
 80029fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a06:	bf00      	nop
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	e000e100 	.word	0xe000e100

08002a18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	6039      	str	r1, [r7, #0]
 8002a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	db0a      	blt.n	8002a42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	b2da      	uxtb	r2, r3
 8002a30:	490c      	ldr	r1, [pc, #48]	; (8002a64 <__NVIC_SetPriority+0x4c>)
 8002a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a36:	0112      	lsls	r2, r2, #4
 8002a38:	b2d2      	uxtb	r2, r2
 8002a3a:	440b      	add	r3, r1
 8002a3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a40:	e00a      	b.n	8002a58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	b2da      	uxtb	r2, r3
 8002a46:	4908      	ldr	r1, [pc, #32]	; (8002a68 <__NVIC_SetPriority+0x50>)
 8002a48:	79fb      	ldrb	r3, [r7, #7]
 8002a4a:	f003 030f 	and.w	r3, r3, #15
 8002a4e:	3b04      	subs	r3, #4
 8002a50:	0112      	lsls	r2, r2, #4
 8002a52:	b2d2      	uxtb	r2, r2
 8002a54:	440b      	add	r3, r1
 8002a56:	761a      	strb	r2, [r3, #24]
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	e000e100 	.word	0xe000e100
 8002a68:	e000ed00 	.word	0xe000ed00

08002a6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b089      	sub	sp, #36	; 0x24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	f1c3 0307 	rsb	r3, r3, #7
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	bf28      	it	cs
 8002a8a:	2304      	movcs	r3, #4
 8002a8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	3304      	adds	r3, #4
 8002a92:	2b06      	cmp	r3, #6
 8002a94:	d902      	bls.n	8002a9c <NVIC_EncodePriority+0x30>
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	3b03      	subs	r3, #3
 8002a9a:	e000      	b.n	8002a9e <NVIC_EncodePriority+0x32>
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	43da      	mvns	r2, r3
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	401a      	ands	r2, r3
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	fa01 f303 	lsl.w	r3, r1, r3
 8002abe:	43d9      	mvns	r1, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ac4:	4313      	orrs	r3, r2
         );
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3724      	adds	r7, #36	; 0x24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
	...

08002ad4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ae4:	d301      	bcc.n	8002aea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e00f      	b.n	8002b0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002aea:	4a0a      	ldr	r2, [pc, #40]	; (8002b14 <SysTick_Config+0x40>)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	3b01      	subs	r3, #1
 8002af0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002af2:	210f      	movs	r1, #15
 8002af4:	f04f 30ff 	mov.w	r0, #4294967295
 8002af8:	f7ff ff8e 	bl	8002a18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002afc:	4b05      	ldr	r3, [pc, #20]	; (8002b14 <SysTick_Config+0x40>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b02:	4b04      	ldr	r3, [pc, #16]	; (8002b14 <SysTick_Config+0x40>)
 8002b04:	2207      	movs	r2, #7
 8002b06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	e000e010 	.word	0xe000e010

08002b18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f7ff ff29 	bl	8002978 <__NVIC_SetPriorityGrouping>
}
 8002b26:	bf00      	nop
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b086      	sub	sp, #24
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	4603      	mov	r3, r0
 8002b36:	60b9      	str	r1, [r7, #8]
 8002b38:	607a      	str	r2, [r7, #4]
 8002b3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b40:	f7ff ff3e 	bl	80029c0 <__NVIC_GetPriorityGrouping>
 8002b44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	68b9      	ldr	r1, [r7, #8]
 8002b4a:	6978      	ldr	r0, [r7, #20]
 8002b4c:	f7ff ff8e 	bl	8002a6c <NVIC_EncodePriority>
 8002b50:	4602      	mov	r2, r0
 8002b52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b56:	4611      	mov	r1, r2
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff ff5d 	bl	8002a18 <__NVIC_SetPriority>
}
 8002b5e:	bf00      	nop
 8002b60:	3718      	adds	r7, #24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b082      	sub	sp, #8
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff ff31 	bl	80029dc <__NVIC_EnableIRQ>
}
 8002b7a:	bf00      	nop
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b082      	sub	sp, #8
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7ff ffa2 	bl	8002ad4 <SysTick_Config>
 8002b90:	4603      	mov	r3, r0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b084      	sub	sp, #16
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ba8:	f7ff fac4 	bl	8002134 <HAL_GetTick>
 8002bac:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d008      	beq.n	8002bcc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2280      	movs	r2, #128	; 0x80
 8002bbe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e052      	b.n	8002c72 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 0216 	bic.w	r2, r2, #22
 8002bda:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	695a      	ldr	r2, [r3, #20]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bea:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d103      	bne.n	8002bfc <HAL_DMA_Abort+0x62>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d007      	beq.n	8002c0c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0208 	bic.w	r2, r2, #8
 8002c0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 0201 	bic.w	r2, r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c1c:	e013      	b.n	8002c46 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c1e:	f7ff fa89 	bl	8002134 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	2b05      	cmp	r3, #5
 8002c2a:	d90c      	bls.n	8002c46 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2203      	movs	r2, #3
 8002c36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e015      	b.n	8002c72 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d1e4      	bne.n	8002c1e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c58:	223f      	movs	r2, #63	; 0x3f
 8002c5a:	409a      	lsls	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b083      	sub	sp, #12
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d004      	beq.n	8002c98 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2280      	movs	r2, #128	; 0x80
 8002c92:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e00c      	b.n	8002cb2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2205      	movs	r2, #5
 8002c9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 0201 	bic.w	r2, r2, #1
 8002cae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
	...

08002cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b089      	sub	sp, #36	; 0x24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	61fb      	str	r3, [r7, #28]
 8002cda:	e159      	b.n	8002f90 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cdc:	2201      	movs	r2, #1
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	4013      	ands	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	f040 8148 	bne.w	8002f8a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f003 0303 	and.w	r3, r3, #3
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d005      	beq.n	8002d12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d130      	bne.n	8002d74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	2203      	movs	r2, #3
 8002d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d22:	43db      	mvns	r3, r3
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	4013      	ands	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	68da      	ldr	r2, [r3, #12]
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d48:	2201      	movs	r2, #1
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	43db      	mvns	r3, r3
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	4013      	ands	r3, r2
 8002d56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	091b      	lsrs	r3, r3, #4
 8002d5e:	f003 0201 	and.w	r2, r3, #1
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f003 0303 	and.w	r3, r3, #3
 8002d7c:	2b03      	cmp	r3, #3
 8002d7e:	d017      	beq.n	8002db0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	2203      	movs	r2, #3
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	43db      	mvns	r3, r3
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	4013      	ands	r3, r2
 8002d96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	689a      	ldr	r2, [r3, #8]
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f003 0303 	and.w	r3, r3, #3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d123      	bne.n	8002e04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	08da      	lsrs	r2, r3, #3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3208      	adds	r2, #8
 8002dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	220f      	movs	r2, #15
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	691a      	ldr	r2, [r3, #16]
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	f003 0307 	and.w	r3, r3, #7
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	08da      	lsrs	r2, r3, #3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	3208      	adds	r2, #8
 8002dfe:	69b9      	ldr	r1, [r7, #24]
 8002e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	2203      	movs	r2, #3
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	43db      	mvns	r3, r3
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f003 0203 	and.w	r2, r3, #3
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f000 80a2 	beq.w	8002f8a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e46:	2300      	movs	r3, #0
 8002e48:	60fb      	str	r3, [r7, #12]
 8002e4a:	4b57      	ldr	r3, [pc, #348]	; (8002fa8 <HAL_GPIO_Init+0x2e8>)
 8002e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4e:	4a56      	ldr	r2, [pc, #344]	; (8002fa8 <HAL_GPIO_Init+0x2e8>)
 8002e50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e54:	6453      	str	r3, [r2, #68]	; 0x44
 8002e56:	4b54      	ldr	r3, [pc, #336]	; (8002fa8 <HAL_GPIO_Init+0x2e8>)
 8002e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e5e:	60fb      	str	r3, [r7, #12]
 8002e60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e62:	4a52      	ldr	r2, [pc, #328]	; (8002fac <HAL_GPIO_Init+0x2ec>)
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	089b      	lsrs	r3, r3, #2
 8002e68:	3302      	adds	r3, #2
 8002e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	f003 0303 	and.w	r3, r3, #3
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	220f      	movs	r2, #15
 8002e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7e:	43db      	mvns	r3, r3
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	4013      	ands	r3, r2
 8002e84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a49      	ldr	r2, [pc, #292]	; (8002fb0 <HAL_GPIO_Init+0x2f0>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d019      	beq.n	8002ec2 <HAL_GPIO_Init+0x202>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a48      	ldr	r2, [pc, #288]	; (8002fb4 <HAL_GPIO_Init+0x2f4>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d013      	beq.n	8002ebe <HAL_GPIO_Init+0x1fe>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a47      	ldr	r2, [pc, #284]	; (8002fb8 <HAL_GPIO_Init+0x2f8>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d00d      	beq.n	8002eba <HAL_GPIO_Init+0x1fa>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a46      	ldr	r2, [pc, #280]	; (8002fbc <HAL_GPIO_Init+0x2fc>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d007      	beq.n	8002eb6 <HAL_GPIO_Init+0x1f6>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a45      	ldr	r2, [pc, #276]	; (8002fc0 <HAL_GPIO_Init+0x300>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d101      	bne.n	8002eb2 <HAL_GPIO_Init+0x1f2>
 8002eae:	2304      	movs	r3, #4
 8002eb0:	e008      	b.n	8002ec4 <HAL_GPIO_Init+0x204>
 8002eb2:	2307      	movs	r3, #7
 8002eb4:	e006      	b.n	8002ec4 <HAL_GPIO_Init+0x204>
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e004      	b.n	8002ec4 <HAL_GPIO_Init+0x204>
 8002eba:	2302      	movs	r3, #2
 8002ebc:	e002      	b.n	8002ec4 <HAL_GPIO_Init+0x204>
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e000      	b.n	8002ec4 <HAL_GPIO_Init+0x204>
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	69fa      	ldr	r2, [r7, #28]
 8002ec6:	f002 0203 	and.w	r2, r2, #3
 8002eca:	0092      	lsls	r2, r2, #2
 8002ecc:	4093      	lsls	r3, r2
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ed4:	4935      	ldr	r1, [pc, #212]	; (8002fac <HAL_GPIO_Init+0x2ec>)
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	089b      	lsrs	r3, r3, #2
 8002eda:	3302      	adds	r3, #2
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ee2:	4b38      	ldr	r3, [pc, #224]	; (8002fc4 <HAL_GPIO_Init+0x304>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	43db      	mvns	r3, r3
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f06:	4a2f      	ldr	r2, [pc, #188]	; (8002fc4 <HAL_GPIO_Init+0x304>)
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f0c:	4b2d      	ldr	r3, [pc, #180]	; (8002fc4 <HAL_GPIO_Init+0x304>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	43db      	mvns	r3, r3
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d003      	beq.n	8002f30 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f30:	4a24      	ldr	r2, [pc, #144]	; (8002fc4 <HAL_GPIO_Init+0x304>)
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f36:	4b23      	ldr	r3, [pc, #140]	; (8002fc4 <HAL_GPIO_Init+0x304>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	43db      	mvns	r3, r3
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	4013      	ands	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f5a:	4a1a      	ldr	r2, [pc, #104]	; (8002fc4 <HAL_GPIO_Init+0x304>)
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f60:	4b18      	ldr	r3, [pc, #96]	; (8002fc4 <HAL_GPIO_Init+0x304>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d003      	beq.n	8002f84 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f84:	4a0f      	ldr	r2, [pc, #60]	; (8002fc4 <HAL_GPIO_Init+0x304>)
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	61fb      	str	r3, [r7, #28]
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	2b0f      	cmp	r3, #15
 8002f94:	f67f aea2 	bls.w	8002cdc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f98:	bf00      	nop
 8002f9a:	bf00      	nop
 8002f9c:	3724      	adds	r7, #36	; 0x24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	40013800 	.word	0x40013800
 8002fb0:	40020000 	.word	0x40020000
 8002fb4:	40020400 	.word	0x40020400
 8002fb8:	40020800 	.word	0x40020800
 8002fbc:	40020c00 	.word	0x40020c00
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	40013c00 	.word	0x40013c00

08002fc8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	691a      	ldr	r2, [r3, #16]
 8002fd8:	887b      	ldrh	r3, [r7, #2]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d002      	beq.n	8002fe6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	73fb      	strb	r3, [r7, #15]
 8002fe4:	e001      	b.n	8002fea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3714      	adds	r7, #20
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	460b      	mov	r3, r1
 8003002:	807b      	strh	r3, [r7, #2]
 8003004:	4613      	mov	r3, r2
 8003006:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003008:	787b      	ldrb	r3, [r7, #1]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d003      	beq.n	8003016 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800300e:	887a      	ldrh	r2, [r7, #2]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003014:	e003      	b.n	800301e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003016:	887b      	ldrh	r3, [r7, #2]
 8003018:	041a      	lsls	r2, r3, #16
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	619a      	str	r2, [r3, #24]
}
 800301e:	bf00      	nop
 8003020:	370c      	adds	r7, #12
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
	...

0800302c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e267      	b.n	800350e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b00      	cmp	r3, #0
 8003048:	d075      	beq.n	8003136 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800304a:	4b88      	ldr	r3, [pc, #544]	; (800326c <HAL_RCC_OscConfig+0x240>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 030c 	and.w	r3, r3, #12
 8003052:	2b04      	cmp	r3, #4
 8003054:	d00c      	beq.n	8003070 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003056:	4b85      	ldr	r3, [pc, #532]	; (800326c <HAL_RCC_OscConfig+0x240>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800305e:	2b08      	cmp	r3, #8
 8003060:	d112      	bne.n	8003088 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003062:	4b82      	ldr	r3, [pc, #520]	; (800326c <HAL_RCC_OscConfig+0x240>)
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800306a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800306e:	d10b      	bne.n	8003088 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003070:	4b7e      	ldr	r3, [pc, #504]	; (800326c <HAL_RCC_OscConfig+0x240>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d05b      	beq.n	8003134 <HAL_RCC_OscConfig+0x108>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d157      	bne.n	8003134 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e242      	b.n	800350e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003090:	d106      	bne.n	80030a0 <HAL_RCC_OscConfig+0x74>
 8003092:	4b76      	ldr	r3, [pc, #472]	; (800326c <HAL_RCC_OscConfig+0x240>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a75      	ldr	r2, [pc, #468]	; (800326c <HAL_RCC_OscConfig+0x240>)
 8003098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800309c:	6013      	str	r3, [r2, #0]
 800309e:	e01d      	b.n	80030dc <HAL_RCC_OscConfig+0xb0>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030a8:	d10c      	bne.n	80030c4 <HAL_RCC_OscConfig+0x98>
 80030aa:	4b70      	ldr	r3, [pc, #448]	; (800326c <HAL_RCC_OscConfig+0x240>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a6f      	ldr	r2, [pc, #444]	; (800326c <HAL_RCC_OscConfig+0x240>)
 80030b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030b4:	6013      	str	r3, [r2, #0]
 80030b6:	4b6d      	ldr	r3, [pc, #436]	; (800326c <HAL_RCC_OscConfig+0x240>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a6c      	ldr	r2, [pc, #432]	; (800326c <HAL_RCC_OscConfig+0x240>)
 80030bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	e00b      	b.n	80030dc <HAL_RCC_OscConfig+0xb0>
 80030c4:	4b69      	ldr	r3, [pc, #420]	; (800326c <HAL_RCC_OscConfig+0x240>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a68      	ldr	r2, [pc, #416]	; (800326c <HAL_RCC_OscConfig+0x240>)
 80030ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ce:	6013      	str	r3, [r2, #0]
 80030d0:	4b66      	ldr	r3, [pc, #408]	; (800326c <HAL_RCC_OscConfig+0x240>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a65      	ldr	r2, [pc, #404]	; (800326c <HAL_RCC_OscConfig+0x240>)
 80030d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d013      	beq.n	800310c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e4:	f7ff f826 	bl	8002134 <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ea:	e008      	b.n	80030fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030ec:	f7ff f822 	bl	8002134 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b64      	cmp	r3, #100	; 0x64
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e207      	b.n	800350e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030fe:	4b5b      	ldr	r3, [pc, #364]	; (800326c <HAL_RCC_OscConfig+0x240>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d0f0      	beq.n	80030ec <HAL_RCC_OscConfig+0xc0>
 800310a:	e014      	b.n	8003136 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310c:	f7ff f812 	bl	8002134 <HAL_GetTick>
 8003110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003112:	e008      	b.n	8003126 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003114:	f7ff f80e 	bl	8002134 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b64      	cmp	r3, #100	; 0x64
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e1f3      	b.n	800350e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003126:	4b51      	ldr	r3, [pc, #324]	; (800326c <HAL_RCC_OscConfig+0x240>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1f0      	bne.n	8003114 <HAL_RCC_OscConfig+0xe8>
 8003132:	e000      	b.n	8003136 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003134:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d063      	beq.n	800320a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003142:	4b4a      	ldr	r3, [pc, #296]	; (800326c <HAL_RCC_OscConfig+0x240>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f003 030c 	and.w	r3, r3, #12
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00b      	beq.n	8003166 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800314e:	4b47      	ldr	r3, [pc, #284]	; (800326c <HAL_RCC_OscConfig+0x240>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003156:	2b08      	cmp	r3, #8
 8003158:	d11c      	bne.n	8003194 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800315a:	4b44      	ldr	r3, [pc, #272]	; (800326c <HAL_RCC_OscConfig+0x240>)
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d116      	bne.n	8003194 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003166:	4b41      	ldr	r3, [pc, #260]	; (800326c <HAL_RCC_OscConfig+0x240>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d005      	beq.n	800317e <HAL_RCC_OscConfig+0x152>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d001      	beq.n	800317e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e1c7      	b.n	800350e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800317e:	4b3b      	ldr	r3, [pc, #236]	; (800326c <HAL_RCC_OscConfig+0x240>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	4937      	ldr	r1, [pc, #220]	; (800326c <HAL_RCC_OscConfig+0x240>)
 800318e:	4313      	orrs	r3, r2
 8003190:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003192:	e03a      	b.n	800320a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d020      	beq.n	80031de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800319c:	4b34      	ldr	r3, [pc, #208]	; (8003270 <HAL_RCC_OscConfig+0x244>)
 800319e:	2201      	movs	r2, #1
 80031a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a2:	f7fe ffc7 	bl	8002134 <HAL_GetTick>
 80031a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a8:	e008      	b.n	80031bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031aa:	f7fe ffc3 	bl	8002134 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d901      	bls.n	80031bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e1a8      	b.n	800350e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031bc:	4b2b      	ldr	r3, [pc, #172]	; (800326c <HAL_RCC_OscConfig+0x240>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d0f0      	beq.n	80031aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031c8:	4b28      	ldr	r3, [pc, #160]	; (800326c <HAL_RCC_OscConfig+0x240>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	4925      	ldr	r1, [pc, #148]	; (800326c <HAL_RCC_OscConfig+0x240>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	600b      	str	r3, [r1, #0]
 80031dc:	e015      	b.n	800320a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031de:	4b24      	ldr	r3, [pc, #144]	; (8003270 <HAL_RCC_OscConfig+0x244>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e4:	f7fe ffa6 	bl	8002134 <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031ec:	f7fe ffa2 	bl	8002134 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e187      	b.n	800350e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031fe:	4b1b      	ldr	r3, [pc, #108]	; (800326c <HAL_RCC_OscConfig+0x240>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1f0      	bne.n	80031ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0308 	and.w	r3, r3, #8
 8003212:	2b00      	cmp	r3, #0
 8003214:	d036      	beq.n	8003284 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d016      	beq.n	800324c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800321e:	4b15      	ldr	r3, [pc, #84]	; (8003274 <HAL_RCC_OscConfig+0x248>)
 8003220:	2201      	movs	r2, #1
 8003222:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003224:	f7fe ff86 	bl	8002134 <HAL_GetTick>
 8003228:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800322a:	e008      	b.n	800323e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800322c:	f7fe ff82 	bl	8002134 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b02      	cmp	r3, #2
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e167      	b.n	800350e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800323e:	4b0b      	ldr	r3, [pc, #44]	; (800326c <HAL_RCC_OscConfig+0x240>)
 8003240:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d0f0      	beq.n	800322c <HAL_RCC_OscConfig+0x200>
 800324a:	e01b      	b.n	8003284 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800324c:	4b09      	ldr	r3, [pc, #36]	; (8003274 <HAL_RCC_OscConfig+0x248>)
 800324e:	2200      	movs	r2, #0
 8003250:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003252:	f7fe ff6f 	bl	8002134 <HAL_GetTick>
 8003256:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003258:	e00e      	b.n	8003278 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800325a:	f7fe ff6b 	bl	8002134 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b02      	cmp	r3, #2
 8003266:	d907      	bls.n	8003278 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e150      	b.n	800350e <HAL_RCC_OscConfig+0x4e2>
 800326c:	40023800 	.word	0x40023800
 8003270:	42470000 	.word	0x42470000
 8003274:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003278:	4b88      	ldr	r3, [pc, #544]	; (800349c <HAL_RCC_OscConfig+0x470>)
 800327a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1ea      	bne.n	800325a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0304 	and.w	r3, r3, #4
 800328c:	2b00      	cmp	r3, #0
 800328e:	f000 8097 	beq.w	80033c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003292:	2300      	movs	r3, #0
 8003294:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003296:	4b81      	ldr	r3, [pc, #516]	; (800349c <HAL_RCC_OscConfig+0x470>)
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10f      	bne.n	80032c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032a2:	2300      	movs	r3, #0
 80032a4:	60bb      	str	r3, [r7, #8]
 80032a6:	4b7d      	ldr	r3, [pc, #500]	; (800349c <HAL_RCC_OscConfig+0x470>)
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	4a7c      	ldr	r2, [pc, #496]	; (800349c <HAL_RCC_OscConfig+0x470>)
 80032ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032b0:	6413      	str	r3, [r2, #64]	; 0x40
 80032b2:	4b7a      	ldr	r3, [pc, #488]	; (800349c <HAL_RCC_OscConfig+0x470>)
 80032b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ba:	60bb      	str	r3, [r7, #8]
 80032bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032be:	2301      	movs	r3, #1
 80032c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c2:	4b77      	ldr	r3, [pc, #476]	; (80034a0 <HAL_RCC_OscConfig+0x474>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d118      	bne.n	8003300 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ce:	4b74      	ldr	r3, [pc, #464]	; (80034a0 <HAL_RCC_OscConfig+0x474>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a73      	ldr	r2, [pc, #460]	; (80034a0 <HAL_RCC_OscConfig+0x474>)
 80032d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032da:	f7fe ff2b 	bl	8002134 <HAL_GetTick>
 80032de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e0:	e008      	b.n	80032f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032e2:	f7fe ff27 	bl	8002134 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e10c      	b.n	800350e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f4:	4b6a      	ldr	r3, [pc, #424]	; (80034a0 <HAL_RCC_OscConfig+0x474>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0f0      	beq.n	80032e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d106      	bne.n	8003316 <HAL_RCC_OscConfig+0x2ea>
 8003308:	4b64      	ldr	r3, [pc, #400]	; (800349c <HAL_RCC_OscConfig+0x470>)
 800330a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330c:	4a63      	ldr	r2, [pc, #396]	; (800349c <HAL_RCC_OscConfig+0x470>)
 800330e:	f043 0301 	orr.w	r3, r3, #1
 8003312:	6713      	str	r3, [r2, #112]	; 0x70
 8003314:	e01c      	b.n	8003350 <HAL_RCC_OscConfig+0x324>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	2b05      	cmp	r3, #5
 800331c:	d10c      	bne.n	8003338 <HAL_RCC_OscConfig+0x30c>
 800331e:	4b5f      	ldr	r3, [pc, #380]	; (800349c <HAL_RCC_OscConfig+0x470>)
 8003320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003322:	4a5e      	ldr	r2, [pc, #376]	; (800349c <HAL_RCC_OscConfig+0x470>)
 8003324:	f043 0304 	orr.w	r3, r3, #4
 8003328:	6713      	str	r3, [r2, #112]	; 0x70
 800332a:	4b5c      	ldr	r3, [pc, #368]	; (800349c <HAL_RCC_OscConfig+0x470>)
 800332c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332e:	4a5b      	ldr	r2, [pc, #364]	; (800349c <HAL_RCC_OscConfig+0x470>)
 8003330:	f043 0301 	orr.w	r3, r3, #1
 8003334:	6713      	str	r3, [r2, #112]	; 0x70
 8003336:	e00b      	b.n	8003350 <HAL_RCC_OscConfig+0x324>
 8003338:	4b58      	ldr	r3, [pc, #352]	; (800349c <HAL_RCC_OscConfig+0x470>)
 800333a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800333c:	4a57      	ldr	r2, [pc, #348]	; (800349c <HAL_RCC_OscConfig+0x470>)
 800333e:	f023 0301 	bic.w	r3, r3, #1
 8003342:	6713      	str	r3, [r2, #112]	; 0x70
 8003344:	4b55      	ldr	r3, [pc, #340]	; (800349c <HAL_RCC_OscConfig+0x470>)
 8003346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003348:	4a54      	ldr	r2, [pc, #336]	; (800349c <HAL_RCC_OscConfig+0x470>)
 800334a:	f023 0304 	bic.w	r3, r3, #4
 800334e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d015      	beq.n	8003384 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003358:	f7fe feec 	bl	8002134 <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800335e:	e00a      	b.n	8003376 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003360:	f7fe fee8 	bl	8002134 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	f241 3288 	movw	r2, #5000	; 0x1388
 800336e:	4293      	cmp	r3, r2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e0cb      	b.n	800350e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003376:	4b49      	ldr	r3, [pc, #292]	; (800349c <HAL_RCC_OscConfig+0x470>)
 8003378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d0ee      	beq.n	8003360 <HAL_RCC_OscConfig+0x334>
 8003382:	e014      	b.n	80033ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003384:	f7fe fed6 	bl	8002134 <HAL_GetTick>
 8003388:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800338a:	e00a      	b.n	80033a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800338c:	f7fe fed2 	bl	8002134 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	f241 3288 	movw	r2, #5000	; 0x1388
 800339a:	4293      	cmp	r3, r2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e0b5      	b.n	800350e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033a2:	4b3e      	ldr	r3, [pc, #248]	; (800349c <HAL_RCC_OscConfig+0x470>)
 80033a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1ee      	bne.n	800338c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033ae:	7dfb      	ldrb	r3, [r7, #23]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d105      	bne.n	80033c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033b4:	4b39      	ldr	r3, [pc, #228]	; (800349c <HAL_RCC_OscConfig+0x470>)
 80033b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b8:	4a38      	ldr	r2, [pc, #224]	; (800349c <HAL_RCC_OscConfig+0x470>)
 80033ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 80a1 	beq.w	800350c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033ca:	4b34      	ldr	r3, [pc, #208]	; (800349c <HAL_RCC_OscConfig+0x470>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f003 030c 	and.w	r3, r3, #12
 80033d2:	2b08      	cmp	r3, #8
 80033d4:	d05c      	beq.n	8003490 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d141      	bne.n	8003462 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033de:	4b31      	ldr	r3, [pc, #196]	; (80034a4 <HAL_RCC_OscConfig+0x478>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e4:	f7fe fea6 	bl	8002134 <HAL_GetTick>
 80033e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ea:	e008      	b.n	80033fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033ec:	f7fe fea2 	bl	8002134 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e087      	b.n	800350e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033fe:	4b27      	ldr	r3, [pc, #156]	; (800349c <HAL_RCC_OscConfig+0x470>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1f0      	bne.n	80033ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	69da      	ldr	r2, [r3, #28]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	431a      	orrs	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	019b      	lsls	r3, r3, #6
 800341a:	431a      	orrs	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003420:	085b      	lsrs	r3, r3, #1
 8003422:	3b01      	subs	r3, #1
 8003424:	041b      	lsls	r3, r3, #16
 8003426:	431a      	orrs	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342c:	061b      	lsls	r3, r3, #24
 800342e:	491b      	ldr	r1, [pc, #108]	; (800349c <HAL_RCC_OscConfig+0x470>)
 8003430:	4313      	orrs	r3, r2
 8003432:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003434:	4b1b      	ldr	r3, [pc, #108]	; (80034a4 <HAL_RCC_OscConfig+0x478>)
 8003436:	2201      	movs	r2, #1
 8003438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800343a:	f7fe fe7b 	bl	8002134 <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003442:	f7fe fe77 	bl	8002134 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e05c      	b.n	800350e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003454:	4b11      	ldr	r3, [pc, #68]	; (800349c <HAL_RCC_OscConfig+0x470>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0f0      	beq.n	8003442 <HAL_RCC_OscConfig+0x416>
 8003460:	e054      	b.n	800350c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003462:	4b10      	ldr	r3, [pc, #64]	; (80034a4 <HAL_RCC_OscConfig+0x478>)
 8003464:	2200      	movs	r2, #0
 8003466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003468:	f7fe fe64 	bl	8002134 <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003470:	f7fe fe60 	bl	8002134 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e045      	b.n	800350e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003482:	4b06      	ldr	r3, [pc, #24]	; (800349c <HAL_RCC_OscConfig+0x470>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1f0      	bne.n	8003470 <HAL_RCC_OscConfig+0x444>
 800348e:	e03d      	b.n	800350c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d107      	bne.n	80034a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e038      	b.n	800350e <HAL_RCC_OscConfig+0x4e2>
 800349c:	40023800 	.word	0x40023800
 80034a0:	40007000 	.word	0x40007000
 80034a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034a8:	4b1b      	ldr	r3, [pc, #108]	; (8003518 <HAL_RCC_OscConfig+0x4ec>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d028      	beq.n	8003508 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d121      	bne.n	8003508 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d11a      	bne.n	8003508 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034d8:	4013      	ands	r3, r2
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d111      	bne.n	8003508 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ee:	085b      	lsrs	r3, r3, #1
 80034f0:	3b01      	subs	r3, #1
 80034f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d107      	bne.n	8003508 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003502:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003504:	429a      	cmp	r2, r3
 8003506:	d001      	beq.n	800350c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e000      	b.n	800350e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3718      	adds	r7, #24
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	40023800 	.word	0x40023800

0800351c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d101      	bne.n	8003530 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e0cc      	b.n	80036ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003530:	4b68      	ldr	r3, [pc, #416]	; (80036d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0307 	and.w	r3, r3, #7
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	429a      	cmp	r2, r3
 800353c:	d90c      	bls.n	8003558 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800353e:	4b65      	ldr	r3, [pc, #404]	; (80036d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003540:	683a      	ldr	r2, [r7, #0]
 8003542:	b2d2      	uxtb	r2, r2
 8003544:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003546:	4b63      	ldr	r3, [pc, #396]	; (80036d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0307 	and.w	r3, r3, #7
 800354e:	683a      	ldr	r2, [r7, #0]
 8003550:	429a      	cmp	r2, r3
 8003552:	d001      	beq.n	8003558 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e0b8      	b.n	80036ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d020      	beq.n	80035a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b00      	cmp	r3, #0
 800356e:	d005      	beq.n	800357c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003570:	4b59      	ldr	r3, [pc, #356]	; (80036d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	4a58      	ldr	r2, [pc, #352]	; (80036d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003576:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800357a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0308 	and.w	r3, r3, #8
 8003584:	2b00      	cmp	r3, #0
 8003586:	d005      	beq.n	8003594 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003588:	4b53      	ldr	r3, [pc, #332]	; (80036d8 <HAL_RCC_ClockConfig+0x1bc>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	4a52      	ldr	r2, [pc, #328]	; (80036d8 <HAL_RCC_ClockConfig+0x1bc>)
 800358e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003592:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003594:	4b50      	ldr	r3, [pc, #320]	; (80036d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	494d      	ldr	r1, [pc, #308]	; (80036d8 <HAL_RCC_ClockConfig+0x1bc>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d044      	beq.n	800363c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d107      	bne.n	80035ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ba:	4b47      	ldr	r3, [pc, #284]	; (80036d8 <HAL_RCC_ClockConfig+0x1bc>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d119      	bne.n	80035fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e07f      	b.n	80036ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d003      	beq.n	80035da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035d6:	2b03      	cmp	r3, #3
 80035d8:	d107      	bne.n	80035ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035da:	4b3f      	ldr	r3, [pc, #252]	; (80036d8 <HAL_RCC_ClockConfig+0x1bc>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d109      	bne.n	80035fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e06f      	b.n	80036ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ea:	4b3b      	ldr	r3, [pc, #236]	; (80036d8 <HAL_RCC_ClockConfig+0x1bc>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e067      	b.n	80036ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035fa:	4b37      	ldr	r3, [pc, #220]	; (80036d8 <HAL_RCC_ClockConfig+0x1bc>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f023 0203 	bic.w	r2, r3, #3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	4934      	ldr	r1, [pc, #208]	; (80036d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003608:	4313      	orrs	r3, r2
 800360a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800360c:	f7fe fd92 	bl	8002134 <HAL_GetTick>
 8003610:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003612:	e00a      	b.n	800362a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003614:	f7fe fd8e 	bl	8002134 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003622:	4293      	cmp	r3, r2
 8003624:	d901      	bls.n	800362a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e04f      	b.n	80036ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800362a:	4b2b      	ldr	r3, [pc, #172]	; (80036d8 <HAL_RCC_ClockConfig+0x1bc>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f003 020c 	and.w	r2, r3, #12
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	429a      	cmp	r2, r3
 800363a:	d1eb      	bne.n	8003614 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800363c:	4b25      	ldr	r3, [pc, #148]	; (80036d4 <HAL_RCC_ClockConfig+0x1b8>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0307 	and.w	r3, r3, #7
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	429a      	cmp	r2, r3
 8003648:	d20c      	bcs.n	8003664 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800364a:	4b22      	ldr	r3, [pc, #136]	; (80036d4 <HAL_RCC_ClockConfig+0x1b8>)
 800364c:	683a      	ldr	r2, [r7, #0]
 800364e:	b2d2      	uxtb	r2, r2
 8003650:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003652:	4b20      	ldr	r3, [pc, #128]	; (80036d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0307 	and.w	r3, r3, #7
 800365a:	683a      	ldr	r2, [r7, #0]
 800365c:	429a      	cmp	r2, r3
 800365e:	d001      	beq.n	8003664 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e032      	b.n	80036ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	2b00      	cmp	r3, #0
 800366e:	d008      	beq.n	8003682 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003670:	4b19      	ldr	r3, [pc, #100]	; (80036d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	4916      	ldr	r1, [pc, #88]	; (80036d8 <HAL_RCC_ClockConfig+0x1bc>)
 800367e:	4313      	orrs	r3, r2
 8003680:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0308 	and.w	r3, r3, #8
 800368a:	2b00      	cmp	r3, #0
 800368c:	d009      	beq.n	80036a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800368e:	4b12      	ldr	r3, [pc, #72]	; (80036d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	490e      	ldr	r1, [pc, #56]	; (80036d8 <HAL_RCC_ClockConfig+0x1bc>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036a2:	f000 f821 	bl	80036e8 <HAL_RCC_GetSysClockFreq>
 80036a6:	4602      	mov	r2, r0
 80036a8:	4b0b      	ldr	r3, [pc, #44]	; (80036d8 <HAL_RCC_ClockConfig+0x1bc>)
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	091b      	lsrs	r3, r3, #4
 80036ae:	f003 030f 	and.w	r3, r3, #15
 80036b2:	490a      	ldr	r1, [pc, #40]	; (80036dc <HAL_RCC_ClockConfig+0x1c0>)
 80036b4:	5ccb      	ldrb	r3, [r1, r3]
 80036b6:	fa22 f303 	lsr.w	r3, r2, r3
 80036ba:	4a09      	ldr	r2, [pc, #36]	; (80036e0 <HAL_RCC_ClockConfig+0x1c4>)
 80036bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036be:	4b09      	ldr	r3, [pc, #36]	; (80036e4 <HAL_RCC_ClockConfig+0x1c8>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7fe fcf2 	bl	80020ac <HAL_InitTick>

  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3710      	adds	r7, #16
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	40023c00 	.word	0x40023c00
 80036d8:	40023800 	.word	0x40023800
 80036dc:	0800603c 	.word	0x0800603c
 80036e0:	20000000 	.word	0x20000000
 80036e4:	20000004 	.word	0x20000004

080036e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036ec:	b094      	sub	sp, #80	; 0x50
 80036ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036f0:	2300      	movs	r3, #0
 80036f2:	647b      	str	r3, [r7, #68]	; 0x44
 80036f4:	2300      	movs	r3, #0
 80036f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036f8:	2300      	movs	r3, #0
 80036fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80036fc:	2300      	movs	r3, #0
 80036fe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003700:	4b79      	ldr	r3, [pc, #484]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f003 030c 	and.w	r3, r3, #12
 8003708:	2b08      	cmp	r3, #8
 800370a:	d00d      	beq.n	8003728 <HAL_RCC_GetSysClockFreq+0x40>
 800370c:	2b08      	cmp	r3, #8
 800370e:	f200 80e1 	bhi.w	80038d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003712:	2b00      	cmp	r3, #0
 8003714:	d002      	beq.n	800371c <HAL_RCC_GetSysClockFreq+0x34>
 8003716:	2b04      	cmp	r3, #4
 8003718:	d003      	beq.n	8003722 <HAL_RCC_GetSysClockFreq+0x3a>
 800371a:	e0db      	b.n	80038d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800371c:	4b73      	ldr	r3, [pc, #460]	; (80038ec <HAL_RCC_GetSysClockFreq+0x204>)
 800371e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003720:	e0db      	b.n	80038da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003722:	4b73      	ldr	r3, [pc, #460]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003724:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003726:	e0d8      	b.n	80038da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003728:	4b6f      	ldr	r3, [pc, #444]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003730:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003732:	4b6d      	ldr	r3, [pc, #436]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d063      	beq.n	8003806 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800373e:	4b6a      	ldr	r3, [pc, #424]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	099b      	lsrs	r3, r3, #6
 8003744:	2200      	movs	r2, #0
 8003746:	63bb      	str	r3, [r7, #56]	; 0x38
 8003748:	63fa      	str	r2, [r7, #60]	; 0x3c
 800374a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800374c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003750:	633b      	str	r3, [r7, #48]	; 0x30
 8003752:	2300      	movs	r3, #0
 8003754:	637b      	str	r3, [r7, #52]	; 0x34
 8003756:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800375a:	4622      	mov	r2, r4
 800375c:	462b      	mov	r3, r5
 800375e:	f04f 0000 	mov.w	r0, #0
 8003762:	f04f 0100 	mov.w	r1, #0
 8003766:	0159      	lsls	r1, r3, #5
 8003768:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800376c:	0150      	lsls	r0, r2, #5
 800376e:	4602      	mov	r2, r0
 8003770:	460b      	mov	r3, r1
 8003772:	4621      	mov	r1, r4
 8003774:	1a51      	subs	r1, r2, r1
 8003776:	6139      	str	r1, [r7, #16]
 8003778:	4629      	mov	r1, r5
 800377a:	eb63 0301 	sbc.w	r3, r3, r1
 800377e:	617b      	str	r3, [r7, #20]
 8003780:	f04f 0200 	mov.w	r2, #0
 8003784:	f04f 0300 	mov.w	r3, #0
 8003788:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800378c:	4659      	mov	r1, fp
 800378e:	018b      	lsls	r3, r1, #6
 8003790:	4651      	mov	r1, sl
 8003792:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003796:	4651      	mov	r1, sl
 8003798:	018a      	lsls	r2, r1, #6
 800379a:	4651      	mov	r1, sl
 800379c:	ebb2 0801 	subs.w	r8, r2, r1
 80037a0:	4659      	mov	r1, fp
 80037a2:	eb63 0901 	sbc.w	r9, r3, r1
 80037a6:	f04f 0200 	mov.w	r2, #0
 80037aa:	f04f 0300 	mov.w	r3, #0
 80037ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037ba:	4690      	mov	r8, r2
 80037bc:	4699      	mov	r9, r3
 80037be:	4623      	mov	r3, r4
 80037c0:	eb18 0303 	adds.w	r3, r8, r3
 80037c4:	60bb      	str	r3, [r7, #8]
 80037c6:	462b      	mov	r3, r5
 80037c8:	eb49 0303 	adc.w	r3, r9, r3
 80037cc:	60fb      	str	r3, [r7, #12]
 80037ce:	f04f 0200 	mov.w	r2, #0
 80037d2:	f04f 0300 	mov.w	r3, #0
 80037d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80037da:	4629      	mov	r1, r5
 80037dc:	024b      	lsls	r3, r1, #9
 80037de:	4621      	mov	r1, r4
 80037e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80037e4:	4621      	mov	r1, r4
 80037e6:	024a      	lsls	r2, r1, #9
 80037e8:	4610      	mov	r0, r2
 80037ea:	4619      	mov	r1, r3
 80037ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037ee:	2200      	movs	r2, #0
 80037f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80037f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80037f8:	f7fd f940 	bl	8000a7c <__aeabi_uldivmod>
 80037fc:	4602      	mov	r2, r0
 80037fe:	460b      	mov	r3, r1
 8003800:	4613      	mov	r3, r2
 8003802:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003804:	e058      	b.n	80038b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003806:	4b38      	ldr	r3, [pc, #224]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	099b      	lsrs	r3, r3, #6
 800380c:	2200      	movs	r2, #0
 800380e:	4618      	mov	r0, r3
 8003810:	4611      	mov	r1, r2
 8003812:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003816:	623b      	str	r3, [r7, #32]
 8003818:	2300      	movs	r3, #0
 800381a:	627b      	str	r3, [r7, #36]	; 0x24
 800381c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003820:	4642      	mov	r2, r8
 8003822:	464b      	mov	r3, r9
 8003824:	f04f 0000 	mov.w	r0, #0
 8003828:	f04f 0100 	mov.w	r1, #0
 800382c:	0159      	lsls	r1, r3, #5
 800382e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003832:	0150      	lsls	r0, r2, #5
 8003834:	4602      	mov	r2, r0
 8003836:	460b      	mov	r3, r1
 8003838:	4641      	mov	r1, r8
 800383a:	ebb2 0a01 	subs.w	sl, r2, r1
 800383e:	4649      	mov	r1, r9
 8003840:	eb63 0b01 	sbc.w	fp, r3, r1
 8003844:	f04f 0200 	mov.w	r2, #0
 8003848:	f04f 0300 	mov.w	r3, #0
 800384c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003850:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003854:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003858:	ebb2 040a 	subs.w	r4, r2, sl
 800385c:	eb63 050b 	sbc.w	r5, r3, fp
 8003860:	f04f 0200 	mov.w	r2, #0
 8003864:	f04f 0300 	mov.w	r3, #0
 8003868:	00eb      	lsls	r3, r5, #3
 800386a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800386e:	00e2      	lsls	r2, r4, #3
 8003870:	4614      	mov	r4, r2
 8003872:	461d      	mov	r5, r3
 8003874:	4643      	mov	r3, r8
 8003876:	18e3      	adds	r3, r4, r3
 8003878:	603b      	str	r3, [r7, #0]
 800387a:	464b      	mov	r3, r9
 800387c:	eb45 0303 	adc.w	r3, r5, r3
 8003880:	607b      	str	r3, [r7, #4]
 8003882:	f04f 0200 	mov.w	r2, #0
 8003886:	f04f 0300 	mov.w	r3, #0
 800388a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800388e:	4629      	mov	r1, r5
 8003890:	028b      	lsls	r3, r1, #10
 8003892:	4621      	mov	r1, r4
 8003894:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003898:	4621      	mov	r1, r4
 800389a:	028a      	lsls	r2, r1, #10
 800389c:	4610      	mov	r0, r2
 800389e:	4619      	mov	r1, r3
 80038a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038a2:	2200      	movs	r2, #0
 80038a4:	61bb      	str	r3, [r7, #24]
 80038a6:	61fa      	str	r2, [r7, #28]
 80038a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038ac:	f7fd f8e6 	bl	8000a7c <__aeabi_uldivmod>
 80038b0:	4602      	mov	r2, r0
 80038b2:	460b      	mov	r3, r1
 80038b4:	4613      	mov	r3, r2
 80038b6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038b8:	4b0b      	ldr	r3, [pc, #44]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	0c1b      	lsrs	r3, r3, #16
 80038be:	f003 0303 	and.w	r3, r3, #3
 80038c2:	3301      	adds	r3, #1
 80038c4:	005b      	lsls	r3, r3, #1
 80038c6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80038c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80038ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038d2:	e002      	b.n	80038da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038d4:	4b05      	ldr	r3, [pc, #20]	; (80038ec <HAL_RCC_GetSysClockFreq+0x204>)
 80038d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3750      	adds	r7, #80	; 0x50
 80038e0:	46bd      	mov	sp, r7
 80038e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038e6:	bf00      	nop
 80038e8:	40023800 	.word	0x40023800
 80038ec:	00f42400 	.word	0x00f42400
 80038f0:	007a1200 	.word	0x007a1200

080038f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038f4:	b480      	push	{r7}
 80038f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038f8:	4b03      	ldr	r3, [pc, #12]	; (8003908 <HAL_RCC_GetHCLKFreq+0x14>)
 80038fa:	681b      	ldr	r3, [r3, #0]
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	20000000 	.word	0x20000000

0800390c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003910:	f7ff fff0 	bl	80038f4 <HAL_RCC_GetHCLKFreq>
 8003914:	4602      	mov	r2, r0
 8003916:	4b05      	ldr	r3, [pc, #20]	; (800392c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	0a9b      	lsrs	r3, r3, #10
 800391c:	f003 0307 	and.w	r3, r3, #7
 8003920:	4903      	ldr	r1, [pc, #12]	; (8003930 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003922:	5ccb      	ldrb	r3, [r1, r3]
 8003924:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003928:	4618      	mov	r0, r3
 800392a:	bd80      	pop	{r7, pc}
 800392c:	40023800 	.word	0x40023800
 8003930:	0800604c 	.word	0x0800604c

08003934 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003938:	f7ff ffdc 	bl	80038f4 <HAL_RCC_GetHCLKFreq>
 800393c:	4602      	mov	r2, r0
 800393e:	4b05      	ldr	r3, [pc, #20]	; (8003954 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	0b5b      	lsrs	r3, r3, #13
 8003944:	f003 0307 	and.w	r3, r3, #7
 8003948:	4903      	ldr	r1, [pc, #12]	; (8003958 <HAL_RCC_GetPCLK2Freq+0x24>)
 800394a:	5ccb      	ldrb	r3, [r1, r3]
 800394c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003950:	4618      	mov	r0, r3
 8003952:	bd80      	pop	{r7, pc}
 8003954:	40023800 	.word	0x40023800
 8003958:	0800604c 	.word	0x0800604c

0800395c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e041      	b.n	80039f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d106      	bne.n	8003988 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7fe f9ea 	bl	8001d5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2202      	movs	r2, #2
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	3304      	adds	r3, #4
 8003998:	4619      	mov	r1, r3
 800399a:	4610      	mov	r0, r2
 800399c:	f000 fa10 	bl	8003dc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3708      	adds	r7, #8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b082      	sub	sp, #8
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d101      	bne.n	8003a0c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e041      	b.n	8003a90 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d106      	bne.n	8003a26 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 f839 	bl	8003a98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2202      	movs	r2, #2
 8003a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	3304      	adds	r3, #4
 8003a36:	4619      	mov	r1, r3
 8003a38:	4610      	mov	r0, r2
 8003a3a:	f000 f9c1 	bl	8003dc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3708      	adds	r7, #8
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d101      	bne.n	8003aca <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	e0ae      	b.n	8003c28 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2b0c      	cmp	r3, #12
 8003ad6:	f200 809f 	bhi.w	8003c18 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003ada:	a201      	add	r2, pc, #4	; (adr r2, 8003ae0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae0:	08003b15 	.word	0x08003b15
 8003ae4:	08003c19 	.word	0x08003c19
 8003ae8:	08003c19 	.word	0x08003c19
 8003aec:	08003c19 	.word	0x08003c19
 8003af0:	08003b55 	.word	0x08003b55
 8003af4:	08003c19 	.word	0x08003c19
 8003af8:	08003c19 	.word	0x08003c19
 8003afc:	08003c19 	.word	0x08003c19
 8003b00:	08003b97 	.word	0x08003b97
 8003b04:	08003c19 	.word	0x08003c19
 8003b08:	08003c19 	.word	0x08003c19
 8003b0c:	08003c19 	.word	0x08003c19
 8003b10:	08003bd7 	.word	0x08003bd7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68b9      	ldr	r1, [r7, #8]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 f9d0 	bl	8003ec0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	699a      	ldr	r2, [r3, #24]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f042 0208 	orr.w	r2, r2, #8
 8003b2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	699a      	ldr	r2, [r3, #24]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 0204 	bic.w	r2, r2, #4
 8003b3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	6999      	ldr	r1, [r3, #24]
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	691a      	ldr	r2, [r3, #16]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	619a      	str	r2, [r3, #24]
      break;
 8003b52:	e064      	b.n	8003c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68b9      	ldr	r1, [r7, #8]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 fa16 	bl	8003f8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	699a      	ldr	r2, [r3, #24]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	699a      	ldr	r2, [r3, #24]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	6999      	ldr	r1, [r3, #24]
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	021a      	lsls	r2, r3, #8
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	430a      	orrs	r2, r1
 8003b92:	619a      	str	r2, [r3, #24]
      break;
 8003b94:	e043      	b.n	8003c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68b9      	ldr	r1, [r7, #8]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f000 fa61 	bl	8004064 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	69da      	ldr	r2, [r3, #28]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f042 0208 	orr.w	r2, r2, #8
 8003bb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	69da      	ldr	r2, [r3, #28]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f022 0204 	bic.w	r2, r2, #4
 8003bc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	69d9      	ldr	r1, [r3, #28]
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	691a      	ldr	r2, [r3, #16]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	61da      	str	r2, [r3, #28]
      break;
 8003bd4:	e023      	b.n	8003c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68b9      	ldr	r1, [r7, #8]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f000 faab 	bl	8004138 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	69da      	ldr	r2, [r3, #28]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	69da      	ldr	r2, [r3, #28]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	69d9      	ldr	r1, [r3, #28]
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	021a      	lsls	r2, r3, #8
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	61da      	str	r2, [r3, #28]
      break;
 8003c16:	e002      	b.n	8003c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	75fb      	strb	r3, [r7, #23]
      break;
 8003c1c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c26:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3718      	adds	r7, #24
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d101      	bne.n	8003c4c <HAL_TIM_ConfigClockSource+0x1c>
 8003c48:	2302      	movs	r3, #2
 8003c4a:	e0b4      	b.n	8003db6 <HAL_TIM_ConfigClockSource+0x186>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2202      	movs	r2, #2
 8003c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68ba      	ldr	r2, [r7, #8]
 8003c7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c84:	d03e      	beq.n	8003d04 <HAL_TIM_ConfigClockSource+0xd4>
 8003c86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c8a:	f200 8087 	bhi.w	8003d9c <HAL_TIM_ConfigClockSource+0x16c>
 8003c8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c92:	f000 8086 	beq.w	8003da2 <HAL_TIM_ConfigClockSource+0x172>
 8003c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c9a:	d87f      	bhi.n	8003d9c <HAL_TIM_ConfigClockSource+0x16c>
 8003c9c:	2b70      	cmp	r3, #112	; 0x70
 8003c9e:	d01a      	beq.n	8003cd6 <HAL_TIM_ConfigClockSource+0xa6>
 8003ca0:	2b70      	cmp	r3, #112	; 0x70
 8003ca2:	d87b      	bhi.n	8003d9c <HAL_TIM_ConfigClockSource+0x16c>
 8003ca4:	2b60      	cmp	r3, #96	; 0x60
 8003ca6:	d050      	beq.n	8003d4a <HAL_TIM_ConfigClockSource+0x11a>
 8003ca8:	2b60      	cmp	r3, #96	; 0x60
 8003caa:	d877      	bhi.n	8003d9c <HAL_TIM_ConfigClockSource+0x16c>
 8003cac:	2b50      	cmp	r3, #80	; 0x50
 8003cae:	d03c      	beq.n	8003d2a <HAL_TIM_ConfigClockSource+0xfa>
 8003cb0:	2b50      	cmp	r3, #80	; 0x50
 8003cb2:	d873      	bhi.n	8003d9c <HAL_TIM_ConfigClockSource+0x16c>
 8003cb4:	2b40      	cmp	r3, #64	; 0x40
 8003cb6:	d058      	beq.n	8003d6a <HAL_TIM_ConfigClockSource+0x13a>
 8003cb8:	2b40      	cmp	r3, #64	; 0x40
 8003cba:	d86f      	bhi.n	8003d9c <HAL_TIM_ConfigClockSource+0x16c>
 8003cbc:	2b30      	cmp	r3, #48	; 0x30
 8003cbe:	d064      	beq.n	8003d8a <HAL_TIM_ConfigClockSource+0x15a>
 8003cc0:	2b30      	cmp	r3, #48	; 0x30
 8003cc2:	d86b      	bhi.n	8003d9c <HAL_TIM_ConfigClockSource+0x16c>
 8003cc4:	2b20      	cmp	r3, #32
 8003cc6:	d060      	beq.n	8003d8a <HAL_TIM_ConfigClockSource+0x15a>
 8003cc8:	2b20      	cmp	r3, #32
 8003cca:	d867      	bhi.n	8003d9c <HAL_TIM_ConfigClockSource+0x16c>
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d05c      	beq.n	8003d8a <HAL_TIM_ConfigClockSource+0x15a>
 8003cd0:	2b10      	cmp	r3, #16
 8003cd2:	d05a      	beq.n	8003d8a <HAL_TIM_ConfigClockSource+0x15a>
 8003cd4:	e062      	b.n	8003d9c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6818      	ldr	r0, [r3, #0]
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	6899      	ldr	r1, [r3, #8]
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685a      	ldr	r2, [r3, #4]
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	f000 faf1 	bl	80042cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003cf8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68ba      	ldr	r2, [r7, #8]
 8003d00:	609a      	str	r2, [r3, #8]
      break;
 8003d02:	e04f      	b.n	8003da4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6818      	ldr	r0, [r3, #0]
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	6899      	ldr	r1, [r3, #8]
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	f000 fada 	bl	80042cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	689a      	ldr	r2, [r3, #8]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d26:	609a      	str	r2, [r3, #8]
      break;
 8003d28:	e03c      	b.n	8003da4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6818      	ldr	r0, [r3, #0]
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	6859      	ldr	r1, [r3, #4]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	461a      	mov	r2, r3
 8003d38:	f000 fa4e 	bl	80041d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2150      	movs	r1, #80	; 0x50
 8003d42:	4618      	mov	r0, r3
 8003d44:	f000 faa7 	bl	8004296 <TIM_ITRx_SetConfig>
      break;
 8003d48:	e02c      	b.n	8003da4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6818      	ldr	r0, [r3, #0]
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	6859      	ldr	r1, [r3, #4]
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	461a      	mov	r2, r3
 8003d58:	f000 fa6d 	bl	8004236 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2160      	movs	r1, #96	; 0x60
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 fa97 	bl	8004296 <TIM_ITRx_SetConfig>
      break;
 8003d68:	e01c      	b.n	8003da4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6818      	ldr	r0, [r3, #0]
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	6859      	ldr	r1, [r3, #4]
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	461a      	mov	r2, r3
 8003d78:	f000 fa2e 	bl	80041d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2140      	movs	r1, #64	; 0x40
 8003d82:	4618      	mov	r0, r3
 8003d84:	f000 fa87 	bl	8004296 <TIM_ITRx_SetConfig>
      break;
 8003d88:	e00c      	b.n	8003da4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4619      	mov	r1, r3
 8003d94:	4610      	mov	r0, r2
 8003d96:	f000 fa7e 	bl	8004296 <TIM_ITRx_SetConfig>
      break;
 8003d9a:	e003      	b.n	8003da4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	73fb      	strb	r3, [r7, #15]
      break;
 8003da0:	e000      	b.n	8003da4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003da2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3710      	adds	r7, #16
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
	...

08003dc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a34      	ldr	r2, [pc, #208]	; (8003ea4 <TIM_Base_SetConfig+0xe4>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d00f      	beq.n	8003df8 <TIM_Base_SetConfig+0x38>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dde:	d00b      	beq.n	8003df8 <TIM_Base_SetConfig+0x38>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a31      	ldr	r2, [pc, #196]	; (8003ea8 <TIM_Base_SetConfig+0xe8>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d007      	beq.n	8003df8 <TIM_Base_SetConfig+0x38>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a30      	ldr	r2, [pc, #192]	; (8003eac <TIM_Base_SetConfig+0xec>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d003      	beq.n	8003df8 <TIM_Base_SetConfig+0x38>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a2f      	ldr	r2, [pc, #188]	; (8003eb0 <TIM_Base_SetConfig+0xf0>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d108      	bne.n	8003e0a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a25      	ldr	r2, [pc, #148]	; (8003ea4 <TIM_Base_SetConfig+0xe4>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d01b      	beq.n	8003e4a <TIM_Base_SetConfig+0x8a>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e18:	d017      	beq.n	8003e4a <TIM_Base_SetConfig+0x8a>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a22      	ldr	r2, [pc, #136]	; (8003ea8 <TIM_Base_SetConfig+0xe8>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d013      	beq.n	8003e4a <TIM_Base_SetConfig+0x8a>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a21      	ldr	r2, [pc, #132]	; (8003eac <TIM_Base_SetConfig+0xec>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d00f      	beq.n	8003e4a <TIM_Base_SetConfig+0x8a>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a20      	ldr	r2, [pc, #128]	; (8003eb0 <TIM_Base_SetConfig+0xf0>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d00b      	beq.n	8003e4a <TIM_Base_SetConfig+0x8a>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a1f      	ldr	r2, [pc, #124]	; (8003eb4 <TIM_Base_SetConfig+0xf4>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d007      	beq.n	8003e4a <TIM_Base_SetConfig+0x8a>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a1e      	ldr	r2, [pc, #120]	; (8003eb8 <TIM_Base_SetConfig+0xf8>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d003      	beq.n	8003e4a <TIM_Base_SetConfig+0x8a>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a1d      	ldr	r2, [pc, #116]	; (8003ebc <TIM_Base_SetConfig+0xfc>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d108      	bne.n	8003e5c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	689a      	ldr	r2, [r3, #8]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a08      	ldr	r2, [pc, #32]	; (8003ea4 <TIM_Base_SetConfig+0xe4>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d103      	bne.n	8003e90 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	691a      	ldr	r2, [r3, #16]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	615a      	str	r2, [r3, #20]
}
 8003e96:	bf00      	nop
 8003e98:	3714      	adds	r7, #20
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	40010000 	.word	0x40010000
 8003ea8:	40000400 	.word	0x40000400
 8003eac:	40000800 	.word	0x40000800
 8003eb0:	40000c00 	.word	0x40000c00
 8003eb4:	40014000 	.word	0x40014000
 8003eb8:	40014400 	.word	0x40014400
 8003ebc:	40014800 	.word	0x40014800

08003ec0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b087      	sub	sp, #28
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
 8003ece:	f023 0201 	bic.w	r2, r3, #1
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a1b      	ldr	r3, [r3, #32]
 8003eda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f023 0303 	bic.w	r3, r3, #3
 8003ef6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	f023 0302 	bic.w	r3, r3, #2
 8003f08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a1c      	ldr	r2, [pc, #112]	; (8003f88 <TIM_OC1_SetConfig+0xc8>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d10c      	bne.n	8003f36 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	f023 0308 	bic.w	r3, r3, #8
 8003f22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	697a      	ldr	r2, [r7, #20]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	f023 0304 	bic.w	r3, r3, #4
 8003f34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a13      	ldr	r2, [pc, #76]	; (8003f88 <TIM_OC1_SetConfig+0xc8>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d111      	bne.n	8003f62 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	621a      	str	r2, [r3, #32]
}
 8003f7c:	bf00      	nop
 8003f7e:	371c      	adds	r7, #28
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr
 8003f88:	40010000 	.word	0x40010000

08003f8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b087      	sub	sp, #28
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	f023 0210 	bic.w	r2, r3, #16
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	021b      	lsls	r3, r3, #8
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	f023 0320 	bic.w	r3, r3, #32
 8003fd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	011b      	lsls	r3, r3, #4
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a1e      	ldr	r2, [pc, #120]	; (8004060 <TIM_OC2_SetConfig+0xd4>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d10d      	bne.n	8004008 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ff2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	011b      	lsls	r3, r3, #4
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004006:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a15      	ldr	r2, [pc, #84]	; (8004060 <TIM_OC2_SetConfig+0xd4>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d113      	bne.n	8004038 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004016:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800401e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	4313      	orrs	r3, r2
 800402a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	4313      	orrs	r3, r2
 8004036:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685a      	ldr	r2, [r3, #4]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	621a      	str	r2, [r3, #32]
}
 8004052:	bf00      	nop
 8004054:	371c      	adds	r7, #28
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	40010000 	.word	0x40010000

08004064 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004064:	b480      	push	{r7}
 8004066:	b087      	sub	sp, #28
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f023 0303 	bic.w	r3, r3, #3
 800409a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	021b      	lsls	r3, r3, #8
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a1d      	ldr	r2, [pc, #116]	; (8004134 <TIM_OC3_SetConfig+0xd0>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d10d      	bne.n	80040de <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	021b      	lsls	r3, r3, #8
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a14      	ldr	r2, [pc, #80]	; (8004134 <TIM_OC3_SetConfig+0xd0>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d113      	bne.n	800410e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80040ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	011b      	lsls	r3, r3, #4
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	4313      	orrs	r3, r2
 8004100:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	011b      	lsls	r3, r3, #4
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	4313      	orrs	r3, r2
 800410c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	685a      	ldr	r2, [r3, #4]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	697a      	ldr	r2, [r7, #20]
 8004126:	621a      	str	r2, [r3, #32]
}
 8004128:	bf00      	nop
 800412a:	371c      	adds	r7, #28
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr
 8004134:	40010000 	.word	0x40010000

08004138 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004138:	b480      	push	{r7}
 800413a:	b087      	sub	sp, #28
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800416e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	021b      	lsls	r3, r3, #8
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	4313      	orrs	r3, r2
 800417a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004182:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	031b      	lsls	r3, r3, #12
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	4313      	orrs	r3, r2
 800418e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a10      	ldr	r2, [pc, #64]	; (80041d4 <TIM_OC4_SetConfig+0x9c>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d109      	bne.n	80041ac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800419e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	019b      	lsls	r3, r3, #6
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	621a      	str	r2, [r3, #32]
}
 80041c6:	bf00      	nop
 80041c8:	371c      	adds	r7, #28
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	40010000 	.word	0x40010000

080041d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041d8:	b480      	push	{r7}
 80041da:	b087      	sub	sp, #28
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	f023 0201 	bic.w	r2, r3, #1
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004202:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	011b      	lsls	r3, r3, #4
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	4313      	orrs	r3, r2
 800420c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	f023 030a 	bic.w	r3, r3, #10
 8004214:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	4313      	orrs	r3, r2
 800421c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	621a      	str	r2, [r3, #32]
}
 800422a:	bf00      	nop
 800422c:	371c      	adds	r7, #28
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr

08004236 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004236:	b480      	push	{r7}
 8004238:	b087      	sub	sp, #28
 800423a:	af00      	add	r7, sp, #0
 800423c:	60f8      	str	r0, [r7, #12]
 800423e:	60b9      	str	r1, [r7, #8]
 8004240:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	f023 0210 	bic.w	r2, r3, #16
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6a1b      	ldr	r3, [r3, #32]
 8004258:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004260:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	031b      	lsls	r3, r3, #12
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	4313      	orrs	r3, r2
 800426a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004272:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	011b      	lsls	r3, r3, #4
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	4313      	orrs	r3, r2
 800427c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	621a      	str	r2, [r3, #32]
}
 800428a:	bf00      	nop
 800428c:	371c      	adds	r7, #28
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr

08004296 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004296:	b480      	push	{r7}
 8004298:	b085      	sub	sp, #20
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
 800429e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042ae:	683a      	ldr	r2, [r7, #0]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	f043 0307 	orr.w	r3, r3, #7
 80042b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	609a      	str	r2, [r3, #8]
}
 80042c0:	bf00      	nop
 80042c2:	3714      	adds	r7, #20
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b087      	sub	sp, #28
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
 80042d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	021a      	lsls	r2, r3, #8
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	431a      	orrs	r2, r3
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	609a      	str	r2, [r3, #8]
}
 8004300:	bf00      	nop
 8004302:	371c      	adds	r7, #28
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800430c:	b480      	push	{r7}
 800430e:	b085      	sub	sp, #20
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800431c:	2b01      	cmp	r3, #1
 800431e:	d101      	bne.n	8004324 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004320:	2302      	movs	r3, #2
 8004322:	e050      	b.n	80043c6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2202      	movs	r2, #2
 8004330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800434a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	4313      	orrs	r3, r2
 8004354:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a1c      	ldr	r2, [pc, #112]	; (80043d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d018      	beq.n	800439a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004370:	d013      	beq.n	800439a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a18      	ldr	r2, [pc, #96]	; (80043d8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d00e      	beq.n	800439a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a16      	ldr	r2, [pc, #88]	; (80043dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d009      	beq.n	800439a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a15      	ldr	r2, [pc, #84]	; (80043e0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d004      	beq.n	800439a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a13      	ldr	r2, [pc, #76]	; (80043e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d10c      	bne.n	80043b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68ba      	ldr	r2, [r7, #8]
 80043b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3714      	adds	r7, #20
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	40010000 	.word	0x40010000
 80043d8:	40000400 	.word	0x40000400
 80043dc:	40000800 	.word	0x40000800
 80043e0:	40000c00 	.word	0x40000c00
 80043e4:	40014000 	.word	0x40014000

080043e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d101      	bne.n	80043fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e03f      	b.n	800447a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	d106      	bne.n	8004414 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7fd fd00 	bl	8001e14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2224      	movs	r2, #36	; 0x24
 8004418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68da      	ldr	r2, [r3, #12]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800442a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 fddf 	bl	8004ff0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	691a      	ldr	r2, [r3, #16]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004440:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	695a      	ldr	r2, [r3, #20]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004450:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68da      	ldr	r2, [r3, #12]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004460:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2220      	movs	r2, #32
 800446c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2220      	movs	r2, #32
 8004474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3708      	adds	r7, #8
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	b08a      	sub	sp, #40	; 0x28
 8004486:	af02      	add	r7, sp, #8
 8004488:	60f8      	str	r0, [r7, #12]
 800448a:	60b9      	str	r1, [r7, #8]
 800448c:	603b      	str	r3, [r7, #0]
 800448e:	4613      	mov	r3, r2
 8004490:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004492:	2300      	movs	r3, #0
 8004494:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b20      	cmp	r3, #32
 80044a0:	d17c      	bne.n	800459c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d002      	beq.n	80044ae <HAL_UART_Transmit+0x2c>
 80044a8:	88fb      	ldrh	r3, [r7, #6]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e075      	b.n	800459e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d101      	bne.n	80044c0 <HAL_UART_Transmit+0x3e>
 80044bc:	2302      	movs	r3, #2
 80044be:	e06e      	b.n	800459e <HAL_UART_Transmit+0x11c>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2221      	movs	r2, #33	; 0x21
 80044d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044d6:	f7fd fe2d 	bl	8002134 <HAL_GetTick>
 80044da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	88fa      	ldrh	r2, [r7, #6]
 80044e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	88fa      	ldrh	r2, [r7, #6]
 80044e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044f0:	d108      	bne.n	8004504 <HAL_UART_Transmit+0x82>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d104      	bne.n	8004504 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80044fa:	2300      	movs	r3, #0
 80044fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	61bb      	str	r3, [r7, #24]
 8004502:	e003      	b.n	800450c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004508:	2300      	movs	r3, #0
 800450a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004514:	e02a      	b.n	800456c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	9300      	str	r3, [sp, #0]
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	2200      	movs	r2, #0
 800451e:	2180      	movs	r1, #128	; 0x80
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f000 fb1f 	bl	8004b64 <UART_WaitOnFlagUntilTimeout>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d001      	beq.n	8004530 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e036      	b.n	800459e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d10b      	bne.n	800454e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	881b      	ldrh	r3, [r3, #0]
 800453a:	461a      	mov	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004544:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	3302      	adds	r3, #2
 800454a:	61bb      	str	r3, [r7, #24]
 800454c:	e007      	b.n	800455e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	781a      	ldrb	r2, [r3, #0]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	3301      	adds	r3, #1
 800455c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004562:	b29b      	uxth	r3, r3
 8004564:	3b01      	subs	r3, #1
 8004566:	b29a      	uxth	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004570:	b29b      	uxth	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1cf      	bne.n	8004516 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	9300      	str	r3, [sp, #0]
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	2200      	movs	r2, #0
 800457e:	2140      	movs	r1, #64	; 0x40
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	f000 faef 	bl	8004b64 <UART_WaitOnFlagUntilTimeout>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d001      	beq.n	8004590 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e006      	b.n	800459e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2220      	movs	r2, #32
 8004594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004598:	2300      	movs	r3, #0
 800459a:	e000      	b.n	800459e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800459c:	2302      	movs	r3, #2
  }
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3720      	adds	r7, #32
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}

080045a6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b084      	sub	sp, #16
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	60f8      	str	r0, [r7, #12]
 80045ae:	60b9      	str	r1, [r7, #8]
 80045b0:	4613      	mov	r3, r2
 80045b2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	2b20      	cmp	r3, #32
 80045be:	d11d      	bne.n	80045fc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d002      	beq.n	80045cc <HAL_UART_Receive_IT+0x26>
 80045c6:	88fb      	ldrh	r3, [r7, #6]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d101      	bne.n	80045d0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e016      	b.n	80045fe <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d101      	bne.n	80045de <HAL_UART_Receive_IT+0x38>
 80045da:	2302      	movs	r3, #2
 80045dc:	e00f      	b.n	80045fe <HAL_UART_Receive_IT+0x58>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80045ec:	88fb      	ldrh	r3, [r7, #6]
 80045ee:	461a      	mov	r2, r3
 80045f0:	68b9      	ldr	r1, [r7, #8]
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f000 fb24 	bl	8004c40 <UART_Start_Receive_IT>
 80045f8:	4603      	mov	r3, r0
 80045fa:	e000      	b.n	80045fe <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80045fc:	2302      	movs	r3, #2
  }
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3710      	adds	r7, #16
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
	...

08004608 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b0ba      	sub	sp, #232	; 0xe8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800462e:	2300      	movs	r3, #0
 8004630:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004634:	2300      	movs	r3, #0
 8004636:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800463a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800463e:	f003 030f 	and.w	r3, r3, #15
 8004642:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004646:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800464a:	2b00      	cmp	r3, #0
 800464c:	d10f      	bne.n	800466e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800464e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004652:	f003 0320 	and.w	r3, r3, #32
 8004656:	2b00      	cmp	r3, #0
 8004658:	d009      	beq.n	800466e <HAL_UART_IRQHandler+0x66>
 800465a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800465e:	f003 0320 	and.w	r3, r3, #32
 8004662:	2b00      	cmp	r3, #0
 8004664:	d003      	beq.n	800466e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 fc07 	bl	8004e7a <UART_Receive_IT>
      return;
 800466c:	e256      	b.n	8004b1c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800466e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004672:	2b00      	cmp	r3, #0
 8004674:	f000 80de 	beq.w	8004834 <HAL_UART_IRQHandler+0x22c>
 8004678:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800467c:	f003 0301 	and.w	r3, r3, #1
 8004680:	2b00      	cmp	r3, #0
 8004682:	d106      	bne.n	8004692 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004688:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800468c:	2b00      	cmp	r3, #0
 800468e:	f000 80d1 	beq.w	8004834 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00b      	beq.n	80046b6 <HAL_UART_IRQHandler+0xae>
 800469e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d005      	beq.n	80046b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ae:	f043 0201 	orr.w	r2, r3, #1
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ba:	f003 0304 	and.w	r3, r3, #4
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00b      	beq.n	80046da <HAL_UART_IRQHandler+0xd2>
 80046c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d005      	beq.n	80046da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d2:	f043 0202 	orr.w	r2, r3, #2
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00b      	beq.n	80046fe <HAL_UART_IRQHandler+0xf6>
 80046e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d005      	beq.n	80046fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f6:	f043 0204 	orr.w	r2, r3, #4
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80046fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004702:	f003 0308 	and.w	r3, r3, #8
 8004706:	2b00      	cmp	r3, #0
 8004708:	d011      	beq.n	800472e <HAL_UART_IRQHandler+0x126>
 800470a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800470e:	f003 0320 	and.w	r3, r3, #32
 8004712:	2b00      	cmp	r3, #0
 8004714:	d105      	bne.n	8004722 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004716:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b00      	cmp	r3, #0
 8004720:	d005      	beq.n	800472e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004726:	f043 0208 	orr.w	r2, r3, #8
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004732:	2b00      	cmp	r3, #0
 8004734:	f000 81ed 	beq.w	8004b12 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800473c:	f003 0320 	and.w	r3, r3, #32
 8004740:	2b00      	cmp	r3, #0
 8004742:	d008      	beq.n	8004756 <HAL_UART_IRQHandler+0x14e>
 8004744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004748:	f003 0320 	and.w	r3, r3, #32
 800474c:	2b00      	cmp	r3, #0
 800474e:	d002      	beq.n	8004756 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f000 fb92 	bl	8004e7a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	695b      	ldr	r3, [r3, #20]
 800475c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004760:	2b40      	cmp	r3, #64	; 0x40
 8004762:	bf0c      	ite	eq
 8004764:	2301      	moveq	r3, #1
 8004766:	2300      	movne	r3, #0
 8004768:	b2db      	uxtb	r3, r3
 800476a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004772:	f003 0308 	and.w	r3, r3, #8
 8004776:	2b00      	cmp	r3, #0
 8004778:	d103      	bne.n	8004782 <HAL_UART_IRQHandler+0x17a>
 800477a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800477e:	2b00      	cmp	r3, #0
 8004780:	d04f      	beq.n	8004822 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 fa9a 	bl	8004cbc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004792:	2b40      	cmp	r3, #64	; 0x40
 8004794:	d141      	bne.n	800481a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	3314      	adds	r3, #20
 800479c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80047a4:	e853 3f00 	ldrex	r3, [r3]
 80047a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80047ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80047b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	3314      	adds	r3, #20
 80047be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80047c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80047c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80047ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80047d2:	e841 2300 	strex	r3, r2, [r1]
 80047d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80047da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1d9      	bne.n	8004796 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d013      	beq.n	8004812 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ee:	4a7d      	ldr	r2, [pc, #500]	; (80049e4 <HAL_UART_IRQHandler+0x3dc>)
 80047f0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7fe fa3f 	bl	8002c7a <HAL_DMA_Abort_IT>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d016      	beq.n	8004830 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800480c:	4610      	mov	r0, r2
 800480e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004810:	e00e      	b.n	8004830 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 f990 	bl	8004b38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004818:	e00a      	b.n	8004830 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 f98c 	bl	8004b38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004820:	e006      	b.n	8004830 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f988 	bl	8004b38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800482e:	e170      	b.n	8004b12 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004830:	bf00      	nop
    return;
 8004832:	e16e      	b.n	8004b12 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004838:	2b01      	cmp	r3, #1
 800483a:	f040 814a 	bne.w	8004ad2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800483e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004842:	f003 0310 	and.w	r3, r3, #16
 8004846:	2b00      	cmp	r3, #0
 8004848:	f000 8143 	beq.w	8004ad2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800484c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004850:	f003 0310 	and.w	r3, r3, #16
 8004854:	2b00      	cmp	r3, #0
 8004856:	f000 813c 	beq.w	8004ad2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800485a:	2300      	movs	r3, #0
 800485c:	60bb      	str	r3, [r7, #8]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	60bb      	str	r3, [r7, #8]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	60bb      	str	r3, [r7, #8]
 800486e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800487a:	2b40      	cmp	r3, #64	; 0x40
 800487c:	f040 80b4 	bne.w	80049e8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800488c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004890:	2b00      	cmp	r3, #0
 8004892:	f000 8140 	beq.w	8004b16 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800489a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800489e:	429a      	cmp	r2, r3
 80048a0:	f080 8139 	bcs.w	8004b16 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80048aa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b0:	69db      	ldr	r3, [r3, #28]
 80048b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048b6:	f000 8088 	beq.w	80049ca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	330c      	adds	r3, #12
 80048c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80048c8:	e853 3f00 	ldrex	r3, [r3]
 80048cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80048d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80048d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	330c      	adds	r3, #12
 80048e2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80048e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80048ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80048f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80048f6:	e841 2300 	strex	r3, r2, [r1]
 80048fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80048fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1d9      	bne.n	80048ba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	3314      	adds	r3, #20
 800490c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004910:	e853 3f00 	ldrex	r3, [r3]
 8004914:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004916:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004918:	f023 0301 	bic.w	r3, r3, #1
 800491c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	3314      	adds	r3, #20
 8004926:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800492a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800492e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004930:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004932:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004936:	e841 2300 	strex	r3, r2, [r1]
 800493a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800493c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1e1      	bne.n	8004906 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	3314      	adds	r3, #20
 8004948:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800494c:	e853 3f00 	ldrex	r3, [r3]
 8004950:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004952:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004954:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004958:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	3314      	adds	r3, #20
 8004962:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004966:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004968:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800496c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800496e:	e841 2300 	strex	r3, r2, [r1]
 8004972:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004974:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1e3      	bne.n	8004942 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2220      	movs	r2, #32
 800497e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	330c      	adds	r3, #12
 800498e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004990:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004992:	e853 3f00 	ldrex	r3, [r3]
 8004996:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004998:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800499a:	f023 0310 	bic.w	r3, r3, #16
 800499e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	330c      	adds	r3, #12
 80049a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80049ac:	65ba      	str	r2, [r7, #88]	; 0x58
 80049ae:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80049b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80049b4:	e841 2300 	strex	r3, r2, [r1]
 80049b8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80049ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1e3      	bne.n	8004988 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7fe f8e8 	bl	8002b9a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	4619      	mov	r1, r3
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 f8b6 	bl	8004b4c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80049e0:	e099      	b.n	8004b16 <HAL_UART_IRQHandler+0x50e>
 80049e2:	bf00      	nop
 80049e4:	08004d83 	.word	0x08004d83
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	f000 808b 	beq.w	8004b1a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004a04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f000 8086 	beq.w	8004b1a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	330c      	adds	r3, #12
 8004a14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a18:	e853 3f00 	ldrex	r3, [r3]
 8004a1c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	330c      	adds	r3, #12
 8004a2e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004a32:	647a      	str	r2, [r7, #68]	; 0x44
 8004a34:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a36:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a3a:	e841 2300 	strex	r3, r2, [r1]
 8004a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1e3      	bne.n	8004a0e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	3314      	adds	r3, #20
 8004a4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a50:	e853 3f00 	ldrex	r3, [r3]
 8004a54:	623b      	str	r3, [r7, #32]
   return(result);
 8004a56:	6a3b      	ldr	r3, [r7, #32]
 8004a58:	f023 0301 	bic.w	r3, r3, #1
 8004a5c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	3314      	adds	r3, #20
 8004a66:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004a6a:	633a      	str	r2, [r7, #48]	; 0x30
 8004a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a72:	e841 2300 	strex	r3, r2, [r1]
 8004a76:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1e3      	bne.n	8004a46 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2220      	movs	r2, #32
 8004a82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	330c      	adds	r3, #12
 8004a92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	e853 3f00 	ldrex	r3, [r3]
 8004a9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f023 0310 	bic.w	r3, r3, #16
 8004aa2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	330c      	adds	r3, #12
 8004aac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004ab0:	61fa      	str	r2, [r7, #28]
 8004ab2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab4:	69b9      	ldr	r1, [r7, #24]
 8004ab6:	69fa      	ldr	r2, [r7, #28]
 8004ab8:	e841 2300 	strex	r3, r2, [r1]
 8004abc:	617b      	str	r3, [r7, #20]
   return(result);
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1e3      	bne.n	8004a8c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ac4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ac8:	4619      	mov	r1, r3
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 f83e 	bl	8004b4c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ad0:	e023      	b.n	8004b1a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d009      	beq.n	8004af2 <HAL_UART_IRQHandler+0x4ea>
 8004ade:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d003      	beq.n	8004af2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 f95d 	bl	8004daa <UART_Transmit_IT>
    return;
 8004af0:	e014      	b.n	8004b1c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00e      	beq.n	8004b1c <HAL_UART_IRQHandler+0x514>
 8004afe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d008      	beq.n	8004b1c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 f99d 	bl	8004e4a <UART_EndTransmit_IT>
    return;
 8004b10:	e004      	b.n	8004b1c <HAL_UART_IRQHandler+0x514>
    return;
 8004b12:	bf00      	nop
 8004b14:	e002      	b.n	8004b1c <HAL_UART_IRQHandler+0x514>
      return;
 8004b16:	bf00      	nop
 8004b18:	e000      	b.n	8004b1c <HAL_UART_IRQHandler+0x514>
      return;
 8004b1a:	bf00      	nop
  }
}
 8004b1c:	37e8      	adds	r7, #232	; 0xe8
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop

08004b24 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004b2c:	bf00      	nop
 8004b2e:	370c      	adds	r7, #12
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004b40:	bf00      	nop
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	460b      	mov	r3, r1
 8004b56:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b090      	sub	sp, #64	; 0x40
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	603b      	str	r3, [r7, #0]
 8004b70:	4613      	mov	r3, r2
 8004b72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b74:	e050      	b.n	8004c18 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b7c:	d04c      	beq.n	8004c18 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004b7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d007      	beq.n	8004b94 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b84:	f7fd fad6 	bl	8002134 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d241      	bcs.n	8004c18 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	330c      	adds	r3, #12
 8004b9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9e:	e853 3f00 	ldrex	r3, [r3]
 8004ba2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004baa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	330c      	adds	r3, #12
 8004bb2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004bb4:	637a      	str	r2, [r7, #52]	; 0x34
 8004bb6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004bba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bbc:	e841 2300 	strex	r3, r2, [r1]
 8004bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d1e5      	bne.n	8004b94 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	3314      	adds	r3, #20
 8004bce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	e853 3f00 	ldrex	r3, [r3]
 8004bd6:	613b      	str	r3, [r7, #16]
   return(result);
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	f023 0301 	bic.w	r3, r3, #1
 8004bde:	63bb      	str	r3, [r7, #56]	; 0x38
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	3314      	adds	r3, #20
 8004be6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004be8:	623a      	str	r2, [r7, #32]
 8004bea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bec:	69f9      	ldr	r1, [r7, #28]
 8004bee:	6a3a      	ldr	r2, [r7, #32]
 8004bf0:	e841 2300 	strex	r3, r2, [r1]
 8004bf4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1e5      	bne.n	8004bc8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2220      	movs	r2, #32
 8004c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2220      	movs	r2, #32
 8004c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e00f      	b.n	8004c38 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	4013      	ands	r3, r2
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	bf0c      	ite	eq
 8004c28:	2301      	moveq	r3, #1
 8004c2a:	2300      	movne	r3, #0
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	461a      	mov	r2, r3
 8004c30:	79fb      	ldrb	r3, [r7, #7]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d09f      	beq.n	8004b76 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3740      	adds	r7, #64	; 0x40
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	68ba      	ldr	r2, [r7, #8]
 8004c52:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	88fa      	ldrh	r2, [r7, #6]
 8004c58:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	88fa      	ldrh	r2, [r7, #6]
 8004c5e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2222      	movs	r2, #34	; 0x22
 8004c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d007      	beq.n	8004c8e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68da      	ldr	r2, [r3, #12]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c8c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	695a      	ldr	r2, [r3, #20]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f042 0201 	orr.w	r2, r2, #1
 8004c9c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68da      	ldr	r2, [r3, #12]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f042 0220 	orr.w	r2, r2, #32
 8004cac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3714      	adds	r7, #20
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b095      	sub	sp, #84	; 0x54
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	330c      	adds	r3, #12
 8004cca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cce:	e853 3f00 	ldrex	r3, [r3]
 8004cd2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	330c      	adds	r3, #12
 8004ce2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ce4:	643a      	str	r2, [r7, #64]	; 0x40
 8004ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004cea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004cec:	e841 2300 	strex	r3, r2, [r1]
 8004cf0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d1e5      	bne.n	8004cc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	3314      	adds	r3, #20
 8004cfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d00:	6a3b      	ldr	r3, [r7, #32]
 8004d02:	e853 3f00 	ldrex	r3, [r3]
 8004d06:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	f023 0301 	bic.w	r3, r3, #1
 8004d0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	3314      	adds	r3, #20
 8004d16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d18:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d20:	e841 2300 	strex	r3, r2, [r1]
 8004d24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1e5      	bne.n	8004cf8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d119      	bne.n	8004d68 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	330c      	adds	r3, #12
 8004d3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	e853 3f00 	ldrex	r3, [r3]
 8004d42:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	f023 0310 	bic.w	r3, r3, #16
 8004d4a:	647b      	str	r3, [r7, #68]	; 0x44
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	330c      	adds	r3, #12
 8004d52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d54:	61ba      	str	r2, [r7, #24]
 8004d56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d58:	6979      	ldr	r1, [r7, #20]
 8004d5a:	69ba      	ldr	r2, [r7, #24]
 8004d5c:	e841 2300 	strex	r3, r2, [r1]
 8004d60:	613b      	str	r3, [r7, #16]
   return(result);
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d1e5      	bne.n	8004d34 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2220      	movs	r2, #32
 8004d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004d76:	bf00      	nop
 8004d78:	3754      	adds	r7, #84	; 0x54
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b084      	sub	sp, #16
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d9c:	68f8      	ldr	r0, [r7, #12]
 8004d9e:	f7ff fecb 	bl	8004b38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004da2:	bf00      	nop
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b085      	sub	sp, #20
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b21      	cmp	r3, #33	; 0x21
 8004dbc:	d13e      	bne.n	8004e3c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dc6:	d114      	bne.n	8004df2 <UART_Transmit_IT+0x48>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d110      	bne.n	8004df2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a1b      	ldr	r3, [r3, #32]
 8004dd4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	881b      	ldrh	r3, [r3, #0]
 8004dda:	461a      	mov	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004de4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a1b      	ldr	r3, [r3, #32]
 8004dea:	1c9a      	adds	r2, r3, #2
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	621a      	str	r2, [r3, #32]
 8004df0:	e008      	b.n	8004e04 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	1c59      	adds	r1, r3, #1
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	6211      	str	r1, [r2, #32]
 8004dfc:	781a      	ldrb	r2, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	4619      	mov	r1, r3
 8004e12:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10f      	bne.n	8004e38 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68da      	ldr	r2, [r3, #12]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e26:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68da      	ldr	r2, [r3, #12]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e36:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	e000      	b.n	8004e3e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e3c:	2302      	movs	r3, #2
  }
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3714      	adds	r7, #20
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr

08004e4a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e4a:	b580      	push	{r7, lr}
 8004e4c:	b082      	sub	sp, #8
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68da      	ldr	r2, [r3, #12]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e60:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2220      	movs	r2, #32
 8004e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f7ff fe5a 	bl	8004b24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3708      	adds	r7, #8
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b08c      	sub	sp, #48	; 0x30
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	2b22      	cmp	r3, #34	; 0x22
 8004e8c:	f040 80ab 	bne.w	8004fe6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e98:	d117      	bne.n	8004eca <UART_Receive_IT+0x50>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d113      	bne.n	8004eca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eaa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ebc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec2:	1c9a      	adds	r2, r3, #2
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	629a      	str	r2, [r3, #40]	; 0x28
 8004ec8:	e026      	b.n	8004f18 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ece:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004edc:	d007      	beq.n	8004eee <UART_Receive_IT+0x74>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d10a      	bne.n	8004efc <UART_Receive_IT+0x82>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d106      	bne.n	8004efc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	b2da      	uxtb	r2, r3
 8004ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef8:	701a      	strb	r2, [r3, #0]
 8004efa:	e008      	b.n	8004f0e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f08:	b2da      	uxtb	r2, r3
 8004f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f0c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f12:	1c5a      	adds	r2, r3, #1
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	4619      	mov	r1, r3
 8004f26:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d15a      	bne.n	8004fe2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68da      	ldr	r2, [r3, #12]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f022 0220 	bic.w	r2, r2, #32
 8004f3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68da      	ldr	r2, [r3, #12]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	695a      	ldr	r2, [r3, #20]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f022 0201 	bic.w	r2, r2, #1
 8004f5a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2220      	movs	r2, #32
 8004f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d135      	bne.n	8004fd8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	330c      	adds	r3, #12
 8004f78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	e853 3f00 	ldrex	r3, [r3]
 8004f80:	613b      	str	r3, [r7, #16]
   return(result);
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	f023 0310 	bic.w	r3, r3, #16
 8004f88:	627b      	str	r3, [r7, #36]	; 0x24
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	330c      	adds	r3, #12
 8004f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f92:	623a      	str	r2, [r7, #32]
 8004f94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f96:	69f9      	ldr	r1, [r7, #28]
 8004f98:	6a3a      	ldr	r2, [r7, #32]
 8004f9a:	e841 2300 	strex	r3, r2, [r1]
 8004f9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1e5      	bne.n	8004f72 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0310 	and.w	r3, r3, #16
 8004fb0:	2b10      	cmp	r3, #16
 8004fb2:	d10a      	bne.n	8004fca <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	60fb      	str	r3, [r7, #12]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	60fb      	str	r3, [r7, #12]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	60fb      	str	r3, [r7, #12]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004fce:	4619      	mov	r1, r3
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f7ff fdbb 	bl	8004b4c <HAL_UARTEx_RxEventCallback>
 8004fd6:	e002      	b.n	8004fde <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f7fc f979 	bl	80012d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	e002      	b.n	8004fe8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	e000      	b.n	8004fe8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004fe6:	2302      	movs	r3, #2
  }
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3730      	adds	r7, #48	; 0x30
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ff4:	b0c0      	sub	sp, #256	; 0x100
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800500c:	68d9      	ldr	r1, [r3, #12]
 800500e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	ea40 0301 	orr.w	r3, r0, r1
 8005018:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800501a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800501e:	689a      	ldr	r2, [r3, #8]
 8005020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	431a      	orrs	r2, r3
 8005028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	431a      	orrs	r2, r3
 8005030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005034:	69db      	ldr	r3, [r3, #28]
 8005036:	4313      	orrs	r3, r2
 8005038:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800503c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005048:	f021 010c 	bic.w	r1, r1, #12
 800504c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005056:	430b      	orrs	r3, r1
 8005058:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800505a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800506a:	6999      	ldr	r1, [r3, #24]
 800506c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	ea40 0301 	orr.w	r3, r0, r1
 8005076:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	4b8f      	ldr	r3, [pc, #572]	; (80052bc <UART_SetConfig+0x2cc>)
 8005080:	429a      	cmp	r2, r3
 8005082:	d005      	beq.n	8005090 <UART_SetConfig+0xa0>
 8005084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	4b8d      	ldr	r3, [pc, #564]	; (80052c0 <UART_SetConfig+0x2d0>)
 800508c:	429a      	cmp	r2, r3
 800508e:	d104      	bne.n	800509a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005090:	f7fe fc50 	bl	8003934 <HAL_RCC_GetPCLK2Freq>
 8005094:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005098:	e003      	b.n	80050a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800509a:	f7fe fc37 	bl	800390c <HAL_RCC_GetPCLK1Freq>
 800509e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a6:	69db      	ldr	r3, [r3, #28]
 80050a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050ac:	f040 810c 	bne.w	80052c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050b4:	2200      	movs	r2, #0
 80050b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80050ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80050be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80050c2:	4622      	mov	r2, r4
 80050c4:	462b      	mov	r3, r5
 80050c6:	1891      	adds	r1, r2, r2
 80050c8:	65b9      	str	r1, [r7, #88]	; 0x58
 80050ca:	415b      	adcs	r3, r3
 80050cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80050d2:	4621      	mov	r1, r4
 80050d4:	eb12 0801 	adds.w	r8, r2, r1
 80050d8:	4629      	mov	r1, r5
 80050da:	eb43 0901 	adc.w	r9, r3, r1
 80050de:	f04f 0200 	mov.w	r2, #0
 80050e2:	f04f 0300 	mov.w	r3, #0
 80050e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050f2:	4690      	mov	r8, r2
 80050f4:	4699      	mov	r9, r3
 80050f6:	4623      	mov	r3, r4
 80050f8:	eb18 0303 	adds.w	r3, r8, r3
 80050fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005100:	462b      	mov	r3, r5
 8005102:	eb49 0303 	adc.w	r3, r9, r3
 8005106:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800510a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005116:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800511a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800511e:	460b      	mov	r3, r1
 8005120:	18db      	adds	r3, r3, r3
 8005122:	653b      	str	r3, [r7, #80]	; 0x50
 8005124:	4613      	mov	r3, r2
 8005126:	eb42 0303 	adc.w	r3, r2, r3
 800512a:	657b      	str	r3, [r7, #84]	; 0x54
 800512c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005130:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005134:	f7fb fca2 	bl	8000a7c <__aeabi_uldivmod>
 8005138:	4602      	mov	r2, r0
 800513a:	460b      	mov	r3, r1
 800513c:	4b61      	ldr	r3, [pc, #388]	; (80052c4 <UART_SetConfig+0x2d4>)
 800513e:	fba3 2302 	umull	r2, r3, r3, r2
 8005142:	095b      	lsrs	r3, r3, #5
 8005144:	011c      	lsls	r4, r3, #4
 8005146:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800514a:	2200      	movs	r2, #0
 800514c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005150:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005154:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005158:	4642      	mov	r2, r8
 800515a:	464b      	mov	r3, r9
 800515c:	1891      	adds	r1, r2, r2
 800515e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005160:	415b      	adcs	r3, r3
 8005162:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005164:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005168:	4641      	mov	r1, r8
 800516a:	eb12 0a01 	adds.w	sl, r2, r1
 800516e:	4649      	mov	r1, r9
 8005170:	eb43 0b01 	adc.w	fp, r3, r1
 8005174:	f04f 0200 	mov.w	r2, #0
 8005178:	f04f 0300 	mov.w	r3, #0
 800517c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005180:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005184:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005188:	4692      	mov	sl, r2
 800518a:	469b      	mov	fp, r3
 800518c:	4643      	mov	r3, r8
 800518e:	eb1a 0303 	adds.w	r3, sl, r3
 8005192:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005196:	464b      	mov	r3, r9
 8005198:	eb4b 0303 	adc.w	r3, fp, r3
 800519c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80051a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80051ac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80051b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80051b4:	460b      	mov	r3, r1
 80051b6:	18db      	adds	r3, r3, r3
 80051b8:	643b      	str	r3, [r7, #64]	; 0x40
 80051ba:	4613      	mov	r3, r2
 80051bc:	eb42 0303 	adc.w	r3, r2, r3
 80051c0:	647b      	str	r3, [r7, #68]	; 0x44
 80051c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80051c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80051ca:	f7fb fc57 	bl	8000a7c <__aeabi_uldivmod>
 80051ce:	4602      	mov	r2, r0
 80051d0:	460b      	mov	r3, r1
 80051d2:	4611      	mov	r1, r2
 80051d4:	4b3b      	ldr	r3, [pc, #236]	; (80052c4 <UART_SetConfig+0x2d4>)
 80051d6:	fba3 2301 	umull	r2, r3, r3, r1
 80051da:	095b      	lsrs	r3, r3, #5
 80051dc:	2264      	movs	r2, #100	; 0x64
 80051de:	fb02 f303 	mul.w	r3, r2, r3
 80051e2:	1acb      	subs	r3, r1, r3
 80051e4:	00db      	lsls	r3, r3, #3
 80051e6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80051ea:	4b36      	ldr	r3, [pc, #216]	; (80052c4 <UART_SetConfig+0x2d4>)
 80051ec:	fba3 2302 	umull	r2, r3, r3, r2
 80051f0:	095b      	lsrs	r3, r3, #5
 80051f2:	005b      	lsls	r3, r3, #1
 80051f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80051f8:	441c      	add	r4, r3
 80051fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051fe:	2200      	movs	r2, #0
 8005200:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005204:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005208:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800520c:	4642      	mov	r2, r8
 800520e:	464b      	mov	r3, r9
 8005210:	1891      	adds	r1, r2, r2
 8005212:	63b9      	str	r1, [r7, #56]	; 0x38
 8005214:	415b      	adcs	r3, r3
 8005216:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005218:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800521c:	4641      	mov	r1, r8
 800521e:	1851      	adds	r1, r2, r1
 8005220:	6339      	str	r1, [r7, #48]	; 0x30
 8005222:	4649      	mov	r1, r9
 8005224:	414b      	adcs	r3, r1
 8005226:	637b      	str	r3, [r7, #52]	; 0x34
 8005228:	f04f 0200 	mov.w	r2, #0
 800522c:	f04f 0300 	mov.w	r3, #0
 8005230:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005234:	4659      	mov	r1, fp
 8005236:	00cb      	lsls	r3, r1, #3
 8005238:	4651      	mov	r1, sl
 800523a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800523e:	4651      	mov	r1, sl
 8005240:	00ca      	lsls	r2, r1, #3
 8005242:	4610      	mov	r0, r2
 8005244:	4619      	mov	r1, r3
 8005246:	4603      	mov	r3, r0
 8005248:	4642      	mov	r2, r8
 800524a:	189b      	adds	r3, r3, r2
 800524c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005250:	464b      	mov	r3, r9
 8005252:	460a      	mov	r2, r1
 8005254:	eb42 0303 	adc.w	r3, r2, r3
 8005258:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800525c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005268:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800526c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005270:	460b      	mov	r3, r1
 8005272:	18db      	adds	r3, r3, r3
 8005274:	62bb      	str	r3, [r7, #40]	; 0x28
 8005276:	4613      	mov	r3, r2
 8005278:	eb42 0303 	adc.w	r3, r2, r3
 800527c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800527e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005282:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005286:	f7fb fbf9 	bl	8000a7c <__aeabi_uldivmod>
 800528a:	4602      	mov	r2, r0
 800528c:	460b      	mov	r3, r1
 800528e:	4b0d      	ldr	r3, [pc, #52]	; (80052c4 <UART_SetConfig+0x2d4>)
 8005290:	fba3 1302 	umull	r1, r3, r3, r2
 8005294:	095b      	lsrs	r3, r3, #5
 8005296:	2164      	movs	r1, #100	; 0x64
 8005298:	fb01 f303 	mul.w	r3, r1, r3
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	00db      	lsls	r3, r3, #3
 80052a0:	3332      	adds	r3, #50	; 0x32
 80052a2:	4a08      	ldr	r2, [pc, #32]	; (80052c4 <UART_SetConfig+0x2d4>)
 80052a4:	fba2 2303 	umull	r2, r3, r2, r3
 80052a8:	095b      	lsrs	r3, r3, #5
 80052aa:	f003 0207 	and.w	r2, r3, #7
 80052ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4422      	add	r2, r4
 80052b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80052b8:	e105      	b.n	80054c6 <UART_SetConfig+0x4d6>
 80052ba:	bf00      	nop
 80052bc:	40011000 	.word	0x40011000
 80052c0:	40011400 	.word	0x40011400
 80052c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052cc:	2200      	movs	r2, #0
 80052ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80052d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80052d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80052da:	4642      	mov	r2, r8
 80052dc:	464b      	mov	r3, r9
 80052de:	1891      	adds	r1, r2, r2
 80052e0:	6239      	str	r1, [r7, #32]
 80052e2:	415b      	adcs	r3, r3
 80052e4:	627b      	str	r3, [r7, #36]	; 0x24
 80052e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80052ea:	4641      	mov	r1, r8
 80052ec:	1854      	adds	r4, r2, r1
 80052ee:	4649      	mov	r1, r9
 80052f0:	eb43 0501 	adc.w	r5, r3, r1
 80052f4:	f04f 0200 	mov.w	r2, #0
 80052f8:	f04f 0300 	mov.w	r3, #0
 80052fc:	00eb      	lsls	r3, r5, #3
 80052fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005302:	00e2      	lsls	r2, r4, #3
 8005304:	4614      	mov	r4, r2
 8005306:	461d      	mov	r5, r3
 8005308:	4643      	mov	r3, r8
 800530a:	18e3      	adds	r3, r4, r3
 800530c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005310:	464b      	mov	r3, r9
 8005312:	eb45 0303 	adc.w	r3, r5, r3
 8005316:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800531a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005326:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800532a:	f04f 0200 	mov.w	r2, #0
 800532e:	f04f 0300 	mov.w	r3, #0
 8005332:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005336:	4629      	mov	r1, r5
 8005338:	008b      	lsls	r3, r1, #2
 800533a:	4621      	mov	r1, r4
 800533c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005340:	4621      	mov	r1, r4
 8005342:	008a      	lsls	r2, r1, #2
 8005344:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005348:	f7fb fb98 	bl	8000a7c <__aeabi_uldivmod>
 800534c:	4602      	mov	r2, r0
 800534e:	460b      	mov	r3, r1
 8005350:	4b60      	ldr	r3, [pc, #384]	; (80054d4 <UART_SetConfig+0x4e4>)
 8005352:	fba3 2302 	umull	r2, r3, r3, r2
 8005356:	095b      	lsrs	r3, r3, #5
 8005358:	011c      	lsls	r4, r3, #4
 800535a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800535e:	2200      	movs	r2, #0
 8005360:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005364:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005368:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800536c:	4642      	mov	r2, r8
 800536e:	464b      	mov	r3, r9
 8005370:	1891      	adds	r1, r2, r2
 8005372:	61b9      	str	r1, [r7, #24]
 8005374:	415b      	adcs	r3, r3
 8005376:	61fb      	str	r3, [r7, #28]
 8005378:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800537c:	4641      	mov	r1, r8
 800537e:	1851      	adds	r1, r2, r1
 8005380:	6139      	str	r1, [r7, #16]
 8005382:	4649      	mov	r1, r9
 8005384:	414b      	adcs	r3, r1
 8005386:	617b      	str	r3, [r7, #20]
 8005388:	f04f 0200 	mov.w	r2, #0
 800538c:	f04f 0300 	mov.w	r3, #0
 8005390:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005394:	4659      	mov	r1, fp
 8005396:	00cb      	lsls	r3, r1, #3
 8005398:	4651      	mov	r1, sl
 800539a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800539e:	4651      	mov	r1, sl
 80053a0:	00ca      	lsls	r2, r1, #3
 80053a2:	4610      	mov	r0, r2
 80053a4:	4619      	mov	r1, r3
 80053a6:	4603      	mov	r3, r0
 80053a8:	4642      	mov	r2, r8
 80053aa:	189b      	adds	r3, r3, r2
 80053ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80053b0:	464b      	mov	r3, r9
 80053b2:	460a      	mov	r2, r1
 80053b4:	eb42 0303 	adc.w	r3, r2, r3
 80053b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80053bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80053c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80053c8:	f04f 0200 	mov.w	r2, #0
 80053cc:	f04f 0300 	mov.w	r3, #0
 80053d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80053d4:	4649      	mov	r1, r9
 80053d6:	008b      	lsls	r3, r1, #2
 80053d8:	4641      	mov	r1, r8
 80053da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053de:	4641      	mov	r1, r8
 80053e0:	008a      	lsls	r2, r1, #2
 80053e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80053e6:	f7fb fb49 	bl	8000a7c <__aeabi_uldivmod>
 80053ea:	4602      	mov	r2, r0
 80053ec:	460b      	mov	r3, r1
 80053ee:	4b39      	ldr	r3, [pc, #228]	; (80054d4 <UART_SetConfig+0x4e4>)
 80053f0:	fba3 1302 	umull	r1, r3, r3, r2
 80053f4:	095b      	lsrs	r3, r3, #5
 80053f6:	2164      	movs	r1, #100	; 0x64
 80053f8:	fb01 f303 	mul.w	r3, r1, r3
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	011b      	lsls	r3, r3, #4
 8005400:	3332      	adds	r3, #50	; 0x32
 8005402:	4a34      	ldr	r2, [pc, #208]	; (80054d4 <UART_SetConfig+0x4e4>)
 8005404:	fba2 2303 	umull	r2, r3, r2, r3
 8005408:	095b      	lsrs	r3, r3, #5
 800540a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800540e:	441c      	add	r4, r3
 8005410:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005414:	2200      	movs	r2, #0
 8005416:	673b      	str	r3, [r7, #112]	; 0x70
 8005418:	677a      	str	r2, [r7, #116]	; 0x74
 800541a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800541e:	4642      	mov	r2, r8
 8005420:	464b      	mov	r3, r9
 8005422:	1891      	adds	r1, r2, r2
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	415b      	adcs	r3, r3
 8005428:	60fb      	str	r3, [r7, #12]
 800542a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800542e:	4641      	mov	r1, r8
 8005430:	1851      	adds	r1, r2, r1
 8005432:	6039      	str	r1, [r7, #0]
 8005434:	4649      	mov	r1, r9
 8005436:	414b      	adcs	r3, r1
 8005438:	607b      	str	r3, [r7, #4]
 800543a:	f04f 0200 	mov.w	r2, #0
 800543e:	f04f 0300 	mov.w	r3, #0
 8005442:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005446:	4659      	mov	r1, fp
 8005448:	00cb      	lsls	r3, r1, #3
 800544a:	4651      	mov	r1, sl
 800544c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005450:	4651      	mov	r1, sl
 8005452:	00ca      	lsls	r2, r1, #3
 8005454:	4610      	mov	r0, r2
 8005456:	4619      	mov	r1, r3
 8005458:	4603      	mov	r3, r0
 800545a:	4642      	mov	r2, r8
 800545c:	189b      	adds	r3, r3, r2
 800545e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005460:	464b      	mov	r3, r9
 8005462:	460a      	mov	r2, r1
 8005464:	eb42 0303 	adc.w	r3, r2, r3
 8005468:	66fb      	str	r3, [r7, #108]	; 0x6c
 800546a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	663b      	str	r3, [r7, #96]	; 0x60
 8005474:	667a      	str	r2, [r7, #100]	; 0x64
 8005476:	f04f 0200 	mov.w	r2, #0
 800547a:	f04f 0300 	mov.w	r3, #0
 800547e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005482:	4649      	mov	r1, r9
 8005484:	008b      	lsls	r3, r1, #2
 8005486:	4641      	mov	r1, r8
 8005488:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800548c:	4641      	mov	r1, r8
 800548e:	008a      	lsls	r2, r1, #2
 8005490:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005494:	f7fb faf2 	bl	8000a7c <__aeabi_uldivmod>
 8005498:	4602      	mov	r2, r0
 800549a:	460b      	mov	r3, r1
 800549c:	4b0d      	ldr	r3, [pc, #52]	; (80054d4 <UART_SetConfig+0x4e4>)
 800549e:	fba3 1302 	umull	r1, r3, r3, r2
 80054a2:	095b      	lsrs	r3, r3, #5
 80054a4:	2164      	movs	r1, #100	; 0x64
 80054a6:	fb01 f303 	mul.w	r3, r1, r3
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	011b      	lsls	r3, r3, #4
 80054ae:	3332      	adds	r3, #50	; 0x32
 80054b0:	4a08      	ldr	r2, [pc, #32]	; (80054d4 <UART_SetConfig+0x4e4>)
 80054b2:	fba2 2303 	umull	r2, r3, r2, r3
 80054b6:	095b      	lsrs	r3, r3, #5
 80054b8:	f003 020f 	and.w	r2, r3, #15
 80054bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4422      	add	r2, r4
 80054c4:	609a      	str	r2, [r3, #8]
}
 80054c6:	bf00      	nop
 80054c8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80054cc:	46bd      	mov	sp, r7
 80054ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054d2:	bf00      	nop
 80054d4:	51eb851f 	.word	0x51eb851f

080054d8 <__errno>:
 80054d8:	4b01      	ldr	r3, [pc, #4]	; (80054e0 <__errno+0x8>)
 80054da:	6818      	ldr	r0, [r3, #0]
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	2000000c 	.word	0x2000000c

080054e4 <__libc_init_array>:
 80054e4:	b570      	push	{r4, r5, r6, lr}
 80054e6:	4d0d      	ldr	r5, [pc, #52]	; (800551c <__libc_init_array+0x38>)
 80054e8:	4c0d      	ldr	r4, [pc, #52]	; (8005520 <__libc_init_array+0x3c>)
 80054ea:	1b64      	subs	r4, r4, r5
 80054ec:	10a4      	asrs	r4, r4, #2
 80054ee:	2600      	movs	r6, #0
 80054f0:	42a6      	cmp	r6, r4
 80054f2:	d109      	bne.n	8005508 <__libc_init_array+0x24>
 80054f4:	4d0b      	ldr	r5, [pc, #44]	; (8005524 <__libc_init_array+0x40>)
 80054f6:	4c0c      	ldr	r4, [pc, #48]	; (8005528 <__libc_init_array+0x44>)
 80054f8:	f000 fc8e 	bl	8005e18 <_init>
 80054fc:	1b64      	subs	r4, r4, r5
 80054fe:	10a4      	asrs	r4, r4, #2
 8005500:	2600      	movs	r6, #0
 8005502:	42a6      	cmp	r6, r4
 8005504:	d105      	bne.n	8005512 <__libc_init_array+0x2e>
 8005506:	bd70      	pop	{r4, r5, r6, pc}
 8005508:	f855 3b04 	ldr.w	r3, [r5], #4
 800550c:	4798      	blx	r3
 800550e:	3601      	adds	r6, #1
 8005510:	e7ee      	b.n	80054f0 <__libc_init_array+0xc>
 8005512:	f855 3b04 	ldr.w	r3, [r5], #4
 8005516:	4798      	blx	r3
 8005518:	3601      	adds	r6, #1
 800551a:	e7f2      	b.n	8005502 <__libc_init_array+0x1e>
 800551c:	08006090 	.word	0x08006090
 8005520:	08006090 	.word	0x08006090
 8005524:	08006090 	.word	0x08006090
 8005528:	08006094 	.word	0x08006094

0800552c <memset>:
 800552c:	4402      	add	r2, r0
 800552e:	4603      	mov	r3, r0
 8005530:	4293      	cmp	r3, r2
 8005532:	d100      	bne.n	8005536 <memset+0xa>
 8005534:	4770      	bx	lr
 8005536:	f803 1b01 	strb.w	r1, [r3], #1
 800553a:	e7f9      	b.n	8005530 <memset+0x4>

0800553c <siprintf>:
 800553c:	b40e      	push	{r1, r2, r3}
 800553e:	b500      	push	{lr}
 8005540:	b09c      	sub	sp, #112	; 0x70
 8005542:	ab1d      	add	r3, sp, #116	; 0x74
 8005544:	9002      	str	r0, [sp, #8]
 8005546:	9006      	str	r0, [sp, #24]
 8005548:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800554c:	4809      	ldr	r0, [pc, #36]	; (8005574 <siprintf+0x38>)
 800554e:	9107      	str	r1, [sp, #28]
 8005550:	9104      	str	r1, [sp, #16]
 8005552:	4909      	ldr	r1, [pc, #36]	; (8005578 <siprintf+0x3c>)
 8005554:	f853 2b04 	ldr.w	r2, [r3], #4
 8005558:	9105      	str	r1, [sp, #20]
 800555a:	6800      	ldr	r0, [r0, #0]
 800555c:	9301      	str	r3, [sp, #4]
 800555e:	a902      	add	r1, sp, #8
 8005560:	f000 f868 	bl	8005634 <_svfiprintf_r>
 8005564:	9b02      	ldr	r3, [sp, #8]
 8005566:	2200      	movs	r2, #0
 8005568:	701a      	strb	r2, [r3, #0]
 800556a:	b01c      	add	sp, #112	; 0x70
 800556c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005570:	b003      	add	sp, #12
 8005572:	4770      	bx	lr
 8005574:	2000000c 	.word	0x2000000c
 8005578:	ffff0208 	.word	0xffff0208

0800557c <__ssputs_r>:
 800557c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005580:	688e      	ldr	r6, [r1, #8]
 8005582:	429e      	cmp	r6, r3
 8005584:	4682      	mov	sl, r0
 8005586:	460c      	mov	r4, r1
 8005588:	4690      	mov	r8, r2
 800558a:	461f      	mov	r7, r3
 800558c:	d838      	bhi.n	8005600 <__ssputs_r+0x84>
 800558e:	898a      	ldrh	r2, [r1, #12]
 8005590:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005594:	d032      	beq.n	80055fc <__ssputs_r+0x80>
 8005596:	6825      	ldr	r5, [r4, #0]
 8005598:	6909      	ldr	r1, [r1, #16]
 800559a:	eba5 0901 	sub.w	r9, r5, r1
 800559e:	6965      	ldr	r5, [r4, #20]
 80055a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80055a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80055a8:	3301      	adds	r3, #1
 80055aa:	444b      	add	r3, r9
 80055ac:	106d      	asrs	r5, r5, #1
 80055ae:	429d      	cmp	r5, r3
 80055b0:	bf38      	it	cc
 80055b2:	461d      	movcc	r5, r3
 80055b4:	0553      	lsls	r3, r2, #21
 80055b6:	d531      	bpl.n	800561c <__ssputs_r+0xa0>
 80055b8:	4629      	mov	r1, r5
 80055ba:	f000 fb63 	bl	8005c84 <_malloc_r>
 80055be:	4606      	mov	r6, r0
 80055c0:	b950      	cbnz	r0, 80055d8 <__ssputs_r+0x5c>
 80055c2:	230c      	movs	r3, #12
 80055c4:	f8ca 3000 	str.w	r3, [sl]
 80055c8:	89a3      	ldrh	r3, [r4, #12]
 80055ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055ce:	81a3      	strh	r3, [r4, #12]
 80055d0:	f04f 30ff 	mov.w	r0, #4294967295
 80055d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055d8:	6921      	ldr	r1, [r4, #16]
 80055da:	464a      	mov	r2, r9
 80055dc:	f000 fabe 	bl	8005b5c <memcpy>
 80055e0:	89a3      	ldrh	r3, [r4, #12]
 80055e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80055e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055ea:	81a3      	strh	r3, [r4, #12]
 80055ec:	6126      	str	r6, [r4, #16]
 80055ee:	6165      	str	r5, [r4, #20]
 80055f0:	444e      	add	r6, r9
 80055f2:	eba5 0509 	sub.w	r5, r5, r9
 80055f6:	6026      	str	r6, [r4, #0]
 80055f8:	60a5      	str	r5, [r4, #8]
 80055fa:	463e      	mov	r6, r7
 80055fc:	42be      	cmp	r6, r7
 80055fe:	d900      	bls.n	8005602 <__ssputs_r+0x86>
 8005600:	463e      	mov	r6, r7
 8005602:	6820      	ldr	r0, [r4, #0]
 8005604:	4632      	mov	r2, r6
 8005606:	4641      	mov	r1, r8
 8005608:	f000 fab6 	bl	8005b78 <memmove>
 800560c:	68a3      	ldr	r3, [r4, #8]
 800560e:	1b9b      	subs	r3, r3, r6
 8005610:	60a3      	str	r3, [r4, #8]
 8005612:	6823      	ldr	r3, [r4, #0]
 8005614:	4433      	add	r3, r6
 8005616:	6023      	str	r3, [r4, #0]
 8005618:	2000      	movs	r0, #0
 800561a:	e7db      	b.n	80055d4 <__ssputs_r+0x58>
 800561c:	462a      	mov	r2, r5
 800561e:	f000 fba5 	bl	8005d6c <_realloc_r>
 8005622:	4606      	mov	r6, r0
 8005624:	2800      	cmp	r0, #0
 8005626:	d1e1      	bne.n	80055ec <__ssputs_r+0x70>
 8005628:	6921      	ldr	r1, [r4, #16]
 800562a:	4650      	mov	r0, sl
 800562c:	f000 fabe 	bl	8005bac <_free_r>
 8005630:	e7c7      	b.n	80055c2 <__ssputs_r+0x46>
	...

08005634 <_svfiprintf_r>:
 8005634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005638:	4698      	mov	r8, r3
 800563a:	898b      	ldrh	r3, [r1, #12]
 800563c:	061b      	lsls	r3, r3, #24
 800563e:	b09d      	sub	sp, #116	; 0x74
 8005640:	4607      	mov	r7, r0
 8005642:	460d      	mov	r5, r1
 8005644:	4614      	mov	r4, r2
 8005646:	d50e      	bpl.n	8005666 <_svfiprintf_r+0x32>
 8005648:	690b      	ldr	r3, [r1, #16]
 800564a:	b963      	cbnz	r3, 8005666 <_svfiprintf_r+0x32>
 800564c:	2140      	movs	r1, #64	; 0x40
 800564e:	f000 fb19 	bl	8005c84 <_malloc_r>
 8005652:	6028      	str	r0, [r5, #0]
 8005654:	6128      	str	r0, [r5, #16]
 8005656:	b920      	cbnz	r0, 8005662 <_svfiprintf_r+0x2e>
 8005658:	230c      	movs	r3, #12
 800565a:	603b      	str	r3, [r7, #0]
 800565c:	f04f 30ff 	mov.w	r0, #4294967295
 8005660:	e0d1      	b.n	8005806 <_svfiprintf_r+0x1d2>
 8005662:	2340      	movs	r3, #64	; 0x40
 8005664:	616b      	str	r3, [r5, #20]
 8005666:	2300      	movs	r3, #0
 8005668:	9309      	str	r3, [sp, #36]	; 0x24
 800566a:	2320      	movs	r3, #32
 800566c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005670:	f8cd 800c 	str.w	r8, [sp, #12]
 8005674:	2330      	movs	r3, #48	; 0x30
 8005676:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005820 <_svfiprintf_r+0x1ec>
 800567a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800567e:	f04f 0901 	mov.w	r9, #1
 8005682:	4623      	mov	r3, r4
 8005684:	469a      	mov	sl, r3
 8005686:	f813 2b01 	ldrb.w	r2, [r3], #1
 800568a:	b10a      	cbz	r2, 8005690 <_svfiprintf_r+0x5c>
 800568c:	2a25      	cmp	r2, #37	; 0x25
 800568e:	d1f9      	bne.n	8005684 <_svfiprintf_r+0x50>
 8005690:	ebba 0b04 	subs.w	fp, sl, r4
 8005694:	d00b      	beq.n	80056ae <_svfiprintf_r+0x7a>
 8005696:	465b      	mov	r3, fp
 8005698:	4622      	mov	r2, r4
 800569a:	4629      	mov	r1, r5
 800569c:	4638      	mov	r0, r7
 800569e:	f7ff ff6d 	bl	800557c <__ssputs_r>
 80056a2:	3001      	adds	r0, #1
 80056a4:	f000 80aa 	beq.w	80057fc <_svfiprintf_r+0x1c8>
 80056a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056aa:	445a      	add	r2, fp
 80056ac:	9209      	str	r2, [sp, #36]	; 0x24
 80056ae:	f89a 3000 	ldrb.w	r3, [sl]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	f000 80a2 	beq.w	80057fc <_svfiprintf_r+0x1c8>
 80056b8:	2300      	movs	r3, #0
 80056ba:	f04f 32ff 	mov.w	r2, #4294967295
 80056be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056c2:	f10a 0a01 	add.w	sl, sl, #1
 80056c6:	9304      	str	r3, [sp, #16]
 80056c8:	9307      	str	r3, [sp, #28]
 80056ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80056ce:	931a      	str	r3, [sp, #104]	; 0x68
 80056d0:	4654      	mov	r4, sl
 80056d2:	2205      	movs	r2, #5
 80056d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056d8:	4851      	ldr	r0, [pc, #324]	; (8005820 <_svfiprintf_r+0x1ec>)
 80056da:	f7fa fd89 	bl	80001f0 <memchr>
 80056de:	9a04      	ldr	r2, [sp, #16]
 80056e0:	b9d8      	cbnz	r0, 800571a <_svfiprintf_r+0xe6>
 80056e2:	06d0      	lsls	r0, r2, #27
 80056e4:	bf44      	itt	mi
 80056e6:	2320      	movmi	r3, #32
 80056e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056ec:	0711      	lsls	r1, r2, #28
 80056ee:	bf44      	itt	mi
 80056f0:	232b      	movmi	r3, #43	; 0x2b
 80056f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056f6:	f89a 3000 	ldrb.w	r3, [sl]
 80056fa:	2b2a      	cmp	r3, #42	; 0x2a
 80056fc:	d015      	beq.n	800572a <_svfiprintf_r+0xf6>
 80056fe:	9a07      	ldr	r2, [sp, #28]
 8005700:	4654      	mov	r4, sl
 8005702:	2000      	movs	r0, #0
 8005704:	f04f 0c0a 	mov.w	ip, #10
 8005708:	4621      	mov	r1, r4
 800570a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800570e:	3b30      	subs	r3, #48	; 0x30
 8005710:	2b09      	cmp	r3, #9
 8005712:	d94e      	bls.n	80057b2 <_svfiprintf_r+0x17e>
 8005714:	b1b0      	cbz	r0, 8005744 <_svfiprintf_r+0x110>
 8005716:	9207      	str	r2, [sp, #28]
 8005718:	e014      	b.n	8005744 <_svfiprintf_r+0x110>
 800571a:	eba0 0308 	sub.w	r3, r0, r8
 800571e:	fa09 f303 	lsl.w	r3, r9, r3
 8005722:	4313      	orrs	r3, r2
 8005724:	9304      	str	r3, [sp, #16]
 8005726:	46a2      	mov	sl, r4
 8005728:	e7d2      	b.n	80056d0 <_svfiprintf_r+0x9c>
 800572a:	9b03      	ldr	r3, [sp, #12]
 800572c:	1d19      	adds	r1, r3, #4
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	9103      	str	r1, [sp, #12]
 8005732:	2b00      	cmp	r3, #0
 8005734:	bfbb      	ittet	lt
 8005736:	425b      	neglt	r3, r3
 8005738:	f042 0202 	orrlt.w	r2, r2, #2
 800573c:	9307      	strge	r3, [sp, #28]
 800573e:	9307      	strlt	r3, [sp, #28]
 8005740:	bfb8      	it	lt
 8005742:	9204      	strlt	r2, [sp, #16]
 8005744:	7823      	ldrb	r3, [r4, #0]
 8005746:	2b2e      	cmp	r3, #46	; 0x2e
 8005748:	d10c      	bne.n	8005764 <_svfiprintf_r+0x130>
 800574a:	7863      	ldrb	r3, [r4, #1]
 800574c:	2b2a      	cmp	r3, #42	; 0x2a
 800574e:	d135      	bne.n	80057bc <_svfiprintf_r+0x188>
 8005750:	9b03      	ldr	r3, [sp, #12]
 8005752:	1d1a      	adds	r2, r3, #4
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	9203      	str	r2, [sp, #12]
 8005758:	2b00      	cmp	r3, #0
 800575a:	bfb8      	it	lt
 800575c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005760:	3402      	adds	r4, #2
 8005762:	9305      	str	r3, [sp, #20]
 8005764:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005830 <_svfiprintf_r+0x1fc>
 8005768:	7821      	ldrb	r1, [r4, #0]
 800576a:	2203      	movs	r2, #3
 800576c:	4650      	mov	r0, sl
 800576e:	f7fa fd3f 	bl	80001f0 <memchr>
 8005772:	b140      	cbz	r0, 8005786 <_svfiprintf_r+0x152>
 8005774:	2340      	movs	r3, #64	; 0x40
 8005776:	eba0 000a 	sub.w	r0, r0, sl
 800577a:	fa03 f000 	lsl.w	r0, r3, r0
 800577e:	9b04      	ldr	r3, [sp, #16]
 8005780:	4303      	orrs	r3, r0
 8005782:	3401      	adds	r4, #1
 8005784:	9304      	str	r3, [sp, #16]
 8005786:	f814 1b01 	ldrb.w	r1, [r4], #1
 800578a:	4826      	ldr	r0, [pc, #152]	; (8005824 <_svfiprintf_r+0x1f0>)
 800578c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005790:	2206      	movs	r2, #6
 8005792:	f7fa fd2d 	bl	80001f0 <memchr>
 8005796:	2800      	cmp	r0, #0
 8005798:	d038      	beq.n	800580c <_svfiprintf_r+0x1d8>
 800579a:	4b23      	ldr	r3, [pc, #140]	; (8005828 <_svfiprintf_r+0x1f4>)
 800579c:	bb1b      	cbnz	r3, 80057e6 <_svfiprintf_r+0x1b2>
 800579e:	9b03      	ldr	r3, [sp, #12]
 80057a0:	3307      	adds	r3, #7
 80057a2:	f023 0307 	bic.w	r3, r3, #7
 80057a6:	3308      	adds	r3, #8
 80057a8:	9303      	str	r3, [sp, #12]
 80057aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057ac:	4433      	add	r3, r6
 80057ae:	9309      	str	r3, [sp, #36]	; 0x24
 80057b0:	e767      	b.n	8005682 <_svfiprintf_r+0x4e>
 80057b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80057b6:	460c      	mov	r4, r1
 80057b8:	2001      	movs	r0, #1
 80057ba:	e7a5      	b.n	8005708 <_svfiprintf_r+0xd4>
 80057bc:	2300      	movs	r3, #0
 80057be:	3401      	adds	r4, #1
 80057c0:	9305      	str	r3, [sp, #20]
 80057c2:	4619      	mov	r1, r3
 80057c4:	f04f 0c0a 	mov.w	ip, #10
 80057c8:	4620      	mov	r0, r4
 80057ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057ce:	3a30      	subs	r2, #48	; 0x30
 80057d0:	2a09      	cmp	r2, #9
 80057d2:	d903      	bls.n	80057dc <_svfiprintf_r+0x1a8>
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d0c5      	beq.n	8005764 <_svfiprintf_r+0x130>
 80057d8:	9105      	str	r1, [sp, #20]
 80057da:	e7c3      	b.n	8005764 <_svfiprintf_r+0x130>
 80057dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80057e0:	4604      	mov	r4, r0
 80057e2:	2301      	movs	r3, #1
 80057e4:	e7f0      	b.n	80057c8 <_svfiprintf_r+0x194>
 80057e6:	ab03      	add	r3, sp, #12
 80057e8:	9300      	str	r3, [sp, #0]
 80057ea:	462a      	mov	r2, r5
 80057ec:	4b0f      	ldr	r3, [pc, #60]	; (800582c <_svfiprintf_r+0x1f8>)
 80057ee:	a904      	add	r1, sp, #16
 80057f0:	4638      	mov	r0, r7
 80057f2:	f3af 8000 	nop.w
 80057f6:	1c42      	adds	r2, r0, #1
 80057f8:	4606      	mov	r6, r0
 80057fa:	d1d6      	bne.n	80057aa <_svfiprintf_r+0x176>
 80057fc:	89ab      	ldrh	r3, [r5, #12]
 80057fe:	065b      	lsls	r3, r3, #25
 8005800:	f53f af2c 	bmi.w	800565c <_svfiprintf_r+0x28>
 8005804:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005806:	b01d      	add	sp, #116	; 0x74
 8005808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800580c:	ab03      	add	r3, sp, #12
 800580e:	9300      	str	r3, [sp, #0]
 8005810:	462a      	mov	r2, r5
 8005812:	4b06      	ldr	r3, [pc, #24]	; (800582c <_svfiprintf_r+0x1f8>)
 8005814:	a904      	add	r1, sp, #16
 8005816:	4638      	mov	r0, r7
 8005818:	f000 f87a 	bl	8005910 <_printf_i>
 800581c:	e7eb      	b.n	80057f6 <_svfiprintf_r+0x1c2>
 800581e:	bf00      	nop
 8005820:	08006054 	.word	0x08006054
 8005824:	0800605e 	.word	0x0800605e
 8005828:	00000000 	.word	0x00000000
 800582c:	0800557d 	.word	0x0800557d
 8005830:	0800605a 	.word	0x0800605a

08005834 <_printf_common>:
 8005834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005838:	4616      	mov	r6, r2
 800583a:	4699      	mov	r9, r3
 800583c:	688a      	ldr	r2, [r1, #8]
 800583e:	690b      	ldr	r3, [r1, #16]
 8005840:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005844:	4293      	cmp	r3, r2
 8005846:	bfb8      	it	lt
 8005848:	4613      	movlt	r3, r2
 800584a:	6033      	str	r3, [r6, #0]
 800584c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005850:	4607      	mov	r7, r0
 8005852:	460c      	mov	r4, r1
 8005854:	b10a      	cbz	r2, 800585a <_printf_common+0x26>
 8005856:	3301      	adds	r3, #1
 8005858:	6033      	str	r3, [r6, #0]
 800585a:	6823      	ldr	r3, [r4, #0]
 800585c:	0699      	lsls	r1, r3, #26
 800585e:	bf42      	ittt	mi
 8005860:	6833      	ldrmi	r3, [r6, #0]
 8005862:	3302      	addmi	r3, #2
 8005864:	6033      	strmi	r3, [r6, #0]
 8005866:	6825      	ldr	r5, [r4, #0]
 8005868:	f015 0506 	ands.w	r5, r5, #6
 800586c:	d106      	bne.n	800587c <_printf_common+0x48>
 800586e:	f104 0a19 	add.w	sl, r4, #25
 8005872:	68e3      	ldr	r3, [r4, #12]
 8005874:	6832      	ldr	r2, [r6, #0]
 8005876:	1a9b      	subs	r3, r3, r2
 8005878:	42ab      	cmp	r3, r5
 800587a:	dc26      	bgt.n	80058ca <_printf_common+0x96>
 800587c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005880:	1e13      	subs	r3, r2, #0
 8005882:	6822      	ldr	r2, [r4, #0]
 8005884:	bf18      	it	ne
 8005886:	2301      	movne	r3, #1
 8005888:	0692      	lsls	r2, r2, #26
 800588a:	d42b      	bmi.n	80058e4 <_printf_common+0xb0>
 800588c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005890:	4649      	mov	r1, r9
 8005892:	4638      	mov	r0, r7
 8005894:	47c0      	blx	r8
 8005896:	3001      	adds	r0, #1
 8005898:	d01e      	beq.n	80058d8 <_printf_common+0xa4>
 800589a:	6823      	ldr	r3, [r4, #0]
 800589c:	68e5      	ldr	r5, [r4, #12]
 800589e:	6832      	ldr	r2, [r6, #0]
 80058a0:	f003 0306 	and.w	r3, r3, #6
 80058a4:	2b04      	cmp	r3, #4
 80058a6:	bf08      	it	eq
 80058a8:	1aad      	subeq	r5, r5, r2
 80058aa:	68a3      	ldr	r3, [r4, #8]
 80058ac:	6922      	ldr	r2, [r4, #16]
 80058ae:	bf0c      	ite	eq
 80058b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058b4:	2500      	movne	r5, #0
 80058b6:	4293      	cmp	r3, r2
 80058b8:	bfc4      	itt	gt
 80058ba:	1a9b      	subgt	r3, r3, r2
 80058bc:	18ed      	addgt	r5, r5, r3
 80058be:	2600      	movs	r6, #0
 80058c0:	341a      	adds	r4, #26
 80058c2:	42b5      	cmp	r5, r6
 80058c4:	d11a      	bne.n	80058fc <_printf_common+0xc8>
 80058c6:	2000      	movs	r0, #0
 80058c8:	e008      	b.n	80058dc <_printf_common+0xa8>
 80058ca:	2301      	movs	r3, #1
 80058cc:	4652      	mov	r2, sl
 80058ce:	4649      	mov	r1, r9
 80058d0:	4638      	mov	r0, r7
 80058d2:	47c0      	blx	r8
 80058d4:	3001      	adds	r0, #1
 80058d6:	d103      	bne.n	80058e0 <_printf_common+0xac>
 80058d8:	f04f 30ff 	mov.w	r0, #4294967295
 80058dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058e0:	3501      	adds	r5, #1
 80058e2:	e7c6      	b.n	8005872 <_printf_common+0x3e>
 80058e4:	18e1      	adds	r1, r4, r3
 80058e6:	1c5a      	adds	r2, r3, #1
 80058e8:	2030      	movs	r0, #48	; 0x30
 80058ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058ee:	4422      	add	r2, r4
 80058f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058f8:	3302      	adds	r3, #2
 80058fa:	e7c7      	b.n	800588c <_printf_common+0x58>
 80058fc:	2301      	movs	r3, #1
 80058fe:	4622      	mov	r2, r4
 8005900:	4649      	mov	r1, r9
 8005902:	4638      	mov	r0, r7
 8005904:	47c0      	blx	r8
 8005906:	3001      	adds	r0, #1
 8005908:	d0e6      	beq.n	80058d8 <_printf_common+0xa4>
 800590a:	3601      	adds	r6, #1
 800590c:	e7d9      	b.n	80058c2 <_printf_common+0x8e>
	...

08005910 <_printf_i>:
 8005910:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005914:	7e0f      	ldrb	r7, [r1, #24]
 8005916:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005918:	2f78      	cmp	r7, #120	; 0x78
 800591a:	4691      	mov	r9, r2
 800591c:	4680      	mov	r8, r0
 800591e:	460c      	mov	r4, r1
 8005920:	469a      	mov	sl, r3
 8005922:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005926:	d807      	bhi.n	8005938 <_printf_i+0x28>
 8005928:	2f62      	cmp	r7, #98	; 0x62
 800592a:	d80a      	bhi.n	8005942 <_printf_i+0x32>
 800592c:	2f00      	cmp	r7, #0
 800592e:	f000 80d8 	beq.w	8005ae2 <_printf_i+0x1d2>
 8005932:	2f58      	cmp	r7, #88	; 0x58
 8005934:	f000 80a3 	beq.w	8005a7e <_printf_i+0x16e>
 8005938:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800593c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005940:	e03a      	b.n	80059b8 <_printf_i+0xa8>
 8005942:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005946:	2b15      	cmp	r3, #21
 8005948:	d8f6      	bhi.n	8005938 <_printf_i+0x28>
 800594a:	a101      	add	r1, pc, #4	; (adr r1, 8005950 <_printf_i+0x40>)
 800594c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005950:	080059a9 	.word	0x080059a9
 8005954:	080059bd 	.word	0x080059bd
 8005958:	08005939 	.word	0x08005939
 800595c:	08005939 	.word	0x08005939
 8005960:	08005939 	.word	0x08005939
 8005964:	08005939 	.word	0x08005939
 8005968:	080059bd 	.word	0x080059bd
 800596c:	08005939 	.word	0x08005939
 8005970:	08005939 	.word	0x08005939
 8005974:	08005939 	.word	0x08005939
 8005978:	08005939 	.word	0x08005939
 800597c:	08005ac9 	.word	0x08005ac9
 8005980:	080059ed 	.word	0x080059ed
 8005984:	08005aab 	.word	0x08005aab
 8005988:	08005939 	.word	0x08005939
 800598c:	08005939 	.word	0x08005939
 8005990:	08005aeb 	.word	0x08005aeb
 8005994:	08005939 	.word	0x08005939
 8005998:	080059ed 	.word	0x080059ed
 800599c:	08005939 	.word	0x08005939
 80059a0:	08005939 	.word	0x08005939
 80059a4:	08005ab3 	.word	0x08005ab3
 80059a8:	682b      	ldr	r3, [r5, #0]
 80059aa:	1d1a      	adds	r2, r3, #4
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	602a      	str	r2, [r5, #0]
 80059b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059b8:	2301      	movs	r3, #1
 80059ba:	e0a3      	b.n	8005b04 <_printf_i+0x1f4>
 80059bc:	6820      	ldr	r0, [r4, #0]
 80059be:	6829      	ldr	r1, [r5, #0]
 80059c0:	0606      	lsls	r6, r0, #24
 80059c2:	f101 0304 	add.w	r3, r1, #4
 80059c6:	d50a      	bpl.n	80059de <_printf_i+0xce>
 80059c8:	680e      	ldr	r6, [r1, #0]
 80059ca:	602b      	str	r3, [r5, #0]
 80059cc:	2e00      	cmp	r6, #0
 80059ce:	da03      	bge.n	80059d8 <_printf_i+0xc8>
 80059d0:	232d      	movs	r3, #45	; 0x2d
 80059d2:	4276      	negs	r6, r6
 80059d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059d8:	485e      	ldr	r0, [pc, #376]	; (8005b54 <_printf_i+0x244>)
 80059da:	230a      	movs	r3, #10
 80059dc:	e019      	b.n	8005a12 <_printf_i+0x102>
 80059de:	680e      	ldr	r6, [r1, #0]
 80059e0:	602b      	str	r3, [r5, #0]
 80059e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80059e6:	bf18      	it	ne
 80059e8:	b236      	sxthne	r6, r6
 80059ea:	e7ef      	b.n	80059cc <_printf_i+0xbc>
 80059ec:	682b      	ldr	r3, [r5, #0]
 80059ee:	6820      	ldr	r0, [r4, #0]
 80059f0:	1d19      	adds	r1, r3, #4
 80059f2:	6029      	str	r1, [r5, #0]
 80059f4:	0601      	lsls	r1, r0, #24
 80059f6:	d501      	bpl.n	80059fc <_printf_i+0xec>
 80059f8:	681e      	ldr	r6, [r3, #0]
 80059fa:	e002      	b.n	8005a02 <_printf_i+0xf2>
 80059fc:	0646      	lsls	r6, r0, #25
 80059fe:	d5fb      	bpl.n	80059f8 <_printf_i+0xe8>
 8005a00:	881e      	ldrh	r6, [r3, #0]
 8005a02:	4854      	ldr	r0, [pc, #336]	; (8005b54 <_printf_i+0x244>)
 8005a04:	2f6f      	cmp	r7, #111	; 0x6f
 8005a06:	bf0c      	ite	eq
 8005a08:	2308      	moveq	r3, #8
 8005a0a:	230a      	movne	r3, #10
 8005a0c:	2100      	movs	r1, #0
 8005a0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a12:	6865      	ldr	r5, [r4, #4]
 8005a14:	60a5      	str	r5, [r4, #8]
 8005a16:	2d00      	cmp	r5, #0
 8005a18:	bfa2      	ittt	ge
 8005a1a:	6821      	ldrge	r1, [r4, #0]
 8005a1c:	f021 0104 	bicge.w	r1, r1, #4
 8005a20:	6021      	strge	r1, [r4, #0]
 8005a22:	b90e      	cbnz	r6, 8005a28 <_printf_i+0x118>
 8005a24:	2d00      	cmp	r5, #0
 8005a26:	d04d      	beq.n	8005ac4 <_printf_i+0x1b4>
 8005a28:	4615      	mov	r5, r2
 8005a2a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005a2e:	fb03 6711 	mls	r7, r3, r1, r6
 8005a32:	5dc7      	ldrb	r7, [r0, r7]
 8005a34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a38:	4637      	mov	r7, r6
 8005a3a:	42bb      	cmp	r3, r7
 8005a3c:	460e      	mov	r6, r1
 8005a3e:	d9f4      	bls.n	8005a2a <_printf_i+0x11a>
 8005a40:	2b08      	cmp	r3, #8
 8005a42:	d10b      	bne.n	8005a5c <_printf_i+0x14c>
 8005a44:	6823      	ldr	r3, [r4, #0]
 8005a46:	07de      	lsls	r6, r3, #31
 8005a48:	d508      	bpl.n	8005a5c <_printf_i+0x14c>
 8005a4a:	6923      	ldr	r3, [r4, #16]
 8005a4c:	6861      	ldr	r1, [r4, #4]
 8005a4e:	4299      	cmp	r1, r3
 8005a50:	bfde      	ittt	le
 8005a52:	2330      	movle	r3, #48	; 0x30
 8005a54:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a58:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a5c:	1b52      	subs	r2, r2, r5
 8005a5e:	6122      	str	r2, [r4, #16]
 8005a60:	f8cd a000 	str.w	sl, [sp]
 8005a64:	464b      	mov	r3, r9
 8005a66:	aa03      	add	r2, sp, #12
 8005a68:	4621      	mov	r1, r4
 8005a6a:	4640      	mov	r0, r8
 8005a6c:	f7ff fee2 	bl	8005834 <_printf_common>
 8005a70:	3001      	adds	r0, #1
 8005a72:	d14c      	bne.n	8005b0e <_printf_i+0x1fe>
 8005a74:	f04f 30ff 	mov.w	r0, #4294967295
 8005a78:	b004      	add	sp, #16
 8005a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a7e:	4835      	ldr	r0, [pc, #212]	; (8005b54 <_printf_i+0x244>)
 8005a80:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005a84:	6829      	ldr	r1, [r5, #0]
 8005a86:	6823      	ldr	r3, [r4, #0]
 8005a88:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a8c:	6029      	str	r1, [r5, #0]
 8005a8e:	061d      	lsls	r5, r3, #24
 8005a90:	d514      	bpl.n	8005abc <_printf_i+0x1ac>
 8005a92:	07df      	lsls	r7, r3, #31
 8005a94:	bf44      	itt	mi
 8005a96:	f043 0320 	orrmi.w	r3, r3, #32
 8005a9a:	6023      	strmi	r3, [r4, #0]
 8005a9c:	b91e      	cbnz	r6, 8005aa6 <_printf_i+0x196>
 8005a9e:	6823      	ldr	r3, [r4, #0]
 8005aa0:	f023 0320 	bic.w	r3, r3, #32
 8005aa4:	6023      	str	r3, [r4, #0]
 8005aa6:	2310      	movs	r3, #16
 8005aa8:	e7b0      	b.n	8005a0c <_printf_i+0xfc>
 8005aaa:	6823      	ldr	r3, [r4, #0]
 8005aac:	f043 0320 	orr.w	r3, r3, #32
 8005ab0:	6023      	str	r3, [r4, #0]
 8005ab2:	2378      	movs	r3, #120	; 0x78
 8005ab4:	4828      	ldr	r0, [pc, #160]	; (8005b58 <_printf_i+0x248>)
 8005ab6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005aba:	e7e3      	b.n	8005a84 <_printf_i+0x174>
 8005abc:	0659      	lsls	r1, r3, #25
 8005abe:	bf48      	it	mi
 8005ac0:	b2b6      	uxthmi	r6, r6
 8005ac2:	e7e6      	b.n	8005a92 <_printf_i+0x182>
 8005ac4:	4615      	mov	r5, r2
 8005ac6:	e7bb      	b.n	8005a40 <_printf_i+0x130>
 8005ac8:	682b      	ldr	r3, [r5, #0]
 8005aca:	6826      	ldr	r6, [r4, #0]
 8005acc:	6961      	ldr	r1, [r4, #20]
 8005ace:	1d18      	adds	r0, r3, #4
 8005ad0:	6028      	str	r0, [r5, #0]
 8005ad2:	0635      	lsls	r5, r6, #24
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	d501      	bpl.n	8005adc <_printf_i+0x1cc>
 8005ad8:	6019      	str	r1, [r3, #0]
 8005ada:	e002      	b.n	8005ae2 <_printf_i+0x1d2>
 8005adc:	0670      	lsls	r0, r6, #25
 8005ade:	d5fb      	bpl.n	8005ad8 <_printf_i+0x1c8>
 8005ae0:	8019      	strh	r1, [r3, #0]
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	6123      	str	r3, [r4, #16]
 8005ae6:	4615      	mov	r5, r2
 8005ae8:	e7ba      	b.n	8005a60 <_printf_i+0x150>
 8005aea:	682b      	ldr	r3, [r5, #0]
 8005aec:	1d1a      	adds	r2, r3, #4
 8005aee:	602a      	str	r2, [r5, #0]
 8005af0:	681d      	ldr	r5, [r3, #0]
 8005af2:	6862      	ldr	r2, [r4, #4]
 8005af4:	2100      	movs	r1, #0
 8005af6:	4628      	mov	r0, r5
 8005af8:	f7fa fb7a 	bl	80001f0 <memchr>
 8005afc:	b108      	cbz	r0, 8005b02 <_printf_i+0x1f2>
 8005afe:	1b40      	subs	r0, r0, r5
 8005b00:	6060      	str	r0, [r4, #4]
 8005b02:	6863      	ldr	r3, [r4, #4]
 8005b04:	6123      	str	r3, [r4, #16]
 8005b06:	2300      	movs	r3, #0
 8005b08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b0c:	e7a8      	b.n	8005a60 <_printf_i+0x150>
 8005b0e:	6923      	ldr	r3, [r4, #16]
 8005b10:	462a      	mov	r2, r5
 8005b12:	4649      	mov	r1, r9
 8005b14:	4640      	mov	r0, r8
 8005b16:	47d0      	blx	sl
 8005b18:	3001      	adds	r0, #1
 8005b1a:	d0ab      	beq.n	8005a74 <_printf_i+0x164>
 8005b1c:	6823      	ldr	r3, [r4, #0]
 8005b1e:	079b      	lsls	r3, r3, #30
 8005b20:	d413      	bmi.n	8005b4a <_printf_i+0x23a>
 8005b22:	68e0      	ldr	r0, [r4, #12]
 8005b24:	9b03      	ldr	r3, [sp, #12]
 8005b26:	4298      	cmp	r0, r3
 8005b28:	bfb8      	it	lt
 8005b2a:	4618      	movlt	r0, r3
 8005b2c:	e7a4      	b.n	8005a78 <_printf_i+0x168>
 8005b2e:	2301      	movs	r3, #1
 8005b30:	4632      	mov	r2, r6
 8005b32:	4649      	mov	r1, r9
 8005b34:	4640      	mov	r0, r8
 8005b36:	47d0      	blx	sl
 8005b38:	3001      	adds	r0, #1
 8005b3a:	d09b      	beq.n	8005a74 <_printf_i+0x164>
 8005b3c:	3501      	adds	r5, #1
 8005b3e:	68e3      	ldr	r3, [r4, #12]
 8005b40:	9903      	ldr	r1, [sp, #12]
 8005b42:	1a5b      	subs	r3, r3, r1
 8005b44:	42ab      	cmp	r3, r5
 8005b46:	dcf2      	bgt.n	8005b2e <_printf_i+0x21e>
 8005b48:	e7eb      	b.n	8005b22 <_printf_i+0x212>
 8005b4a:	2500      	movs	r5, #0
 8005b4c:	f104 0619 	add.w	r6, r4, #25
 8005b50:	e7f5      	b.n	8005b3e <_printf_i+0x22e>
 8005b52:	bf00      	nop
 8005b54:	08006065 	.word	0x08006065
 8005b58:	08006076 	.word	0x08006076

08005b5c <memcpy>:
 8005b5c:	440a      	add	r2, r1
 8005b5e:	4291      	cmp	r1, r2
 8005b60:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b64:	d100      	bne.n	8005b68 <memcpy+0xc>
 8005b66:	4770      	bx	lr
 8005b68:	b510      	push	{r4, lr}
 8005b6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b72:	4291      	cmp	r1, r2
 8005b74:	d1f9      	bne.n	8005b6a <memcpy+0xe>
 8005b76:	bd10      	pop	{r4, pc}

08005b78 <memmove>:
 8005b78:	4288      	cmp	r0, r1
 8005b7a:	b510      	push	{r4, lr}
 8005b7c:	eb01 0402 	add.w	r4, r1, r2
 8005b80:	d902      	bls.n	8005b88 <memmove+0x10>
 8005b82:	4284      	cmp	r4, r0
 8005b84:	4623      	mov	r3, r4
 8005b86:	d807      	bhi.n	8005b98 <memmove+0x20>
 8005b88:	1e43      	subs	r3, r0, #1
 8005b8a:	42a1      	cmp	r1, r4
 8005b8c:	d008      	beq.n	8005ba0 <memmove+0x28>
 8005b8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b96:	e7f8      	b.n	8005b8a <memmove+0x12>
 8005b98:	4402      	add	r2, r0
 8005b9a:	4601      	mov	r1, r0
 8005b9c:	428a      	cmp	r2, r1
 8005b9e:	d100      	bne.n	8005ba2 <memmove+0x2a>
 8005ba0:	bd10      	pop	{r4, pc}
 8005ba2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ba6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005baa:	e7f7      	b.n	8005b9c <memmove+0x24>

08005bac <_free_r>:
 8005bac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005bae:	2900      	cmp	r1, #0
 8005bb0:	d044      	beq.n	8005c3c <_free_r+0x90>
 8005bb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bb6:	9001      	str	r0, [sp, #4]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	f1a1 0404 	sub.w	r4, r1, #4
 8005bbe:	bfb8      	it	lt
 8005bc0:	18e4      	addlt	r4, r4, r3
 8005bc2:	f000 f913 	bl	8005dec <__malloc_lock>
 8005bc6:	4a1e      	ldr	r2, [pc, #120]	; (8005c40 <_free_r+0x94>)
 8005bc8:	9801      	ldr	r0, [sp, #4]
 8005bca:	6813      	ldr	r3, [r2, #0]
 8005bcc:	b933      	cbnz	r3, 8005bdc <_free_r+0x30>
 8005bce:	6063      	str	r3, [r4, #4]
 8005bd0:	6014      	str	r4, [r2, #0]
 8005bd2:	b003      	add	sp, #12
 8005bd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005bd8:	f000 b90e 	b.w	8005df8 <__malloc_unlock>
 8005bdc:	42a3      	cmp	r3, r4
 8005bde:	d908      	bls.n	8005bf2 <_free_r+0x46>
 8005be0:	6825      	ldr	r5, [r4, #0]
 8005be2:	1961      	adds	r1, r4, r5
 8005be4:	428b      	cmp	r3, r1
 8005be6:	bf01      	itttt	eq
 8005be8:	6819      	ldreq	r1, [r3, #0]
 8005bea:	685b      	ldreq	r3, [r3, #4]
 8005bec:	1949      	addeq	r1, r1, r5
 8005bee:	6021      	streq	r1, [r4, #0]
 8005bf0:	e7ed      	b.n	8005bce <_free_r+0x22>
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	b10b      	cbz	r3, 8005bfc <_free_r+0x50>
 8005bf8:	42a3      	cmp	r3, r4
 8005bfa:	d9fa      	bls.n	8005bf2 <_free_r+0x46>
 8005bfc:	6811      	ldr	r1, [r2, #0]
 8005bfe:	1855      	adds	r5, r2, r1
 8005c00:	42a5      	cmp	r5, r4
 8005c02:	d10b      	bne.n	8005c1c <_free_r+0x70>
 8005c04:	6824      	ldr	r4, [r4, #0]
 8005c06:	4421      	add	r1, r4
 8005c08:	1854      	adds	r4, r2, r1
 8005c0a:	42a3      	cmp	r3, r4
 8005c0c:	6011      	str	r1, [r2, #0]
 8005c0e:	d1e0      	bne.n	8005bd2 <_free_r+0x26>
 8005c10:	681c      	ldr	r4, [r3, #0]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	6053      	str	r3, [r2, #4]
 8005c16:	4421      	add	r1, r4
 8005c18:	6011      	str	r1, [r2, #0]
 8005c1a:	e7da      	b.n	8005bd2 <_free_r+0x26>
 8005c1c:	d902      	bls.n	8005c24 <_free_r+0x78>
 8005c1e:	230c      	movs	r3, #12
 8005c20:	6003      	str	r3, [r0, #0]
 8005c22:	e7d6      	b.n	8005bd2 <_free_r+0x26>
 8005c24:	6825      	ldr	r5, [r4, #0]
 8005c26:	1961      	adds	r1, r4, r5
 8005c28:	428b      	cmp	r3, r1
 8005c2a:	bf04      	itt	eq
 8005c2c:	6819      	ldreq	r1, [r3, #0]
 8005c2e:	685b      	ldreq	r3, [r3, #4]
 8005c30:	6063      	str	r3, [r4, #4]
 8005c32:	bf04      	itt	eq
 8005c34:	1949      	addeq	r1, r1, r5
 8005c36:	6021      	streq	r1, [r4, #0]
 8005c38:	6054      	str	r4, [r2, #4]
 8005c3a:	e7ca      	b.n	8005bd2 <_free_r+0x26>
 8005c3c:	b003      	add	sp, #12
 8005c3e:	bd30      	pop	{r4, r5, pc}
 8005c40:	200005c8 	.word	0x200005c8

08005c44 <sbrk_aligned>:
 8005c44:	b570      	push	{r4, r5, r6, lr}
 8005c46:	4e0e      	ldr	r6, [pc, #56]	; (8005c80 <sbrk_aligned+0x3c>)
 8005c48:	460c      	mov	r4, r1
 8005c4a:	6831      	ldr	r1, [r6, #0]
 8005c4c:	4605      	mov	r5, r0
 8005c4e:	b911      	cbnz	r1, 8005c56 <sbrk_aligned+0x12>
 8005c50:	f000 f8bc 	bl	8005dcc <_sbrk_r>
 8005c54:	6030      	str	r0, [r6, #0]
 8005c56:	4621      	mov	r1, r4
 8005c58:	4628      	mov	r0, r5
 8005c5a:	f000 f8b7 	bl	8005dcc <_sbrk_r>
 8005c5e:	1c43      	adds	r3, r0, #1
 8005c60:	d00a      	beq.n	8005c78 <sbrk_aligned+0x34>
 8005c62:	1cc4      	adds	r4, r0, #3
 8005c64:	f024 0403 	bic.w	r4, r4, #3
 8005c68:	42a0      	cmp	r0, r4
 8005c6a:	d007      	beq.n	8005c7c <sbrk_aligned+0x38>
 8005c6c:	1a21      	subs	r1, r4, r0
 8005c6e:	4628      	mov	r0, r5
 8005c70:	f000 f8ac 	bl	8005dcc <_sbrk_r>
 8005c74:	3001      	adds	r0, #1
 8005c76:	d101      	bne.n	8005c7c <sbrk_aligned+0x38>
 8005c78:	f04f 34ff 	mov.w	r4, #4294967295
 8005c7c:	4620      	mov	r0, r4
 8005c7e:	bd70      	pop	{r4, r5, r6, pc}
 8005c80:	200005cc 	.word	0x200005cc

08005c84 <_malloc_r>:
 8005c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c88:	1ccd      	adds	r5, r1, #3
 8005c8a:	f025 0503 	bic.w	r5, r5, #3
 8005c8e:	3508      	adds	r5, #8
 8005c90:	2d0c      	cmp	r5, #12
 8005c92:	bf38      	it	cc
 8005c94:	250c      	movcc	r5, #12
 8005c96:	2d00      	cmp	r5, #0
 8005c98:	4607      	mov	r7, r0
 8005c9a:	db01      	blt.n	8005ca0 <_malloc_r+0x1c>
 8005c9c:	42a9      	cmp	r1, r5
 8005c9e:	d905      	bls.n	8005cac <_malloc_r+0x28>
 8005ca0:	230c      	movs	r3, #12
 8005ca2:	603b      	str	r3, [r7, #0]
 8005ca4:	2600      	movs	r6, #0
 8005ca6:	4630      	mov	r0, r6
 8005ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cac:	4e2e      	ldr	r6, [pc, #184]	; (8005d68 <_malloc_r+0xe4>)
 8005cae:	f000 f89d 	bl	8005dec <__malloc_lock>
 8005cb2:	6833      	ldr	r3, [r6, #0]
 8005cb4:	461c      	mov	r4, r3
 8005cb6:	bb34      	cbnz	r4, 8005d06 <_malloc_r+0x82>
 8005cb8:	4629      	mov	r1, r5
 8005cba:	4638      	mov	r0, r7
 8005cbc:	f7ff ffc2 	bl	8005c44 <sbrk_aligned>
 8005cc0:	1c43      	adds	r3, r0, #1
 8005cc2:	4604      	mov	r4, r0
 8005cc4:	d14d      	bne.n	8005d62 <_malloc_r+0xde>
 8005cc6:	6834      	ldr	r4, [r6, #0]
 8005cc8:	4626      	mov	r6, r4
 8005cca:	2e00      	cmp	r6, #0
 8005ccc:	d140      	bne.n	8005d50 <_malloc_r+0xcc>
 8005cce:	6823      	ldr	r3, [r4, #0]
 8005cd0:	4631      	mov	r1, r6
 8005cd2:	4638      	mov	r0, r7
 8005cd4:	eb04 0803 	add.w	r8, r4, r3
 8005cd8:	f000 f878 	bl	8005dcc <_sbrk_r>
 8005cdc:	4580      	cmp	r8, r0
 8005cde:	d13a      	bne.n	8005d56 <_malloc_r+0xd2>
 8005ce0:	6821      	ldr	r1, [r4, #0]
 8005ce2:	3503      	adds	r5, #3
 8005ce4:	1a6d      	subs	r5, r5, r1
 8005ce6:	f025 0503 	bic.w	r5, r5, #3
 8005cea:	3508      	adds	r5, #8
 8005cec:	2d0c      	cmp	r5, #12
 8005cee:	bf38      	it	cc
 8005cf0:	250c      	movcc	r5, #12
 8005cf2:	4629      	mov	r1, r5
 8005cf4:	4638      	mov	r0, r7
 8005cf6:	f7ff ffa5 	bl	8005c44 <sbrk_aligned>
 8005cfa:	3001      	adds	r0, #1
 8005cfc:	d02b      	beq.n	8005d56 <_malloc_r+0xd2>
 8005cfe:	6823      	ldr	r3, [r4, #0]
 8005d00:	442b      	add	r3, r5
 8005d02:	6023      	str	r3, [r4, #0]
 8005d04:	e00e      	b.n	8005d24 <_malloc_r+0xa0>
 8005d06:	6822      	ldr	r2, [r4, #0]
 8005d08:	1b52      	subs	r2, r2, r5
 8005d0a:	d41e      	bmi.n	8005d4a <_malloc_r+0xc6>
 8005d0c:	2a0b      	cmp	r2, #11
 8005d0e:	d916      	bls.n	8005d3e <_malloc_r+0xba>
 8005d10:	1961      	adds	r1, r4, r5
 8005d12:	42a3      	cmp	r3, r4
 8005d14:	6025      	str	r5, [r4, #0]
 8005d16:	bf18      	it	ne
 8005d18:	6059      	strne	r1, [r3, #4]
 8005d1a:	6863      	ldr	r3, [r4, #4]
 8005d1c:	bf08      	it	eq
 8005d1e:	6031      	streq	r1, [r6, #0]
 8005d20:	5162      	str	r2, [r4, r5]
 8005d22:	604b      	str	r3, [r1, #4]
 8005d24:	4638      	mov	r0, r7
 8005d26:	f104 060b 	add.w	r6, r4, #11
 8005d2a:	f000 f865 	bl	8005df8 <__malloc_unlock>
 8005d2e:	f026 0607 	bic.w	r6, r6, #7
 8005d32:	1d23      	adds	r3, r4, #4
 8005d34:	1af2      	subs	r2, r6, r3
 8005d36:	d0b6      	beq.n	8005ca6 <_malloc_r+0x22>
 8005d38:	1b9b      	subs	r3, r3, r6
 8005d3a:	50a3      	str	r3, [r4, r2]
 8005d3c:	e7b3      	b.n	8005ca6 <_malloc_r+0x22>
 8005d3e:	6862      	ldr	r2, [r4, #4]
 8005d40:	42a3      	cmp	r3, r4
 8005d42:	bf0c      	ite	eq
 8005d44:	6032      	streq	r2, [r6, #0]
 8005d46:	605a      	strne	r2, [r3, #4]
 8005d48:	e7ec      	b.n	8005d24 <_malloc_r+0xa0>
 8005d4a:	4623      	mov	r3, r4
 8005d4c:	6864      	ldr	r4, [r4, #4]
 8005d4e:	e7b2      	b.n	8005cb6 <_malloc_r+0x32>
 8005d50:	4634      	mov	r4, r6
 8005d52:	6876      	ldr	r6, [r6, #4]
 8005d54:	e7b9      	b.n	8005cca <_malloc_r+0x46>
 8005d56:	230c      	movs	r3, #12
 8005d58:	603b      	str	r3, [r7, #0]
 8005d5a:	4638      	mov	r0, r7
 8005d5c:	f000 f84c 	bl	8005df8 <__malloc_unlock>
 8005d60:	e7a1      	b.n	8005ca6 <_malloc_r+0x22>
 8005d62:	6025      	str	r5, [r4, #0]
 8005d64:	e7de      	b.n	8005d24 <_malloc_r+0xa0>
 8005d66:	bf00      	nop
 8005d68:	200005c8 	.word	0x200005c8

08005d6c <_realloc_r>:
 8005d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d70:	4680      	mov	r8, r0
 8005d72:	4614      	mov	r4, r2
 8005d74:	460e      	mov	r6, r1
 8005d76:	b921      	cbnz	r1, 8005d82 <_realloc_r+0x16>
 8005d78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d7c:	4611      	mov	r1, r2
 8005d7e:	f7ff bf81 	b.w	8005c84 <_malloc_r>
 8005d82:	b92a      	cbnz	r2, 8005d90 <_realloc_r+0x24>
 8005d84:	f7ff ff12 	bl	8005bac <_free_r>
 8005d88:	4625      	mov	r5, r4
 8005d8a:	4628      	mov	r0, r5
 8005d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d90:	f000 f838 	bl	8005e04 <_malloc_usable_size_r>
 8005d94:	4284      	cmp	r4, r0
 8005d96:	4607      	mov	r7, r0
 8005d98:	d802      	bhi.n	8005da0 <_realloc_r+0x34>
 8005d9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005d9e:	d812      	bhi.n	8005dc6 <_realloc_r+0x5a>
 8005da0:	4621      	mov	r1, r4
 8005da2:	4640      	mov	r0, r8
 8005da4:	f7ff ff6e 	bl	8005c84 <_malloc_r>
 8005da8:	4605      	mov	r5, r0
 8005daa:	2800      	cmp	r0, #0
 8005dac:	d0ed      	beq.n	8005d8a <_realloc_r+0x1e>
 8005dae:	42bc      	cmp	r4, r7
 8005db0:	4622      	mov	r2, r4
 8005db2:	4631      	mov	r1, r6
 8005db4:	bf28      	it	cs
 8005db6:	463a      	movcs	r2, r7
 8005db8:	f7ff fed0 	bl	8005b5c <memcpy>
 8005dbc:	4631      	mov	r1, r6
 8005dbe:	4640      	mov	r0, r8
 8005dc0:	f7ff fef4 	bl	8005bac <_free_r>
 8005dc4:	e7e1      	b.n	8005d8a <_realloc_r+0x1e>
 8005dc6:	4635      	mov	r5, r6
 8005dc8:	e7df      	b.n	8005d8a <_realloc_r+0x1e>
	...

08005dcc <_sbrk_r>:
 8005dcc:	b538      	push	{r3, r4, r5, lr}
 8005dce:	4d06      	ldr	r5, [pc, #24]	; (8005de8 <_sbrk_r+0x1c>)
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	4604      	mov	r4, r0
 8005dd4:	4608      	mov	r0, r1
 8005dd6:	602b      	str	r3, [r5, #0]
 8005dd8:	f7fc f8d4 	bl	8001f84 <_sbrk>
 8005ddc:	1c43      	adds	r3, r0, #1
 8005dde:	d102      	bne.n	8005de6 <_sbrk_r+0x1a>
 8005de0:	682b      	ldr	r3, [r5, #0]
 8005de2:	b103      	cbz	r3, 8005de6 <_sbrk_r+0x1a>
 8005de4:	6023      	str	r3, [r4, #0]
 8005de6:	bd38      	pop	{r3, r4, r5, pc}
 8005de8:	200005d0 	.word	0x200005d0

08005dec <__malloc_lock>:
 8005dec:	4801      	ldr	r0, [pc, #4]	; (8005df4 <__malloc_lock+0x8>)
 8005dee:	f000 b811 	b.w	8005e14 <__retarget_lock_acquire_recursive>
 8005df2:	bf00      	nop
 8005df4:	200005d4 	.word	0x200005d4

08005df8 <__malloc_unlock>:
 8005df8:	4801      	ldr	r0, [pc, #4]	; (8005e00 <__malloc_unlock+0x8>)
 8005dfa:	f000 b80c 	b.w	8005e16 <__retarget_lock_release_recursive>
 8005dfe:	bf00      	nop
 8005e00:	200005d4 	.word	0x200005d4

08005e04 <_malloc_usable_size_r>:
 8005e04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e08:	1f18      	subs	r0, r3, #4
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	bfbc      	itt	lt
 8005e0e:	580b      	ldrlt	r3, [r1, r0]
 8005e10:	18c0      	addlt	r0, r0, r3
 8005e12:	4770      	bx	lr

08005e14 <__retarget_lock_acquire_recursive>:
 8005e14:	4770      	bx	lr

08005e16 <__retarget_lock_release_recursive>:
 8005e16:	4770      	bx	lr

08005e18 <_init>:
 8005e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e1a:	bf00      	nop
 8005e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e1e:	bc08      	pop	{r3}
 8005e20:	469e      	mov	lr, r3
 8005e22:	4770      	bx	lr

08005e24 <_fini>:
 8005e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e26:	bf00      	nop
 8005e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e2a:	bc08      	pop	{r3}
 8005e2c:	469e      	mov	lr, r3
 8005e2e:	4770      	bx	lr
